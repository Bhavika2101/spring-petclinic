/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate if the function correctly initializes an empty Owner object.  
**Expected Result:** An empty Owner object should be initialized.

2. **Scenario:** Validate if the function correctly adds the Owner object to the model with the key "owner".  
**Expected Result:** The model should contain the Owner object with the key "owner".

3. **Scenario:** Validate if the function returns the correct view name (VIEWS_OWNER_CREATE_OR_UPDATE_FORM).  
**Expected Result:** The returned string should be equal to VIEWS_OWNER_CREATE_OR_UPDATE_FORM.

4. **Scenario:** Validate how the function behaves when an error occurs during the Owner object creation.  
**Expected Result:** The function should handle the error gracefully, possibly logging the error and returning an error view.

5. **Scenario:** Validate how the function behaves when an error occurs while adding the Owner object to the model.  
**Expected Result:** The function should handle the error gracefully, possibly logging the error and returning an error view.

6. **Scenario:** Validate how the function behaves when the model map is null.  
**Expected Result:** The function should handle the null model map gracefully, possibly initializing a new model map, logging the error, or returning an error view.

7. **Scenario:** Validate the function with a model map that already contains an entry with the key "owner".  
**Expected Result:** The function should overwrite the existing "owner" entry with the new Owner object.

8. **Scenario:** Validate the function with a model map that contains multiple entries.  
**Expected Result:** The function should only add or replace the "owner" entry and leave the rest of the entries in the model map unchanged.

9. **Scenario:** Validate the function when the "owner" key is already used in the model for a different type of object.  
**Expected Result:** The function should replace the existing object with the new Owner object.

10. **Scenario:** Validate the function when the model map is read-only or immutable.  
**Expected Result:** The function should handle this situation gracefully, possibly logging the error and returning an error view.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.ui.Model;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class OwnerController_initCreationForm_d86a3fe6d2_Test {

    private OwnerController ownerController;
    private Model model;
    private Map<String, Object> modelMap;

    @BeforeEach
    public void setup() {
        OwnerRepository owners = Mockito.mock(OwnerRepository.class);
        ownerController = new OwnerController(owners);
        model = Mockito.mock(Model.class);
        modelMap = new HashMap<>();
    }

    @Test
    public void testInitCreationForm() {
        when(model.asMap()).thenReturn(modelMap);
        String viewName = ownerController.initCreationForm(modelMap);
        verify(model, times(1)).asMap();
        assertEquals("owners/createOrUpdateOwnerForm", viewName);
        assertEquals(new Owner(), modelMap.get("owner"));
    }

    @Test
    public void testInitCreationForm_ModelMapAlreadyContainsOwner() {
        modelMap.put("owner", new Owner());
        when(model.asMap()).thenReturn(modelMap);
        String viewName = ownerController.initCreationForm(modelMap);
        verify(model, times(1)).asMap();
        assertEquals("owners/createOrUpdateOwnerForm", viewName);
        assertEquals(new Owner(), modelMap.get("owner"));
    }

    @Test
    public void testInitCreationForm_ModelMapContainsMultipleEntries() {
        modelMap.put("owner", new Owner());
        modelMap.put("otherKey", "otherValue");
        when(model.asMap()).thenReturn(modelMap);
        String viewName = ownerController.initCreationForm(modelMap);
        verify(model, times(1)).asMap();
        assertEquals("owners/createOrUpdateOwnerForm", viewName);
        assertEquals(new Owner(), modelMap.get("owner"));
        assertEquals("otherValue", modelMap.get("otherKey"));
    }

    @Test
    public void testInitCreationForm_ModelMapContainsDifferentObjectTypeWithOwnerKey() {
        modelMap.put("owner", "stringObject");
        when(model.asMap()).thenReturn(modelMap);
        String viewName = ownerController.initCreationForm(modelMap);
        verify(model, times(1)).asMap();
        assertEquals("owners/createOrUpdateOwnerForm", viewName);
        assertEquals(new Owner(), modelMap.get("owner"));
    }

    @Test
    public void testInitCreationForm_ModelMapIsNull() {
        String viewName = ownerController.initCreationForm(null);
        assertEquals("owners/createOrUpdateOwnerForm", viewName);
    }

    @Test
    public void testInitCreationForm_ModelMapIsImmutable() {
        modelMap = Mockito.mock(Map.class);
        doThrow(new UnsupportedOperationException()).when(modelMap).put(anyString(), any());
        String viewName = ownerController.initCreationForm(modelMap);
        assertEquals("owners/createOrUpdateOwnerForm", viewName);
    }
}
