/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the `setTelephone` method's business logic, we would need to create a series of test scenarios that cover the expected behavior, boundary conditions, and any exceptional cases. Here is a list of potential test scenarios:

1. **Valid Telephone Number**
   - Scenario: Set a valid telephone number that adheres to the expected format (e.g., 10 digits for a US number without country code).
   - Expected Result: The method should accept the telephone number without any error.

2. **Null Telephone Number**
   - Scenario: Try setting the telephone number to `null`.
   - Expected Result: Depending on the business rules, either an `IllegalArgumentException` should be thrown due to a `null` value not being allowed, or the method should accept `null` as a valid input if the business logic permits.

3. **Blank Telephone Number**
   - Scenario: Try setting the telephone number to an empty string or a string with only whitespace.
   - Expected Result: If the `@NotBlank` annotation is enforced, an exception or validation error should occur.

4. **Telephone Number with Invalid Characters**
   - Scenario: Set the telephone number with invalid characters (e.g., letters, special characters).
   - Expected Result: If the `@Digits` annotation is enforced, an exception or validation error should occur since the input is not purely numerical.

5. **Telephone Number with Excess Length**
   - Scenario: Set the telephone number with more digits than the maximum allowed (e.g., if 10 digits are allowed, provide 11 or more).
   - Expected Result: An exception or validation error should occur, assuming there's a validation constraint on the length.

6. **Telephone Number with Insufficient Length**
   - Scenario: Set the telephone number with fewer digits than required (e.g., if 10 digits are allowed, provide 9 or fewer).
   - Expected Result: An exception or validation error should occur, assuming there's a validation constraint on the length.

7. **International Telephone Number**
   - Scenario: Set a valid international telephone number that includes a country code.
   - Expected Result: Depending on the business rules, the method should either accept the international format or raise a validation error if only domestic formats are allowed.

8. **Telephone Number with Formatting Characters**
   - Scenario: Set the telephone number with formatting characters (e.g., parentheses, dashes, spaces, such as "(123) 456-7890").
   - Expected Result: The method should either clean and accept the number or raise a validation error if the format is not allowed.

9. **Telephone Number Update**
   - Scenario: Update an existing telephone number with a new valid number.
   - Expected Result: The method should successfully update the telephone number.

10. **Concurrent Access**
    - Scenario: Simulate a scenario where multiple threads are trying to set the telephone number at the same time.
    - Expected Result: The method should handle concurrent access correctly, ensuring thread safety if required by the business logic.

11. **Persistence Verification**
    - Scenario: After setting the telephone number, verify that the value is correctly persisted in the database (assuming there's a database involved).
    - Expected Result: The persisted value should match the value that was set.

12. **Read-Back Consistency**
    - Scenario: After setting the telephone number, retrieve the value and check for consistency.
    - Expected Result: The retrieved value should match the set value.

These scenarios are based on the assumption that there are validation constraints and business rules that are not explicitly defined in the code snippet provided. Typically, validation would be enforced through annotations or in the method itself, which would need to be considered when writing actual test code.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.samples.petclinic.model.Person;
import static org.junit.jupiter.api.Assertions.*;

class Owner_setTelephone_9c88790e49_Test {

    private Owner owner;

    @BeforeEach
    void setUp() {
        owner = new Owner();
    }

    @Test
    void testSetValidTelephone() {
        String validTelephone = "1234567890";
        owner.setTelephone(validTelephone);
        assertEquals(validTelephone, owner.getTelephone());
    }

    @Test
    void testSetNullTelephone() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.setTelephone(null));
        String expectedMessage = "Telephone cannot be null";
        String actualMessage = exception.getMessage();
        
        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testSetBlankTelephone() {
        String blankTelephone = "   ";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.setTelephone(blankTelephone));
        String expectedMessage = "Telephone cannot be blank";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testSetTelephoneWithInvalidCharacters() {
        String invalidTelephone = "123-abc-7890";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.setTelephone(invalidTelephone));
        String expectedMessage = "Telephone can only contain digits";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testSetTelephoneWithExcessLength() {
        String excessLengthTelephone = "12345678901";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.setTelephone(excessLengthTelephone));
        String expectedMessage = "Telephone must be 10 digits long";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testSetTelephoneWithInsufficientLength() {
        String insufficientLengthTelephone = "123456789";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.setTelephone(insufficientLengthTelephone));
        String expectedMessage = "Telephone must be 10 digits long";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testSetInternationalTelephone() {
        String internationalTelephone = "+11234567890";
        owner.setTelephone(internationalTelephone);
        assertEquals(internationalTelephone, owner.getTelephone());
    }

    @Test
    void testSetTelephoneWithFormattingCharacters() {
        String formattedTelephone = "(123) 456-7890";
        owner.setTelephone(formattedTelephone);
        assertEquals(formattedTelephone, owner.getTelephone());
    }

    @Test
    void testUpdateTelephone() {
        String firstTelephone = "1234567890";
        owner.setTelephone(firstTelephone);
        String secondTelephone = "0987654321";
        owner.setTelephone(secondTelephone);
        assertEquals(secondTelephone, owner.getTelephone());
    }

    // TODO: Implement test for concurrent access if needed

    // TODO: Implement test for persistence verification if needed

    // TODO: Implement test for read-back consistency if needed
}
