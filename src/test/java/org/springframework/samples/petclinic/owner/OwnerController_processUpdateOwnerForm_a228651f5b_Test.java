/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1: Valid Input**

- Given an owner with valid data
- When the processUpdateOwnerForm method is called with the valid owner and ownerId
- Then the owner should be saved successfully and the user should be redirected to the owner details page

**Test Scenario 2: Invalid Input**

- Given an owner with invalid data (e.g., empty name)
- When the processUpdateOwnerForm method is called with the invalid owner and ownerId
- Then the owner should not be saved and the user should be shown the owner form again with error messages

**Test Scenario 3: Null Owner**

- Given a null owner
- When the processUpdateOwnerForm method is called with the null owner and ownerId
- Then the method should throw an exception

**Test Scenario 4: Non-existent Owner**

- Given an ownerId that does not exist in the database
- When the processUpdateOwnerForm method is called with a valid owner and the non-existent ownerId
- Then the method should throw an exception
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@WebMvcTest(controllers = OwnerController.class)
class OwnerController_processUpdateOwnerForm_a228651f5b_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OwnerRepository owners;

    @Test
    void testValidInput() throws Exception {
        // Given an owner with valid data
        Owner owner = new Owner();
        owner.setFirstName("John");
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("123-456-7890");

        // When the processUpdateOwnerForm method is called with the valid owner and ownerId
        when(owners.findById(1)).thenReturn(owner);
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/1")
                .param("firstName", "John")
                .param("lastName", "Doe")
                .param("address", "123 Main Street")
                .param("city", "Anytown")
                .param("telephone", "123-456-7890"))
                .andExpect(MockMvcResultMatchers.status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/owners/1"));

        // Then the owner should be saved successfully and the user should be redirected to the owner details page
    }

    @Test
    void testInvalidInput() throws Exception {
        // Given an owner with invalid data (e.g., empty name)
        Owner owner = new Owner();
        owner.setFirstName("");
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("123-456-7890");

        // When the processUpdateOwnerForm method is called with the invalid owner and ownerId
        when(owners.findById(1)).thenReturn(owner);
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/1")
                .param("firstName", "")
                .param("lastName", "Doe")
                .param("address", "123 Main Street")
                .param("city", "Anytown")
                .param("telephone", "123-456-7890"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.view().name("owners/createOrUpdateOwnerForm"));

        // Then the owner should not be saved and the user should be shown the owner form again with error messages
    }

    @Test
    void testNullOwner() throws Exception {
        // Given a null owner
        Owner owner = null;

        // When the processUpdateOwnerForm method is called with the null owner and ownerId
        when(owners.findById(1)).thenReturn(owner);
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/1"))
                .andExpect(MockMvcResultMatchers.status().is5xxServerError());

        // Then the method should throw an exception
    }

    @ParameterizedTest
    @ValueSource(ints = {-1, 0, 100})
    void testNonExistentOwner(int ownerId) throws Exception {
        // Given an ownerId that does not exist in the database
        when(owners.findById(ownerId)).thenReturn(null);

        // When the processUpdateOwnerForm method is called with a valid owner and the non-existent ownerId
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/" + ownerId)
                .param("firstName", "John")
                .param("lastName", "Doe")
                .param("address", "123 Main Street")
                .param("city", "Anytown")
                .param("telephone", "123-456-7890"))
                .andExpect(MockMvcResultMatchers.status().is5xxServerError());

        // Then the method should throw an exception
    }
}
