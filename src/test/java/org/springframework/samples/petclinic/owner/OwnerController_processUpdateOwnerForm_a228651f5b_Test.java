/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Test the functionality when the Owner object is valid and there are no binding result errors. The expected outcome is the "redirect:/owners/{ownerId}" view.

Test Scenario 2: 
Test the functionality when the Owner object is valid but there are binding result errors. The expected outcome is the VIEWS_OWNER_CREATE_OR_UPDATE_FORM view.

Test Scenario 3: 
Test the functionality when the Owner object is not valid and there are binding result errors. The expected outcome is the VIEWS_OWNER_CREATE_OR_UPDATE_FORM view.

Test Scenario 4:
Test the functionality when the Owner object is not valid and there are no binding result errors. The expected outcome is to check how the function behaves. It should ideally return the VIEWS_OWNER_CREATE_OR_UPDATE_FORM view.

Test Scenario 5:
Validate the ownerId path variable with a valid integer. The expected outcome is the "redirect:/owners/{ownerId}" view.

Test Scenario 6:
Test the ownerId path variable with a non-integer value. The expected outcome is to check how the function behaves. It should ideally throw an exception.

Test Scenario 7:
Test the ownerId path variable with a negative integer. The expected outcome is to check how the function behaves. It should ideally throw an exception or return the VIEWS_OWNER_CREATE_OR_UPDATE_FORM view.

Test Scenario 8:
Test the ownerId path variable with a zero. The expected outcome is to check how the function behaves. It should ideally throw an exception or return the VIEWS_OWNER_CREATE_OR_UPDATE_FORM view.

Test Scenario 9:
Test the functionality when the Owner object is null. The expected outcome is to check how the function behaves. It should ideally throw an exception.

Test Scenario 10:
Test the functionality when the BindingResult object is null. The expected outcome is to check how the function behaves. It should ideally throw an exception.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class OwnerController_processUpdateOwnerForm_a228651f5b_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testProcessUpdateOwnerForm_ValidOwner_NoErrors() {
        Owner owner = new Owner();
        owner.setAddress("123 Street");
        owner.setCity("City");
        owner.setTelephone("1234567890");
        Errors errors = new BeanPropertyBindingResult(owner, "owner");
        when(owners.save(owner)).thenReturn(null);

        String view = ownerController.processUpdateOwnerForm(owner, errors, 1);

        assertEquals("redirect:/owners/1", view);
    }

    @Test
    public void testProcessUpdateOwnerForm_ValidOwner_WithErrors() {
        Owner owner = new Owner();
        owner.setAddress("123 Street");
        owner.setCity("City");
        owner.setTelephone("1234567890");
        Errors errors = new BeanPropertyBindingResult(owner, "owner");
        errors.rejectValue("address", "error.address", "Invalid address");
        when(owners.save(owner)).thenReturn(null);

        String view = ownerController.processUpdateOwnerForm(owner, errors, 1);

        assertEquals("owners/createOrUpdateOwnerForm", view);
    }

    @Test
    public void testProcessUpdateOwnerForm_InvalidOwner_WithErrors() {
        Owner owner = new Owner();
        Errors errors = new BeanPropertyBindingResult(owner, "owner");
        errors.rejectValue("address", "error.address", "Invalid address");

        String view = ownerController.processUpdateOwnerForm(owner, errors, 1);

        assertEquals("owners/createOrUpdateOwnerForm", view);
    }

    @Test
    public void testProcessUpdateOwnerForm_InvalidOwner_NoErrors() {
        Owner owner = new Owner();
        Errors errors = new BeanPropertyBindingResult(owner, "owner");

        String view = ownerController.processUpdateOwnerForm(owner, errors, 1);

        assertEquals("owners/createOrUpdateOwnerForm", view);
    }
}
