/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `processUpdateOwnerForm` method:

1. **Test with valid data**:
   - Create an `Owner` object with valid data.
   - Call `processUpdateOwnerForm` with the `Owner` object and a `BindingResult` object.
   - Verify that the `BindingResult` object does not have any errors.
   - Verify that the `Owner` object has been saved correctly in the database.
   - Verify that the method returns the expected redirect URL.

2. **Test with invalid data**:
   - Create an `Owner` object with invalid data.
   - Call `processUpdateOwnerForm` with the `Owner` object and a `BindingResult` object.
   - Verify that the `BindingResult` object has errors.
   - Verify that the `Owner` object has not been saved in the database.
   - Verify that the method returns the expected view name.

3. **Test with a non-existing ownerId**:
   - Create an `Owner` object with valid data.
   - Call `processUpdateOwnerForm` with the `Owner` object and a `BindingResult` object.
   - Verify that the `BindingResult` object does not have any errors.
   - Verify that the `Owner` object has not been saved in the database.
   - Verify that the method returns the expected redirect URL.

4. **Test with a null owner object**:
   - Call `processUpdateOwnerForm` with a null `Owner` object and a `BindingResult` object.
   - Verify that the `BindingResult` object has errors.
   - Verify that the `Owner` object has not been saved in the database.
   - Verify that the method returns the expected view name.

5. **Test with a null binding result object**:
   - Create an `Owner` object with valid data.
   - Call `processUpdateOwnerForm` with the `Owner` object and a null `BindingResult` object.
   - Verify that the method throws a `NullPointerException`.

Please note that these test scenarios assume that you have a way to verify that the `Owner` object has been saved correctly in the database and that the method returns the expected view or redirect URL. You may need to mock these dependencies in your tests to isolate the `processUpdateOwnerForm` method from the rest of your application.

*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.ModelAndView;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_processUpdateOwnerForm_a228651f5b_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @Mock
    private BindingResult result;

    @Mock
    private Owner owner;

    @Test
    public void testProcessUpdateOwnerForm_success() {
        when(result.hasErrors()).thenReturn(false);
        when(owner.getId()).thenReturn(1);
        when(owner.getName()).thenReturn("Test");
        when(owner.getAddress()).thenReturn("Test Address");
        when(owner.getCity()).thenReturn("Test City");
        when(owner.getTelephone()).thenReturn("1234567890");

        String viewName = ownerController.processUpdateOwnerForm(owner, result, 1);

        assertEquals("redirect:/owners/{ownerId}", viewName);
        verify(owners, times(1)).save(owner);
    }

    @Test
    public void testProcessUpdateOwnerForm_failure() {
        when(result.hasErrors()).thenReturn(true);

        String viewName = ownerController.processUpdateOwnerForm(owner, result, 1);

        assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
        verify(owners, never()).save(owner);
    }
}
