/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `initOwnerBinder` method:

1. **Test when the disallowed field "id" is present in the WebDataBinder**

   - Create a test case where a model attribute with an "id" field is passed to the `initOwnerBinder` method.
   - The `initOwnerBinder` method should not allow the "id" field to be bound.
   - You can verify this by checking if the `supportsField` method of the `WebDataBinder` returns `false` for the "id" field.

2. **Test when the disallowed field "id" is not present in the WebDataBinder**

   - Create a test case where a model attribute without an "id" field is passed to the `initOwnerBinder` method.
   - The `initOwnerBinder` method should allow all fields to be bound.
   - You can verify this by checking if the `supportsField` method of the `WebDataBinder` returns `true` for all fields.

3. **Test when the WebDataBinder is null**

   - Create a test case where the `initOwnerBinder` method is called with a null WebDataBinder.
   - The method should not throw any exceptions.
   - You can verify this by checking if the method does not throw any exceptions.

4. **Test when the disallowed field "id" is present in the WebDataBinder but is not editable**

   - Create a test case where a model attribute with an "id" field that is not editable is passed to the `initOwnerBinder` method.
   - The `initOwnerBinder` method should allow the "id" field to be bound.
   - You can verify this by checking if the `supportsField` method of the `WebDataBinder` returns `true` for the "id" field.

Remember, these test scenarios are based on the assumption that the `initOwnerBinder` method is supposed to prevent the "id" field from being bound. If the method is supposed to allow the "id" field to be bound, you would need to adjust the test scenarios accordingly.

*/
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.bind.WebDataBinder;

import static org.mockito.Mockito.*;

public class PetController_initOwnerBinder_c48260f88f_Test {

    @Mock
    private WebDataBinder dataBinder;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testInitOwnerBinder() {
        // Arrange
        when(dataBinder.getTarget()).thenReturn(new Object());

        // Act
        new PetController().initOwnerBinder(dataBinder);

        // Assert
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }

    @Test
    public void testInitOwnerBinder_NullTarget() {
        // Arrange
        when(dataBinder.getTarget()).thenReturn(null);

        // Act & Assert
        new PetController().initOwnerBinder(dataBinder);

        // Since the target is null, we don't expect any calls to setDisallowedFields
        verify(dataBinder, never()).setDisallowedFields(anyString());
    }
}
