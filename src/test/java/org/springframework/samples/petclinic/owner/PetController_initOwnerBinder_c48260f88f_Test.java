/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `initOwnerBinder` method, consider the following test scenarios:

1. **Disallow ID Field Modification Scenario:**
   - **Given** a `WebDataBinder` instance with various fields including "id"
   - **When** `initOwnerBinder` is called
   - **Then** ensure that the "id" field is disallowed for binding (attempting to bind this field should result in it being ignored)

2. **Allow Other Fields Scenario:**
   - **Given** a `WebDataBinder` instance with various fields including "name", "email", and "address"
   - **When** `initOwnerBinder` is called
   - **Then** ensure that fields other than "id" are still allowed for binding (modifications to these fields should be accepted)

3. **No Side-Effects Scenario:**
   - **Given** a `WebDataBinder` instance with pre-set disallowed fields other than "id"
   - **When** `initOwnerBinder` is called
   - **Then** ensure that the pre-set disallowed fields remain disallowed and only "id" is added to the list of disallowed fields

4. **Multiple Invocations Scenario:**
   - **Given** a `WebDataBinder` instance where `initOwnerBinder` has been called previously
   - **When** `initOwnerBinder` is called again
   - **Then** ensure that the "id" field remains disallowed and no additional side effects take place from multiple invocations

5. **Null WebDataBinder Scenario:**
   - **Given** a `null` `WebDataBinder` instance
   - **When** `initOwnerBinder` is called
   - **Then** ensure that the method handles the `null` instance gracefully (if applicable, as it may throw a NullPointerException depending on how it's used)

6. **Reflective Test Scenario:**
   - **Given** a `WebDataBinder` instance with various fields
   - **When** `initOwnerBinder` is called
   - **Then** use reflection to inspect the internal state of the `WebDataBinder` to ensure that the "id" field is indeed disallowed

7. **Binding Test Scenario:**
   - **Given** a `WebDataBinder` instance and a mock object with an "id" field and other fields
   - **When** `initOwnerBinder` is called and the mock object is bound to the `WebDataBinder`
   - **Then** check that changes to the "id" field are not reflected in the mock object after binding, but changes to other fields are reflected

8. **Integration Scenario with Controller:**
   - **Given** a controller that uses `initOwnerBinder`
   - **When** a form submission is simulated with an "id" field and other fields
   - **Then** ensure that after submission, the "id" field has not changed, while other fields have been updated as expected

These scenarios cover various aspects of the `initOwnerBinder` method's functionality, including its main purpose of disallowing certain fields, how it interacts with multiple invocations, and how it behaves in integration with a controller.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.lang.reflect.Field;
import java.util.Set;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.MutablePropertyValues;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.validation.BindException;
import org.springframework.web.bind.WebDataBinder;

class PetController_initOwnerBinder_c48260f88f_Test {

    private WebDataBinder dataBinder;
    private MockHttpServletRequest request;

    @BeforeEach
    void setup() {
        request = new MockHttpServletRequest();
        dataBinder = new WebDataBinder(null, "owner");
    }

    @Test
    void disallowIdFieldModificationScenario() {
        new PetController(null).initOwnerBinder(dataBinder);
        dataBinder.bind(new MutablePropertyValues(request.getParameterMap()));
        assertTrue(dataBinder.isDisallowed("id"));
    }

    @Test
    void allowOtherFieldsScenario() {
        new PetController(null).initOwnerBinder(dataBinder);
        dataBinder.bind(new MutablePropertyValues(request.getParameterMap()));
        assertTrue(!dataBinder.isDisallowed("name"));
        assertTrue(!dataBinder.isDisallowed("email"));
        assertTrue(!dataBinder.isDisallowed("address"));
    }

    @Test
    void noSideEffectsScenario() {
        dataBinder.setDisallowedFields("customField");
        new PetController(null).initOwnerBinder(dataBinder);
        assertTrue(dataBinder.isDisallowed("customField"));
        assertTrue(dataBinder.isDisallowed("id"));
    }

    @Test
    void multipleInvocationsScenario() {
        new PetController(null).initOwnerBinder(dataBinder);
        new PetController(null).initOwnerBinder(dataBinder);
        assertTrue(dataBinder.isDisallowed("id"));
    }

    @Test
    void nullWebDataBinderScenario() {
        assertThrows(NullPointerException.class, () -> {
            new PetController(null).initOwnerBinder(null);
        });
    }

    @Test
    void reflectiveTestScenario() throws Exception {
        new PetController(null).initOwnerBinder(dataBinder);
        Field disallowedFieldsField = WebDataBinder.class.getDeclaredField("disallowedFields");
        disallowedFieldsField.setAccessible(true);
        Set<?> disallowedFields = (Set<?>) disallowedFieldsField.get(dataBinder);
        assertTrue(disallowedFields.contains("id"));
    }

    @Test
    void bindingTestScenario() {
        Owner mockOwner = new Owner();
        mockOwner.setAddress("123 Street");
        dataBinder.setTarget(mockOwner);
        new PetController(null).initOwnerBinder(dataBinder);
        MutablePropertyValues pvs = new MutablePropertyValues();
        pvs.add("id", "1");
        pvs.add("address", "456 Street");
        dataBinder.bind(pvs);
        assertTrue("123 Street".equals(mockOwner.getAddress()));
    }

    @Test
    void integrationScenarioWithController() {
        OwnerController ownerController = new OwnerController(null, null);
        Owner mockOwner = new Owner();
        mockOwner.setAddress("123 Street");
        dataBinder.setTarget(mockOwner);
        ownerController.initOwnerBinder(dataBinder);
        MutablePropertyValues pvs = new MutablePropertyValues();
        pvs.add("id", "2");
        pvs.add("address", "456 Street");
        BindException errors = new BindException(mockOwner, "owner");
        dataBinder.bind(pvs);
        dataBinder.getBindingResult().recordSuppressedField("id");
        assertTrue(errors.getSuppressedFields().contains("id"));
        assertTrue("123 Street".equals(mockOwner.getAddress()));
    }
}
