/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `initOwnerBinder` method, consider the following test scenarios:

1. **Disallowed Fields Test**: Ensure that the `id` field is indeed disallowed. This means that if the binder is used to bind request parameters to an object, the `id` field should not be bound (i.e., should be null or retain its default value).

2. **Allowed Fields Test**: Verify that other fields except `id` are allowed to be bound. This can be done by attempting to bind a field other than `id` and checking if it gets populated correctly.

3. **Multiple Fields Disallowed Test**: If there are multiple fields that should be disallowed (not in the given code, but as a potential extension), ensure that all such fields are not bound by the data binder.

4. **Binding with Disallowed Field Present**: Attempt to bind an object that includes the `id` field in the request and verify that the `id` field is not populated.

5. **Binding with Only Allowed Fields**: Bind an object that does not include the `id` field in the request and verify that all fields are populated correctly.

6. **No Fields Provided**: Try binding with no fields provided and confirm that no fields are populated and no errors occur.

7. **Null Data Binder**: Pass a null `WebDataBinder` instance to the `initOwnerBinder` method and ensure it handles the null case appropriately (typically, it should throw an IllegalArgumentException or similar).

8. **Custom Object Binding**: If you're using the binder for a specific object (e.g., `Owner`), attempt to bind an instance of that object with and without the `id` field and verify correct behavior.

9. **Id Field with Different Access Modifiers**: If the `id` field can have different access modifiers (private, protected, public), ensure that the `initOwnerBinder` method disallows it in all cases.

10. **Case Sensitivity Test**: Check if the disallowing of the `id` field is case-sensitive. Attempt to bind using "ID", "Id", and "iD" to confirm consistent behavior.

11. **BindingResult Test**: Test with a `BindingResult` object to ensure that disallowed fields do not generate binding errors.

12. **Subsequent Binding Operations**: After calling `initOwnerBinder`, perform another binding operation on the same `WebDataBinder` instance with a different set of rules and ensure the initial disallowing of the `id` field persists.

13. **Concurrency Test**: If the application is multi-threaded, test concurrent access to `initOwnerBinder` to ensure thread-safety.

14. **Binder Configuration Persistence**: Verify that once the binder is configured by `initOwnerBinder`, the configuration persists across multiple uses of the same binder instance.

15. **Integration Test**: In the context of an application, perform an end-to-end test where a form submission or API call triggers the binding process, and verify that the `id` field is not bound as part of the model object.

Remember that these scenarios are not meant to be translated directly into code but to guide the creation of actual test cases that will validate the functionality of the `initOwnerBinder` method.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;

public class PetController_initOwnerBinder_c48260f88f_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private PetController petController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testDisallowedFields() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);

        Owner owner = new Owner();
        owner.setAddress("123 Street"); // Allowed field
        owner.setCity("Anytown"); // Allowed field
        // TODO: Change the following value to test with a real ID, if applicable
        owner.setId(1); // Disallowed field

        dataBinder.bind(new MutablePropertyValues(Map.of(
            "address", "123 Street",
            "city", "Anytown",
            "id", "1"
        )));

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertNull(owner.getId());
        assertTrue(bindingResult.hasFieldErrors("id"));
    }

    @Test
    public void testAllowedFields() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);

        Owner owner = new Owner();
        dataBinder.bind(new MutablePropertyValues(Map.of(
            "address", "123 Street",
            "city", "Anytown"
        )));

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertEquals("123 Street", owner.getAddress());
        assertEquals("Anytown", owner.getCity());
        assertFalse(bindingResult.hasFieldErrors("address"));
        assertFalse(bindingResult.hasFieldErrors("city"));
    }

    @Test
    public void testNoFieldsProvided() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);

        Owner owner = new Owner();
        dataBinder.bind(new MutablePropertyValues());

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertNull(owner.getAddress());
        assertNull(owner.getCity());
        assertNull(owner.getId());
        assertFalse(bindingResult.hasErrors());
    }

    @Test
    public void testNullDataBinder() {
        assertThrows(IllegalArgumentException.class, () -> petController.initOwnerBinder(null));
    }

    @Test
    public void testBindingWithDisallowedFieldPresent() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);

        Owner owner = new Owner();
        dataBinder.bind(new MutablePropertyValues(Map.of("id", "1")));

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertNull(owner.getId());
        assertTrue(bindingResult.hasFieldErrors("id"));
    }

    @Test
    public void testBindingWithOnlyAllowedFields() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);

        Owner owner = new Owner();
        dataBinder.bind(new MutablePropertyValues(Map.of(
            "address", "123 Street",
            "city", "Anytown"
        )));

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertEquals("123 Street", owner.getAddress());
        assertEquals("Anytown", owner.getCity());
        assertFalse(bindingResult.hasFieldErrors("address"));
        assertFalse(bindingResult.hasFieldErrors("city"));
    }

    @Test
    public void testCustomObjectBinding() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);

        Owner owner = new Owner();
        // TODO: Change the following values to test with a real ID and custom fields, if applicable
        owner.setId(1); // Disallowed field
        owner.setAddress("123 Street"); // Custom field

        dataBinder.bind(new MutablePropertyValues(Map.of(
            "id", "1",
            "address", "123 Street"
        )));

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertNull(owner.getId());
        assertEquals("123 Street", owner.getAddress());
        assertTrue(bindingResult.hasFieldErrors("id"));
        assertFalse(bindingResult.hasFieldErrors("address"));
    }

    @Test
    public void testBinderConfigurationPersistence() {
        WebDataBinder dataBinder = new WebDataBinder(new Owner());
        petController.initOwnerBinder(dataBinder);
        dataBinder.setAllowedFields("*");

        Owner owner = new Owner();
        // TODO: Change the following values to test with a real ID, if applicable
        owner.setId(1); // Disallowed field

        dataBinder.bind(new MutablePropertyValues(Map.of("id", "1")));

        BindingResult bindingResult = new BeanPropertyBindingResult(owner, "owner");
        dataBinder.getBindingResult().getAllErrors().forEach(bindingResult::addError);

        assertNull(owner.getId());
        assertTrue(bindingResult.hasFieldErrors("id"));
    }

    @Test
    public void testIntegrationTest() {
        // This test would require a running application context and is typically an end-to-end test.
        // It is included here for completeness and should be implemented in an integration test class.
        assertDoesNotThrow(() -> {
            // Simulate form submission or API call with a bound object
        });
    }
}
