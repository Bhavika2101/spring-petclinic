/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenarios:**

**1. Valid Owner ID:**
   - Test with a valid owner ID that exists in the database.
   - Expected Outcome: The owner object with the specified ID should be retrieved and added to the model, and the owner update form should be displayed.

**2. Invalid Owner ID:**
   - Test with an invalid owner ID that does not exist in the database.
   - Expected Outcome: An error should be displayed indicating that the owner with the specified ID could not be found.

**3. Null Owner ID:**
   - Test with a null owner ID.
   - Expected Outcome: An error should be displayed indicating that the owner ID cannot be null.

**4. Empty Owner ID:**
   - Test with an empty owner ID ("").
   - Expected Outcome: An error should be displayed indicating that the owner ID cannot be empty.

**5. Negative Owner ID:**
   - Test with a negative owner ID.
   - Expected Outcome: An error should be displayed indicating that the owner ID cannot be negative.

**6. Non-Numeric Owner ID:**
   - Test with a non-numeric owner ID (e.g., "abc").
   - Expected Outcome: An error should be displayed indicating that the owner ID must be a number.

**7. Owner ID with Leading or Trailing Spaces:**
   - Test with an owner ID that has leading or trailing spaces (e.g., "  123  ").
   - Expected Outcome: The leading and trailing spaces should be trimmed, and the owner object with the specified ID should be retrieved.

**8. Owner ID with Special Characters:**
   - Test with an owner ID that contains special characters (e.g., "!@#$%^&*()").
   - Expected Outcome: An error should be displayed indicating that the owner ID can only contain numbers.
*/
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import org.springframework.samples.petclinic.owner.Owner;
import org.springframework.samples.petclinic.owner.OwnerController;
import org.springframework.samples.petclinic.owner.OwnerRepository;

class OwnerController_initUpdateOwnerForm_5166028c6b_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    private MockMvc mockMvc;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(ownerController).build();
    }

    @Test
    void testValidOwnerId() throws Exception {
        // Given
        int ownerId = 1;
        Owner owner = new Owner();
        owner.setId(ownerId);
        when(owners.findById(ownerId)).thenReturn(owner);

        // When
        mockMvc.perform(get("/owners/{ownerId}/edit", ownerId))

                // Then
                .andExpect(status().isOk())
                .andExpect(view().name(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM))
                .andExpect(model().attributeExists("owner"));
    }

    @ParameterizedTest
    @ValueSource(ints = { -1, 0, Integer.MIN_VALUE })
    void testInvalidOwnerId(int ownerId) throws Exception {
        // Given
        when(owners.findById(ownerId)).thenReturn(null);

        // When
        mockMvc.perform(get("/owners/{ownerId}/edit", ownerId))

                // Then
                .andExpect(status().isNotFound());
    }

    @Test
    void testNullOwnerId() throws Exception {
        // Given
        Integer ownerId = null;

        // When
        mockMvc.perform(get("/owners/{ownerId}/edit", ownerId))

                // Then
                .andExpect(status().isBadRequest());
    }

    @Test
    void testEmptyOwnerId() throws Exception {
        // Given
        String ownerId = "";

        // When
        mockMvc.perform(get("/owners/{ownerId}/edit", ownerId))

                // Then
                .andExpect(status().isBadRequest());
    }

    @ParameterizedTest
    @ValueSource(strings = { "abc", "!@#$%^&*()", "123abc" })
    void testNonNumericOwnerId(String ownerId) throws Exception {
        // Given
        when(owners.findById(any(Integer.class))).thenReturn(null);

        // When
        mockMvc.perform(get("/owners/{ownerId}/edit", ownerId))

                // Then
                .andExpect(status().isBadRequest());
    }

    @Test
    void testOwnerIdWithLeadingOrTrailingSpaces() throws Exception {
        // Given
        String ownerId = "  123  ";
        Owner owner = new Owner();
        owner.setId(Integer.parseInt(ownerId.trim()));
        when(owners.findById(Integer.parseInt(ownerId.trim()))).thenReturn(owner);

        // When
        mockMvc.perform(get("/owners/{ownerId}/edit", ownerId))

                // Then
                .andExpect(status().isOk())
                .andExpect(view().name(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM))
                .andExpect(model().attributeExists("owner"));
    }
}
