/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when ownerId is valid and the owner is present in the database.
- Given a valid ownerId that corresponds to an owner in the database.
- When the initUpdateOwnerForm function is invoked with the valid ownerId.
- Then the correct owner should be fetched from the database and added to the model.

2. Scenario: Test when ownerId is valid but the owner is not present in the database.
- Given a valid ownerId that does not correspond to any owner in the database.
- When the initUpdateOwnerForm function is invoked with the valid ownerId.
- Then the function should handle the situation appropriately, possibly by throwing an exception or returning a specific value.

3. Scenario: Test when ownerId is not valid.
- Given an invalid ownerId (for example, a negative number or zero).
- When the initUpdateOwnerForm function is invoked with the invalid ownerId.
- Then the function should handle the situation appropriately, possibly by throwing an exception or returning a specific value.

4. Scenario: Test when ownerId is null.
- Given a null ownerId.
- When the initUpdateOwnerForm function is invoked with the null ownerId.
- Then the function should handle the situation appropriately, possibly by throwing an exception or returning a specific value.

5. Scenario: Test the return value of the function.
- Given a valid ownerId.
- When the initUpdateOwnerForm function is invoked with the valid ownerId.
- Then the function should return the correct view name (VIEWS_OWNER_CREATE_OR_UPDATE_FORM).

6. Scenario: Test the model attribute.
- Given a valid ownerId.
- When the initUpdateOwnerForm function is invoked with the valid ownerId.
- Then the model should contain an attribute that corresponds to the fetched owner.

7. Scenario: Test the function with concurrent requests.
- Given a valid ownerId and multiple concurrent requests.
- When the initUpdateOwnerForm function is invoked concurrently.
- Then the function should handle all requests correctly and return the correct results.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class OwnerController_initUpdateOwnerForm_5166028c6b_Test {

    OwnerController ownerController;
    OwnerRepository ownerRepository;
    Model model;

    @BeforeEach
    public void setup() {
        ownerRepository = mock(OwnerRepository.class);
        ownerController = new OwnerController(ownerRepository);
        model = mock(Model.class);
    }

    @Test
    public void testInitUpdateOwnerForm_validOwnerId() {
        Owner owner = new Owner();
        when(ownerRepository.findById(anyInt())).thenReturn(owner);

        String view = ownerController.initUpdateOwnerForm(1, model);

        verify(ownerRepository, times(1)).findById(1);
        verify(model, times(1))..addAttribute(owner);
        assertEquals("owners/createOrUpdateOwnerForm", view);
    }

    @Test
    public void testInitUpdateOwnerForm_invalidOwnerId() {
        when(ownerRepository.findById(anyInt())).thenReturn(null);

        assertThrows(NullPointerException.class, () -> {
            ownerController.initUpdateOwnerForm(-1, model);
        });

        verify(ownerRepository, times(1)).findById(-1);
        verifyNoInteractions(model);
    }

    @Test
    public void testInitUpdateOwnerForm_nullOwnerId() {
        when(ownerRepository.findById(anyInt())).thenReturn(null);

        assertThrows(NullPointerException.class, () -> {
            ownerController.initUpdateOwnerForm(null, model);
        });

        verify(ownerRepository, times(1)).findById(null);
        verifyNoInteractions(model);
    }
}
