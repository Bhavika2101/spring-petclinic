/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` method, we can create several test scenarios. These scenarios should cover different aspects of the expected behavior:

1. **Standard Pagination Scenario:**
   - Given a `Page<Owner>` object with a standard number of elements (not on the boundary of pagination), when the `addPaginationModel` method is called, then the model should contain the appropriate attributes for the current page, total pages, total items, and list of owners. 

2. **First Page Scenario:**
   - Given a `Page<Owner>` object representing the first page of results, when the `addPaginationModel` method is called, then the model should reflect that it is the first page (e.g., `currentPage` should be 0 or 1 depending on the page indexing).

3. **Last Page Scenario:**
   - Given a `Page<Owner>` object representing the last page of results, when the `addPaginationModel` method is called, then the model should reflect that it is the last page and potentially have fewer `Owner` objects in the `listOwners` than other pages.

4. **Empty Page Scenario:**
   - Given a `Page<Owner>` object with no elements (empty page), when the `addPaginationModel` method is called, then the model should still correctly reflect the pagination state, such as `totalPages` being 0 or 1, depending on how the underlying pagination system handles empty sets.

5. **Specific Page Scenario:**
   - Given a `Page<Owner>` object for a specific page number (neither the first nor the last), when the `addPaginationModel` method is called, then the model should have the correct `currentPage` set, along with the other attributes.

6. **Invalid Page Scenario:**
   - Given an invalid page number (negative or beyond the total number of pages), when the `addPaginationModel` method is called, then it should be verified how the system behaves. This scenario might be out of scope if the method assumes that the page number has already been validated.

7. **Boundary Conditions:**
   - Test with the minimum and maximum number of `Owner` objects that can be on a page (e.g., 1 item and the maximum limit set by the system).
   
8. **Model Integrity:**
   - Ensure that the method does not overwrite any existing attributes in the model that are unrelated to pagination.

9. **Null Pageable Scenario:**
   - Given a `null` `Page<Owner>` object, when the `addPaginationModel` method is called, then it should be verified how the system behaves or if it throws an appropriate exception.

10. **Performance Scenario:**
    - Given a `Page<Owner>` object with a large number of elements, when the `addPaginationModel` method is called, then the system should still perform within acceptable limits, and the model should be populated quickly.

11. **Consistency Across Calls:**
    - Given the same `Page<Owner>` input on multiple calls, when the `addPaginationModel` method is called, then the model should consistently have the same attributes set for each call.

12. **Concurrent Access Scenario:**
    - Given concurrent calls to `addPaginationModel` with different `Page<Owner>` objects, ensure that the model is correctly populated without any race conditions or concurrency issues.

Remember that these scenarios are not actual tests but descriptions of what you would validate if you were to write test cases. They cover a broad range of potential issues and expected behaviors that are important for pagination functionality.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

    @Mock
    private Page<Owner> mockPage;

    private OwnerController ownerController;
    private Model model;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        ownerController = new OwnerController(new OwnerRepository() {
            // Mocked methods as per the context provided
        });
        model = new ExtendedModelMap();
    }

    @Test
    void testAddPaginationModel_StandardScenario() {
        // Given
        int currentPage = 2;
        List<Owner> ownersList = Arrays.asList(new Owner(), new Owner());
        when(mockPage.getContent()).thenReturn(ownersList);
        when(mockPage.getTotalPages()).thenReturn(5);
        when(mockPage.getTotalElements()).thenReturn(10L);
        
        // When
        String viewName = ownerController.addPaginationModel(currentPage, model, mockPage);

        // Then
        assertEquals("owners/ownersList", viewName);
        assertEquals(currentPage, model.asMap().get("currentPage"));
        assertEquals(5, model.asMap().get("totalPages"));
        assertEquals(10L, model.asMap().get("totalItems"));
        assertEquals(ownersList, model.asMap().get("listOwners"));
    }

    @Test
    void testAddPaginationModel_EmptyPageScenario() {
        // Given
        int currentPage = 1;
        when(mockPage.getContent()).thenReturn(Collections.emptyList());
        when(mockPage.getTotalPages()).thenReturn(0);
        when(mockPage.getTotalElements()).thenReturn(0L);
        
        // When
        String viewName = ownerController.addPaginationModel(currentPage, model, mockPage);

        // Then
        assertEquals("owners/ownersList", viewName);
        assertEquals(currentPage, model.asMap().get("currentPage"));
        assertEquals(0, model.asMap().get("totalPages"));
        assertEquals(0L, model.asMap().get("totalItems"));
        assertEquals(Collections.emptyList(), model.asMap().get("listOwners"));
    }

    // TODO: Implement additional test cases based on the given scenarios
}
