/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` method, we can create several test scenarios. These scenarios should cover different aspects of the expected behavior:

1. **Standard Pagination Scenario:**
   - Given a `Page<Owner>` object with a set of `Owner` instances, a valid page index, and a non-empty `Model` object.
   - When the method is invoked.
   - Then the `Model` should contain attributes `currentPage`, `totalPages`, `totalItems`, and `listOwners` reflecting the correct pagination information and list of owners.

2. **First Page Scenario:**
   - Given a `Page<Owner>` object representing the first page of results.
   - When the method is invoked with page index 0.
   - Then the `currentPage` should be 0, and other pagination attributes should be correctly set in the `Model`.

3. **Last Page Scenario:**
   - Given a `Page<Owner>` object representing the last page of results.
   - When the method is invoked with the page index equal to `totalPages - 1`.
   - Then the `currentPage` should be equal to `totalPages - 1`, and other pagination attributes should be correctly set in the `Model`.

4. **Empty Page Scenario:**
   - Given a `Page<Owner>` object with no `Owner` instances (empty content).
   - When the method is invoked.
   - Then the `listOwners` attribute should be an empty list, and other pagination attributes should reflect the empty state.

5. **Invalid Page Number Scenario:**
   - Given a `Page<Owner>` object with a valid set of `Owner` instances.
   - When the method is invoked with a page number that is out of range (negative or greater than `totalPages`).
   - Then the behavior should be determined by the specification (either defaulting to a valid page or throwing an exception), and the test should validate this behavior.

6. **Null Pageable Scenario:**
   - Given a `null` `Page<Owner>` object.
   - When the method is invoked.
   - Then the method should handle the null input gracefully, either by throwing a well-defined exception or by setting default values in the `Model`.

7. **Null Model Scenario:**
   - Given a valid `Page<Owner>` object and a `null` `Model`.
   - When the method is invoked.
   - Then the method should throw an exception due to the inability to add attributes to a null model.

8. **Large Dataset Scenario:**
   - Given a `Page<Owner>` object with a large number of `Owner` instances that could potentially cause memory issues.
   - When the method is invoked.
   - Then the method should handle the large dataset without running into memory constraints and should set the correct pagination attributes.

9. **Page Size Consistency Scenario:**
   - Given a `Page<Owner>` object with a specific page size.
   - When the method is invoked.
   - Then the size of the `listOwners` should not exceed the page size, and the pagination attributes should be consistent with this size.

10. **Model Attributes Overwrite Scenario:**
    - Given a `Model` that already has existing attributes with the same names as those added by the `addPaginationModel` method.
    - When the method is invoked.
    - Then the existing attributes should be overwritten with the new values provided by the paginated results.

These scenarios will help ensure that the `addPaginationModel` method behaves correctly in various situations, including both typical and edge cases. It's important to note that the implementation of the tests should mock or simulate the `Page<Owner>` object and the `Model` to avoid dependencies on external systems or the database.
*/
package org.springframework.samples.petclinic.owner;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ui.Model;
import org.springframework.data.domain.Page;
import java.util.Arrays;
import java.util.List;

public class OwnerController_addPaginationModel_996bca2e5f_Test {
    private OwnerController ownerController;
    private OwnerRepository ownerRepository;
    private Model model;
    private Page<Owner> paginatedOwners;

    @BeforeEach
    public void setup() {
        ownerRepository = mock(OwnerRepository.class);
        ownerController = new OwnerController(ownerRepository);
        model = mock(Model.class);
        paginatedOwners = mock(Page.class);
    }

    @Test
    public void testAddPaginationModel_StandardScenario() {
        int page = 2;
        int totalPages = 5;
        long totalElements = 20;
        List<Owner> ownersList = Arrays.asList(new Owner(), new Owner());
        when(paginatedOwners.getContent()).thenReturn(ownersList);
        when(paginatedOwners.getTotalPages()).thenReturn(totalPages);
        when(paginatedOwners.getTotalElements()).thenReturn(totalElements);

        String viewName = ownerController.addPaginationModel(page, model, paginatedOwners);

        assertEquals("owners/ownersList", viewName);
        assertEquals(ownersList.size(), 2);
    }

    @Test
    public void testAddPaginationModel_EmptyPageScenario() {
        int page = 1;
        int totalPages = 0;
        long totalElements = 0;
        List<Owner> emptyOwnersList = Arrays.asList();
        when(paginatedOwners.getContent()).thenReturn(emptyOwnersList);
        when(paginatedOwners.getTotalPages()).thenReturn(totalPages);
        when(paginatedOwners.getTotalElements()).thenReturn(totalElements);

        String viewName = ownerController.addPaginationModel(page, model, paginatedOwners);

        assertEquals("owners/ownersList", viewName);
        assertTrue(emptyOwnersList.isEmpty());
    }
}
