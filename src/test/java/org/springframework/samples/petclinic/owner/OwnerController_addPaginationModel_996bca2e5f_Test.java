/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` method, we can create several test scenarios. These scenarios should cover different aspects of the expected behavior:

1. **Standard Pagination Scenario:**
   - Given a valid `Page<Owner>` object with multiple pages of data.
   - When `addPaginationModel` is called with a current page number.
   - Then the model should contain the appropriate attributes: `currentPage`, `totalPages`, `totalItems`, and `listOwners` with correct values.

2. **First Page Scenario:**
   - Given a `Page<Owner>` object representing the first page with more pages to follow.
   - When `addPaginationModel` is called with page number 1.
   - Then the `currentPage` attribute should be 1, and `listOwners` should contain the first page's content.

3. **Last Page Scenario:**
   - Given a `Page<Owner>` object representing the last page of the dataset.
   - When `addPaginationModel` is called with the last page number.
   - Then the `currentPage` attribute should match the last page number, and `listOwners` should contain the last page's content.

4. **Single Page Scenario:**
   - Given a `Page<Owner>` object with only one page of data.
   - When `addPaginationModel` is called with page number 1.
   - Then the `totalPages` attribute should be 1, and `listOwners` should contain all available data.

5. **Empty List Scenario:**
   - Given a `Page<Owner>` object with no data (empty content).
   - When `addPaginationModel` is called with any page number.
   - Then the `listOwners` should be an empty list, and `totalItems` should be 0.

6. **Invalid Page Number Scenario:**
   - Given a `Page<Owner>` object with multiple pages of data.
   - When `addPaginationModel` is called with an invalid page number (e.g., a negative number or a number greater than `totalPages`).
   - Then the behavior should be defined by the business logic (e.g., throw an exception, return the first page, or the last page).

7. **Boundaries Scenario:**
   - Given a `Page<Owner>` object with multiple pages of data.
   - When `addPaginationModel` is called with the boundary page numbers (e.g., 0 and `totalPages` - 1).
   - Then the model should correctly reflect the first and last pages of the dataset.

8. **Model Integrity Scenario:**
   - Given a `Model` that already contains some attributes.
   - When `addPaginationModel` is called.
   - Then the existing model attributes should remain unchanged except for the ones added or modified by the method.

9. **Page Size Consistency Scenario:**
   - Given a `Page<Owner>` object with a specific page size.
   - When `addPaginationModel` is called.
   - Then the `listOwners` should contain a number of elements equal to or less than the page size, depending on the total number of items and the current page.

10. **Null Parameters Scenario:**
    - Given a null `Page<Owner>` object or a null `Model`.
    - When `addPaginationModel` is called.
    - Then the method should handle the null parameters gracefully according to the business logic (e.g., throw an exception, return a default view, or an empty model).

These scenarios cover a range of situations that the `addPaginationModel` method might encounter and help ensure that the method behaves correctly under various conditions.
*/
package org.springframework.samples.petclinic.owner;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.ui.Model;
import org.springframework.data.domain.Page;

import java.util.ArrayList;
import java.util.List;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

	@Mock
	private Model mockModel;

	@Mock
	private Page<Owner> mockPage;

	private OwnerController ownerController;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(this);
		ownerController = new OwnerController(mock(OwnerRepository.class));
	}

	@Test
    public void testStandardPaginationScenario() {
        when(mockPage.getTotalPages()).thenReturn(3);
        when(mockPage.getTotalElements()).thenReturn(15L);
        when(mockPage.getContent()).thenReturn(new ArrayList<>());

        String viewName = ownerController.addPaginationModel(2, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
    }

	@Test
    public void testFirstPageScenario() {
        when(mockPage.getTotalPages()).thenReturn(3);
        when(mockPage.getTotalElements()).thenReturn(15L);
        when(mockPage.getContent()).thenReturn(new ArrayList<>());

        String viewName = ownerController.addPaginationModel(1, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
    }

	@Test
    public void testLastPageScenario() {
        when(mockPage.getTotalPages()).thenReturn(3);
        when(mockPage.getTotalElements()).thenReturn(15L);
        when(mockPage.getContent()).thenReturn(new ArrayList<>());

        String viewName = ownerController.addPaginationModel(3, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
    }

	@Test
    public void testSinglePageScenario() {
        when(mockPage.getTotalPages()).thenReturn(1);
        when(mockPage.getTotalElements()).thenReturn(5L);
        when(mockPage.getContent()).thenReturn(new ArrayList<>());

        String viewName = ownerController.addPaginationModel(1, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
    }

	@Test
    public void testEmptyListScenario() {
        when(mockPage.getTotalPages()).thenReturn(0);
        when(mockPage.getTotalElements()).thenReturn(0L);
        when(mockPage.getContent()).thenReturn(new ArrayList<>());

        String viewName = ownerController.addPaginationModel(1, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
    }

	@Test
    public void testModelIntegrityScenario() {
        when(mockPage.getTotalPages()).thenReturn(3);
        when(mockPage.getTotalElements()).thenReturn(15L);
        List<Owner> ownerList = new ArrayList<>();
        ownerList.add(new Owner());
        when(mockPage.getContent()).thenReturn(ownerList);

        String viewName = ownerController.addPaginationModel(2, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
        // Additional checks for model integrity can be added here
    }

	@Test
    public void testPageSizeConsistencyScenario() {
        when(mockPage.getTotalPages()).thenReturn(3);
        when(mockPage.getTotalElements()).thenReturn(15L);
        List<Owner> ownerList = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            ownerList.add(new Owner());
        }
        when(mockPage.getContent()).thenReturn(ownerList);

        String viewName = ownerController.addPaginationModel(1, mockModel, mockPage);

        assertEquals("owners/ownersList", viewName);
        // Additional checks for page size consistency can be added here
    }

	@Test
	public void testNullParametersScenario() {
		// Assuming the method should handle null parameters by returning a default view
		String viewName = ownerController.addPaginationModel(1, null, null);

		assertEquals("owners/ownersList", viewName);
	}

}
