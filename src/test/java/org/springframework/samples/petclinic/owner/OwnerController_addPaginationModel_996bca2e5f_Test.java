/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the `addPaginationModel` function:

1. Verify that the `addPaginationModel` function returns the correct view name "owners/ownersList".
   
2. Verify that the `addPaginationModel` function correctly adds the current page number to the model when called with a valid `Page<Owner>` object and a valid page number.
   
3. Verify that the `addPaginationModel` function correctly adds the total number of pages to the model when called with a valid `Page<Owner>` object.
   
4. Verify that the `addPaginationModel` function correctly adds the total number of items to the model when called with a valid `Page<Owner>` object.
   
5. Verify that the `addPaginationModel` function correctly adds the list of owners to the model when called with a valid `Page<Owner>` object.
   
6. Verify that the `addPaginationModel` function behaves as expected when called with a `Page<Owner>` object that has no content (i.e., the list of owners is empty).
   
7. Verify that the `addPaginationModel` function behaves as expected when called with a `Page<Owner>` object that contains a single page of content.
   
8. Verify that the `addPaginationModel` function behaves as expected when called with a `Page<Owner>` object that contains multiple pages of content.
   
9. Verify that the `addPaginationModel` function behaves as expected when called with a null `Page<Owner>` object.
   
10. Verify that the `addPaginationModel` function behaves as expected when called with a null `Model` object.
   
11. Verify that the `addPaginationModel` function behaves as expected when called with a page number that is less than 1.
   
12. Verify that the `addPaginationModel` function behaves as expected when called with a page number that is greater than the total number of pages in the `Page<Owner>` object.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.ui.Model;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

    @Mock
    Model model;

    @Mock
    Page<Owner> paginated;

    private OwnerController ownerController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        ownerController = new OwnerController(mock(OwnerRepository.class));
    }

    @Test
    public void testAddPaginationModel() {
        Owner owner1 = new Owner();
        Owner owner2 = new Owner();
        List<Owner> ownerList = Arrays.asList(owner1, owner2);

        when(paginated.getContent()).thenReturn(ownerList);
        when(paginated.getTotalPages()).thenReturn(2);
        when(paginated.getTotalElements()).thenReturn(2L);

        int page = 1;
        String viewName = ownerController.addPaginationModel(page, model, paginated);

        verify(model, times(1)).addAttribute("currentPage", page);
        verify(model, times(1)).addAttribute("totalPages", 2);
        verify(model, times(1)).addAttribute("totalItems", 2L);
        verify(model, times(1)).addAttribute("listOwners", ownerList);

        assertEquals("owners/ownersList", viewName);
    }

    @Test
    void testAddPaginationModelNoContent() {
        when(paginated.getContent()).thenReturn(null);

        int page = 1;
        String viewName = ownerController.addPaginationModel(page, model, paginated);

        verify(model, times(1)).addAttribute("currentPage", page);
        verify(model, times(1)).addAttribute("totalPages", 0);
        verify(model, times(1)).addAttribute("totalItems", 0L);
        verify(model, times(1)).addAttribute("listOwners", null);

        assertEquals("owners/ownersList", viewName);
    }

    @Test
    void testAddPaginationModelNullPage() {
        Owner owner1 = new Owner();
        List<Owner> ownerList = Arrays.asList(owner1);

        when(paginated.getContent()).thenReturn(ownerList);
        when(paginated.getTotalPages()).thenReturn(1);
        when(paginated.getTotalElements()).thenReturn(1L);

        String viewName = ownerController.addPaginationModel(0, model, paginated);

        verify(model, times(1)).addAttribute("currentPage", 0);
        verify(model, times(1)).addAttribute("totalPages", 1);
        verify(model, times(1)).addAttribute("totalItems", 1L);
        verify(model, times(1)).addAttribute("listOwners", ownerList);

        assertEquals("owners/ownersList", viewName);
    }
}
