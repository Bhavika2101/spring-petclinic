/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` function, you would create test scenarios that cover the different aspects of the expected behavior:

1. **Happy Path Scenario:**
   - Given a valid `Page<Owner>` object with a set of `Owner` instances, and a valid page number, when `addPaginationModel` is called, then the model should contain the appropriate attributes (`currentPage`, `totalPages`, `totalItems`, `listOwners`) with correct values corresponding to the given `Page<Owner>` object.

2. **Empty Page Scenario:**
   - Given an empty `Page<Owner>` object (no content) and a valid page number, when `addPaginationModel` is called, then the model should contain the correct attributes with zero or appropriate values for `totalPages` and `totalItems`, and an empty list for `listOwners`.

3. **Pagination Boundaries:**
   - Given a `Page<Owner>` object and a page number that is the first page, when `addPaginationModel` is called, then the model should reflect that it's the first page (e.g., `currentPage` is 0 or 1 depending on the implementation).
   - Given a `Page<Owner>` object and a page number that is the last page, when `addPaginationModel` is called, then the model should reflect that it's the last page (e.g., `currentPage` equals `totalPages`).

4. **Invalid Page Number:**
   - Given a `Page<Owner>` object and an invalid page number (e.g., negative number, or a number larger than the total number of pages), when `addPaginationModel` is called, then the behavior should be consistent with the application's handling of invalid page numbers (e.g., throw an exception, default to the first or last page, etc.).

5. **Model Attributes Integrity:**
   - Ensure that the `model` object remains unmodified except for the addition of the pagination attributes. There should be no unintended side effects on other existing attributes in the model.

6. **Null and Edge Cases:**
   - Given a `null` `Page<Owner>` object, when `addPaginationModel` is called, then the method should handle the scenario gracefully (e.g., throw an exception, return an error message, etc.).
   - Given a `null` `Model` object, when `addPaginationModel` is called, then the method should handle the scenario gracefully.

7. **Large Datasets:**
   - Given a `Page<Owner>` object representing a large dataset that might cause performance issues, when `addPaginationModel` is called, then the method should still perform efficiently without causing memory or timeout issues.

8. **Consistency with Pageable:**
   - Given a `Page<Owner>` object and a `Pageable` that was used to fetch this page, ensure that the `currentPage` corresponds accurately with the `Pageable`'s page number.

9. **Concurrent Modifications:**
   - Given a scenario where the underlying data might change between the time the `Page<Owner>` object is retrieved and when `addPaginationModel` is called, ensure that the pagination attributes in the model still reflect the correct state of the data.

10. **Internationalization and Localization:**
    - If the application supports multiple languages or formats, test that the `addPaginationModel` method respects the locale settings and displays text and numbers in the correct format.

Each scenario would involve setting up the necessary conditions, invoking the `addPaginationModel` method, and then asserting that the `Model` object has the expected attributes with the correct values.
*/
package org.springframework.samples.petclinic.owner;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.data.domain.Page;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

    private OwnerController ownerController;
    private Page<Owner> paginatedOwners;

    @BeforeEach
    void setup() {
        OwnerRepository ownerRepository = mock(OwnerRepository.class);
        ownerController = new OwnerController(ownerRepository);
        paginatedOwners = mock(Page.class);
    }

    @Test
    void testAddPaginationModel_HappyPath() {
        int page = 1;
        int totalPages = 3;
        long totalItems = 15;
        List<Owner> ownersList = new ArrayList<>();
        ownersList.add(new Owner());
        ownersList.add(new Owner());

        when(paginatedOwners.getContent()).thenReturn(ownersList);
        when(paginatedOwners.getTotalPages()).thenReturn(totalPages);
        when(paginatedOwners.getTotalElements()).thenReturn(totalItems);

        Model model = new ExtendedModelMap();
        String viewName = ownerController.addPaginationModel(page, model, paginatedOwners);

        assertEquals("owners/ownersList", viewName);
        assertEquals(page, model.getAttribute("currentPage"));
        assertEquals(totalPages, model.getAttribute("totalPages"));
        assertEquals(totalItems, model.getAttribute("totalItems"));
        assertEquals(ownersList, model.getAttribute("listOwners"));
    }

    @Test
    void testAddPaginationModel_EmptyPage() {
        int page = 1;
        int totalPages = 0;
        long totalItems = 0;
        List<Owner> ownersList = new ArrayList<>();

        when(paginatedOwners.getContent()).thenReturn(ownersList);
        when(paginatedOwners.getTotalPages()).thenReturn(totalPages);
        when(paginatedOwners.getTotalElements()).thenReturn(totalItems);

        Model model = new ExtendedModelMap();
        String viewName = ownerController.addPaginationModel(page, model, paginatedOwners);

        assertEquals("owners/ownersList", viewName);
        assertEquals(page, model.getAttribute("currentPage"));
        assertEquals(totalPages, model.getAttribute("totalPages"));
        assertEquals(totalItems, model.getAttribute("totalItems"));
        assertEquals(ownersList, model.getAttribute("listOwners"));
    }
}
