/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the `addPaginationModel` function:

1. Test when `paginated` is null. The function should handle this case properly, possibly by throwing an exception or returning a default value.

2. Test when `paginated` has no content (i.e., `paginated.getContent()` returns an empty list). The function should still work correctly in this case, and the "listOwners" attribute of the model should be an empty list.

3. Test when `paginated` has some content (i.e., `paginated.getContent()` returns a non-empty list). The "listOwners" attribute of the model should be a list containing the same elements as the content of `paginated`.

4. Test when `page` is less than 1. The function should handle this case properly, possibly by throwing an exception or returning a default value.

5. Test when `page` is greater than the total number of pages in `paginated`. The function should handle this case properly, possibly by throwing an exception or returning a default value.

6. Test when `page` is within the valid range (i.e., between 1 and the total number of pages in `paginated`). The "currentPage" attribute of the model should be equal to `page`.

7. Test the "totalPages" and "totalItems" attributes of the model. They should be equal to `paginated.getTotalPages()` and `paginated.getTotalElements()`, respectively.

8. Test the return value of the function. It should always be "owners/ownersList".

9. Test the function with various types and sizes of `paginated` and `page` to ensure it works correctly in all cases.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.ui.Model;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

    private OwnerController ownerController;

    @Mock
    private Model model;

    @Mock
    private Page<Owner> paginated;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        ownerController = new OwnerController(null);
    }

    @Test
    public void testAddPaginationModel_withValidPageAndPaginated() {
        int page = 1;
        List<Owner> listOwners = Arrays.asList(new Owner(), new Owner());
        when(paginated.getContent()).thenReturn(listOwners);
        when(paginated.getTotalPages()).thenReturn(5);
        when(paginated.getTotalElements()).thenReturn(10L);

        String view = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", view);
    }

    @Test
    public void testAddPaginationModel_withEmptyPaginated() {
        int page = 1;
        List<Owner> listOwners = Arrays.asList();
        when(paginated.getContent()).thenReturn(listOwners);
        when(paginated.getTotalPages()).thenReturn(0);
        when(paginated.getTotalElements()).thenReturn(0L);

        String view = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", view);
    }

    @Test
    public void testAddPaginationModel_withPageLessThanOne() {
        int page = 0;
        List<Owner> listOwners = Arrays.asList(new Owner(), new Owner());
        when(paginated.getContent()).thenReturn(listOwners);
        when(paginated.getTotalPages()).thenReturn(5);
        when(paginated.getTotalElements()).thenReturn(10L);

        String view = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", view);
    }

    @Test
    public void testAddPaginationModel_withPageGreaterThanTotalPages() {
        int page = 6;
        List<Owner> listOwners = Arrays.asList(new Owner(), new Owner());
        when(paginated.getContent()).thenReturn(listOwners);
        when(paginated.getTotalPages()).thenReturn(5);
        when(paginated.getTotalElements()).thenReturn(10L);

        String view = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", view);
    }

}
