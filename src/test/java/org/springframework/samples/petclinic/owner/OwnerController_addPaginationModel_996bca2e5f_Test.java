/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` function, you would create test scenarios that cover the different aspects of the expected behavior:

1. **Happy Path Scenarios:**
   - **Scenario 1: Standard Pagination Data**
     - Given a paginated list of owners with multiple pages.
     - When the `addPaginationModel` is called with a middle page index.
     - Then the model should contain the correct `currentPage`, `totalPages`, `totalItems`, and `listOwners` corresponding to that page index.
   
   - **Scenario 2: First Page Data**
     - Given a paginated list of owners with multiple pages.
     - When the `addPaginationModel` is called with page index 0 (first page).
     - Then the model should contain `currentPage` as 0 and the first set of `listOwners`.

   - **Scenario 3: Last Page Data**
     - Given a paginated list of owners with multiple pages.
     - When the `addPaginationModel` is called with the last page index.
     - Then the model should contain `currentPage` as the last page index and the last set of `listOwners`.

2. **Boundary Scenarios:**
   - **Scenario 4: Empty List of Owners**
     - Given an empty paginated list of owners.
     - When the `addPaginationModel` is called with any page index.
     - Then the model should contain `currentPage`, `totalPages`, and `totalItems` with 0 or appropriate values for an empty list, and `listOwners` should be empty.

   - **Scenario 5: Single Page of Owners**
     - Given a paginated list of owners with only one page.
     - When the `addPaginationModel` is called with page index 0.
     - Then the model should contain `currentPage` as 0, `totalPages` as 1, `totalItems` equal to the number of owners, and `listOwners` with all owners.

3. **Error Scenarios:**
   - **Scenario 6: Negative Page Index**
     - Given a paginated list of owners with multiple pages.
     - When the `addPaginationModel` is called with a negative page index.
     - Then the behavior should be defined, either by handling the error gracefully or by throwing an appropriate exception.

   - **Scenario 7: Page Index Out of Range**
     - Given a paginated list of owners with multiple pages.
     - When the `addPaginationModel` is called with a page index greater than the total number of pages.
     - Then the behavior should be defined, either by showing the last page, returning an empty page, or throwing an appropriate exception.

4. **Performance Scenario:**
   - **Scenario 8: Large Number of Owners**
     - Given a paginated list of owners with a very large number of pages and owners.
     - When the `addPaginationModel` is called with any valid page index.
     - Then the model should be populated without significant delay, indicating that the function performs well even with large datasets.

5. **Integration Scenario:**
   - **Scenario 9: Interaction with View**
     - Given a valid set of owners and a configured view that uses the model attributes.
     - When the `addPaginationModel` is called and the returned view name is used to render the view.
     - Then the view should correctly display pagination information and the list of owners based on the model attributes.

These scenarios cover a broad range of conditions that the `addPaginationModel` function might encounter. They ensure that the function is working as expected and can handle both typical and atypical cases.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.data.domain.Page;
import org.springframework.ui.Model;
import org.springframework.validation.support.BindingAwareModelMap;

class OwnerController_addPaginationModel_996bca2e5f_Test {

    private OwnerController ownerController;

    @Mock
    private OwnerRepository ownerRepository;

    @BeforeEach
    void setup() {
        ownerRepository = mock(OwnerRepository.class);
        ownerController = new OwnerController(ownerRepository);
    }

    @Test
    void testAddPaginationModel_HappyPathMiddlePage() {
        int page = 2;
        int totalPages = 5;
        long totalItems = 50;
        Page<Owner> paginated = mock(Page.class);
        List<Owner> listOwners = new ArrayList<>();
        listOwners.add(new Owner());

        Model model = new BindingAwareModelMap();

        when(paginated.getTotalPages()).thenReturn(totalPages);
        when(paginated.getTotalElements()).thenReturn(totalItems);
        when(paginated.getContent()).thenReturn(listOwners);

        String viewName = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", viewName);
        assertEquals(page, model.asMap().get("currentPage"));
        assertEquals(totalPages, model.asMap().get("totalPages"));
        assertEquals(totalItems, model.asMap().get("totalItems"));
        assertEquals(listOwners, model.asMap().get("listOwners"));
    }

    @Test
    void testAddPaginationModel_EmptyListOwners() {
        int page = 1;
        int totalPages = 0;
        long totalItems = 0;
        Page<Owner> paginated = mock(Page.class);
        List<Owner> listOwners = new ArrayList<>();

        Model model = new BindingAwareModelMap();

        when(paginated.getTotalPages()).thenReturn(totalPages);
        when(paginated.getTotalElements()).thenReturn(totalItems);
        when(paginated.getContent()).thenReturn(listOwners);

        String viewName = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", viewName);
        assertEquals(page, model.asMap().get("currentPage"));
        assertEquals(totalPages, model.asMap().get("totalPages"));
        assertEquals(totalItems, model.asMap().get("totalItems"));
        assertEquals(listOwners, model.asMap().get("listOwners"));
    }

    // TODO: Implement additional test cases for scenarios 2, 3, 4, 5, 6, 7, 8, and 9
}
