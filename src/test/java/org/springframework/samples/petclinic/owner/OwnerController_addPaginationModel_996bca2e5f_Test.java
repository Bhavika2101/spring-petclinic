/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenarios**

1. **Valid input:**
   - Page number is valid and within the range of the total pages.
   - Page number is 1.
   - Page number is the last page.
   - Page size is valid and within the supported range.
   - Page size is the default value.
   - Sort order is valid.
   - Sort order is the default value.

2. **Invalid input:**
   - Page number is negative.
   - Page number is greater than the total pages.
   - Page size is negative.
   - Page size is greater than the supported maximum.
   - Sort order is invalid.

3. **Empty result:**
   - There are no owners in the database.

4. **Exception handling:**
   - An exception is thrown when the page number or size is invalid.
*/
```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.ui.Model;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;

class OwnerController_addPaginationModel_996bca2e5f_Test {

    @ParameterizedTest
    @CsvSource({
            "1, 1, 1, 5, owners/ownersList",
            "5, 1, 5, 5, owners/ownersList",
            "10, 2, 10, 5, owners/ownersList",
            "1, 1, 1, 10, owners/ownersList",
            "1, 1, 1, 20, owners/ownersList",
            "1, 1, 1, -1, owners/ownersList",
            "1, 1, 1, 100, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1, 1, 1, 5, owners/ownersList",
            "1,