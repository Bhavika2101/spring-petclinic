/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` method, we can create several test scenarios. These scenarios should cover different aspects of the expected behavior:

1. **Standard Pagination Scenario:**
   - Given a `Page<Owner>` object with a standard set of paginated results (e.g., 10 owners per page), when `addPaginationModel` is called with a specific page number, then the model should contain the correct attributes: `currentPage`, `totalPages`, `totalItems`, and `listOwners` reflecting the expected values.

2. **First Page Scenario:**
   - Given a `Page<Owner>` object representing the first page of results, when `addPaginationModel` is called with page number 1, then the `currentPage` attribute should be 1 and `listOwners` should contain the first set of owners.

3. **Last Page Scenario:**
   - Given a `Page<Owner>` object representing the last page of results, when `addPaginationModel` is called with the last page number, then the `currentPage` attribute should equal `totalPages` and `listOwners` should contain the last set of owners.

4. **Empty Page Scenario:**
   - Given a `Page<Owner>` object with no results (empty page), when `addPaginationModel` is called, then the `listOwners` should be an empty list and `totalItems` should be 0.

5. **Single Page Scenario:**
   - Given a `Page<Owner>` object with only one page of results, when `addPaginationModel` is called, then `currentPage` and `totalPages` should both be 1, and `totalItems` should reflect the number of items on the single page.

6. **Middle Page Scenario:**
   - Given a `Page<Owner>` object representing a middle page (not the first or last) with a full set of results, when `addPaginationModel` is called with the page number for this middle page, then the `currentPage` should reflect the middle page number, and `listOwners` should contain the expected owners for that page.

7. **Invalid Page Scenario:**
   - Given a `Page<Owner>` object, when `addPaginationModel` is called with an invalid page number (e.g., negative number, or a number greater than `totalPages`), then the behavior should be determined (either returning an error, defaulting to the first page, or other defined behavior) and appropriate attributes should be set in the model.

8. **Boundary Conditions:**
   - Test the method with the boundary conditions such as the lowest and highest possible page numbers to ensure that the pagination logic handles these cases correctly.

9. **Large Dataset Scenario:**
   - Given a `Page<Owner>` object with a very large number of total pages and items, when `addPaginationModel` is called, then the model should correctly reflect the pagination details without any performance degradation or errors.

10. **Model Attribute Integrity:**
    - Ensure that calling `addPaginationModel` only adds or updates the intended attributes (`currentPage`, `totalPages`, `totalItems`, `listOwners`) and does not inadvertently affect any other attributes that may already exist in the `Model`.

11. **Return Value Verification:**
    - Verify that the method returns the correct view name `"owners/ownersList"` for various valid inputs.

Remember, these scenarios are meant to guide the creation of actual test cases, and the actual implementation of these tests would require using a testing framework like JUnit, possibly in combination with a mocking framework like Mockito to simulate the `Page<Owner>` and `Model` objects.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.ui.Model;
import org.springframework.validation.support.BindingAwareModelMap;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

    @Mock
    private Page<Owner> paginatedOwners;

    private Model model;

    private OwnerController ownerController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ownerController = new OwnerController(null);
        model = new BindingAwareModelMap();
    }

    @Test
    void testAddPaginationModel_StandardPagination() {
        when(paginatedOwners.getTotalPages()).thenReturn(10);
        when(paginatedOwners.getTotalElements()).thenReturn(100L);
        when(paginatedOwners.getContent()).thenReturn(Collections.nCopies(10, new Owner()));

        String viewName = ownerController.addPaginationModel(5, model, paginatedOwners);

        assertEquals(5, model.getAttribute("currentPage"));
        assertEquals(10, model.getAttribute("totalPages"));
        assertEquals(100L, model.getAttribute("totalItems"));
        assertEquals(10, ((List<?>) model.getAttribute("listOwners")).size());
        assertEquals("owners/ownersList", viewName);
    }

    @Test
    void testAddPaginationModel_EmptyPage() {
        when(paginatedOwners.getTotalPages()).thenReturn(0);
        when(paginatedOwners.getTotalElements()).thenReturn(0L);
        when(paginatedOwners.getContent()).thenReturn(Collections.emptyList());

        String viewName = ownerController.addPaginationModel(1, model, paginatedOwners);

        assertEquals(1, model.getAttribute("currentPage"));
        assertEquals(0, model.getAttribute("totalPages"));
        assertEquals(0L, model.getAttribute("totalItems"));
        assertEquals(Collections.emptyList(), model.getAttribute("listOwners"));
        assertEquals("owners/ownersList", viewName);
    }

    // TODO: Add more tests for the remaining scenarios
}
