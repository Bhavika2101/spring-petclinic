/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Validating the returned view name
   - Description: Verify that the function returns the correct view "owners/ownersList".

2. Scenario: Validating the current page attribute
   - Description: Verify that the function correctly sets the "currentPage" attribute in the model with the provided page number.

3. Scenario: Validating the total pages attribute
   - Description: Verify that the function correctly sets the "totalPages" attribute in the model with the total number of pages from the paginated data.

4. Scenario: Validating the total items attribute
   - Description: Verify that the function correctly sets the "totalItems" attribute in the model with the total number of elements from the paginated data.

5. Scenario: Validating the listOwners attribute
   - Description: Verify that the function correctly sets the "listOwners" attribute in the model with the content from the paginated data.

6. Scenario: Validating the function with empty paginated data
   - Description: Verify that the function correctly handles the scenario when the paginated data is empty. It should still set the "currentPage", "totalPages", "totalItems", and "listOwners" attributes correctly.

7. Scenario: Validating the function with null paginated data
   - Description: Verify that the function correctly handles the scenario when the paginated data is null. It should not throw any exceptions and should handle this scenario gracefully.

8. Scenario: Validating the function with large paginated data
   - Description: Verify that the function correctly handles the scenario when the paginated data is very large. It should not cause any performance issues and should still set the attributes correctly.

9. Scenario: Validating the function with paginated data having multiple pages
   - Description: Verify that the function correctly sets the "currentPage", "totalPages", "totalItems", and "listOwners" attributes when the paginated data spans multiple pages.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.domain.Page;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;

public class OwnerController_addPaginationModel_996bca2e5f_Test {

    private OwnerController ownerController;
    private Model model;
    
    @BeforeEach
    void setup() {
        ownerController = new OwnerController(new OwnerRepository());
        model = new ModelMap();
    }
    
    @Test
    public void testAddPaginationModel_validData() {
        Page<Owner> paginated = mock(Page.class);
        Owner owner = new Owner();
        owner.setLastName("Test");
        List<Owner> owners = Arrays.asList(owner);
        when(paginated.getContent()).thenReturn(owners);
        when(paginated.getTotalPages()).thenReturn(1);
        when(paginated.getTotalElements()).thenReturn((long) owners.size());
        
        String view = ownerController.addPaginationModel(1, model, paginated);
        
        assertEquals("owners/ownersList", view);
        assertEquals(1, model.getAttribute("currentPage"));
        assertEquals(1, model.getAttribute("totalPages"));
        assertEquals((long) owners.size(), model.getAttribute("totalItems"));
        assertTrue(((List<Owner>) model.getAttribute("listOwners")).contains(owner));
    }
    
    @Test
    public void testAddPaginationModel_emptyData() {
        Page<Owner> paginated = mock(Page.class);
        when(paginated.getContent()).thenReturn(Arrays.asList());
        when(paginated.getTotalPages()).thenReturn(0);
        when(paginated.getTotalElements()).thenReturn(0L);
        
        String view = ownerController.addPaginationModel(1, model, paginated);
        
        assertEquals("owners/ownersList", view);
        assertEquals(1, model.getAttribute("currentPage"));
        assertEquals(0, model.getAttribute("totalPages"));
        assertEquals(0L, model.getAttribute("totalItems"));
        assertTrue(((List<Owner>) model.getAttribute("listOwners")).isEmpty());
    }
}
