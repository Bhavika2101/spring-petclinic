/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `addPaginationModel` function, you would create test scenarios that cover the different aspects of the expected behavior:

1. **Happy Path Scenario:**
   - Given a valid `page` number, `model`, and a `paginated` object with a list of `Owner` instances, when the `addPaginationModel` method is called, then the `model` should be updated with the correct attributes (`currentPage`, `totalPages`, `totalItems`, `listOwners`), and the return value should be the string `"owners/ownersList"`.

2. **Page Number Validation:**
   - Given a negative `page` number, when the `addPaginationModel` method is called, then verify how the function handles the invalid page number.
   - Given a `page` number greater than the total number of pages, when the `addPaginationModel` method is called, then verify the behavior of the function (whether it throws an exception, defaults to the last page, or has another behavior).

3. **Model Update Verification:**
   - Verify that the `model` has been updated with all the required attributes and that no extra attributes are added to the `model`.
   - Verify that the `model` attributes contain the correct values corresponding to the `paginated` object provided.

4. **Empty Paginated Content:**
   - Given a `paginated` object with no content (empty list of `Owner`), when the `addPaginationModel` method is called, then verify that `listOwners` is empty and that `totalItems` is zero.

5. **Boundary Conditions:**
   - Given a `paginated` object at the boundary conditions (e.g., first page, last page), when the `addPaginationModel` method is called, then verify that the pagination attributes are correctly set (e.g., `currentPage` should be 1 on the first page).

6. **Null and Invalid Arguments:**
   - Given a `null` `model`, when the `addPaginationModel` method is called, then verify how the method handles the null argument (e.g., throws a NullPointerException, returns an error message).
   - Given a `null` `paginated` object, when the `addPaginationModel` method is called, then verify the method's behavior with the null argument.

7. **Consistency Across Calls:**
   - Given the same `page`, `model`, and `paginated` object, when the `addPaginationModel` method is called multiple times, then verify that the `model` is consistently updated with the same values each time.

8. **Integration with UI:**
   - Verify that the view `owners/ownersList` correctly displays the pagination information provided by the `model` (this would typically be a part of integration testing with the view layer).

9. **Concurrent Access:**
   - Given concurrent calls to `addPaginationModel` with different `page` numbers and `paginated` objects, verify that the `model` is correctly updated in each case and that there are no race conditions or concurrency issues.

10. **Performance Under Load:**
    - Verify the performance of the `addPaginationModel` method under high load, ensuring that it can handle a large `paginated` object with many `Owner` instances without significant performance degradation.

These test scenarios aim to cover the various aspects of the `addPaginationModel` method, ensuring that it functions correctly under a variety of conditions and inputs.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class OwnerController_addPaginationModel_996bca2e5f_Test {
    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    private Model model;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        model = new ExtendedModelMap();
    }

    @Test
    public void testAddPaginationModel_HappyPath() {
        int page = 1;
        List<Owner> ownerList = Arrays.asList(new Owner(), new Owner());
        Page<Owner> paginated = new PageImpl<>(ownerList);

        String viewName = ownerController.addPaginationModel(page, model, paginated);

        assertEquals("owners/ownersList", viewName);
        assertEquals(page, model.asMap().get("currentPage"));
        assertEquals(paginated.getTotalPages(), model.asMap().get("totalPages"));
        assertEquals(paginated.getTotalElements(), model.asMap().get("totalItems"));
        assertEquals(ownerList, model.asMap().get("listOwners"));
    }

    @Test
    public void testAddPaginationModel_EmptyPaginatedContent() {
        int page = 1;
        Page<Owner> paginated = new PageImpl<>(Collections.emptyList());

        ownerController.addPaginationModel(page, model, paginated);

        assertEquals(Collections.emptyList(), model.asMap().get("listOwners"));
        assertEquals(0L, model.asMap().get("totalItems"));
    }

    @Test
    public void testAddPaginationModel_NullModel() {
        int page = 1;
        List<Owner> ownerList = Arrays.asList(new Owner(), new Owner());
        Page<Owner> paginated = new PageImpl<>(ownerList);
        Model nullModel = null;

        try {
            ownerController.addPaginationModel(page, nullModel, paginated);
        } catch (NullPointerException e) {
            assertEquals("Model cannot be null", e.getMessage());
        }
    }

    @Test
    public void testAddPaginationModel_NullPaginated() {
        int page = 1;
        Page<Owner> nullPaginated = null;

        try {
            ownerController.addPaginationModel(page, model, nullPaginated);
        } catch (NullPointerException e) {
            assertEquals("Paginated content cannot be null", e.getMessage());
        }
    }

    // TODO: Add more test cases for other scenarios mentioned in the context, such as page number validation,
    // model update verification, boundary conditions, consistency across calls, concurrent access, and performance under load.
}
