/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you might consider for the `OwnerController`:

1. **Test the GET method for displaying the list of owners**
   - This test should verify that the `getOwners()` method returns a list of all owners.
   - You can use a mock `OwnerRepository` to simulate the behavior of the database.

2. **Test the GET method for displaying a specific owner**
   - This test should verify that the `getOwner()` method returns the correct owner when given a valid ID.
   - You can use a mock `OwnerRepository` to simulate the behavior of the database.

3. **Test the POST method for adding a new owner**
   - This test should verify that the `addOwner()` method correctly adds a new owner to the database.
   - You can use a mock `OwnerRepository` to simulate the behavior of the database.

4. **Test the POST method for updating an existing owner**
   - This test should verify that the `updateOwner()` method correctly updates an existing owner in the database.
   - You can use a mock `OwnerRepository` to simulate the behavior of the database.

5. **Test the POST method for deleting an owner**
   - This test should verify that the `deleteOwner()` method correctly deletes an owner from the database.
   - You can use a mock `OwnerRepository` to simulate the behavior of the database.

6. **Test the GET method for displaying the form to add a new owner**
   - This test should verify that the `showAddOwnerForm()` method returns the correct view and model.

7. **Test the GET method for displaying the form to update an existing owner**
   - This test should verify that the `showUpdateOwnerForm()` method returns the correct view and model.

Remember, these are just examples. You should create test scenarios that cover all the business rules and edge cases of your application.

*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class OwnerController_OwnerController_8b45ad788c_Test {

    @Mock
    private OwnerRepository ownerRepository;

    @InjectMocks
    private OwnerController ownerController;

    @Test
    public void testFindOwnerById_Success() {
        // Arrange
        Long ownerId = 1L;
        Owner owner = new Owner();
        owner.setId(ownerId);
        owner.setFirstName("John");
        owner.setLastName("Doe");
        when(ownerRepository.findById(ownerId)).thenReturn(Optional.of(owner));

        // Act
        Optional<Owner> result = ownerController.findOwnerById(ownerId);

        // Assert
        assertEquals(ownerId, result.get().getId());
        assertEquals("John", result.get().getFirstName());
        assertEquals("Doe", result.get().getLastName());
    }

    @Test
    public void testFindOwnerById_NotFound() {
        // Arrange
        Long ownerId = 1L;
        when(ownerRepository.findById(ownerId)).thenReturn(Optional.empty());

        // Act
        Optional<Owner> result = ownerController.findOwnerById(ownerId);

        // Assert
        assertEquals(Optional.empty(), result);
    }
}
