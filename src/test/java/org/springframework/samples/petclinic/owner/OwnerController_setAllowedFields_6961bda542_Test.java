/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

Here are some test scenarios:

1. Test when the WebDataBinder object is null:
    - The function should handle this case gracefully, possibly throwing an exception or logging an error message.

2. Test when the WebDataBinder object is not null and has an "id" field:
    - After the function is executed, the "id" field should be in the disallowed fields list.

3. Test when the WebDataBinder object is not null and doesn't have an "id" field:
    - After the function is executed, the disallowed fields list should still not contain the "id" field.

4. Test when the WebDataBinder object has multiple fields including "id":
    - After the function is executed, only the "id" field should be disallowed, other fields should remain unaffected.

5. Test when the WebDataBinder object has multiple fields and none of them is "id":
    - After the function is executed, the disallowed fields list should be the same as before.

6. Test when the WebDataBinder object has the "id" field and it is already in the disallowed fields list:
    - After the function is executed, the disallowed fields list should remain the same.

7. Test when the WebDataBinder object has an "id" field with different case (like "ID", "Id", "iD"):
    - After the function is executed, the "id" field should be in the disallowed fields list irrespective of its case.

8. Test when the WebDataBinder object has an "id" field with leading or trailing whitespaces:
    - After the function is executed, the "id" field (without spaces) should be in the disallowed fields list.

9. Test when the WebDataBinder object is not null but empty:
    - The function should handle this case gracefully and no changes should be made in the WebDataBinder object.

10. Test the concurrency when multiple threads are executing this function simultaneously:
    - The function should work correctly and the "id" field should be disallowed in every thread's respective WebDataBinder object.
*/
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.validation.DataBinder;
import org.springframework.samples.petclinic.owner.OwnerController;
import org.springframework.samples.petclinic.owner.OwnerRepository;
import static org.mockito.Mockito.mock;

public class OwnerController_setAllowedFields_6961bda542_Test {

    private OwnerController ownerController;
    private OwnerRepository ownerRepository;
    private DataBinder dataBinder;

    @BeforeEach
    public void setUp() {
        ownerRepository = mock(OwnerRepository.class);
        ownerController = new OwnerController(ownerRepository);
        dataBinder = new DataBinder(new Object());
    }

    @Test
    public void testSetAllowedFields() {
        ownerController.setAllowedFields(dataBinder);
        String[] disallowedFields = dataBinder.getDisallowedFields();
        assertNotNull(disallowedFields);
        assertEquals(1, disallowedFields.length);
        assertEquals("id", disallowedFields[0]);
    }

    @Test
    public void testSetAllowedFieldsWithExistingDisallowedFields() {
        dataBinder.setDisallowedFields("test");
        ownerController.setAllowedFields(dataBinder);
        String[] disallowedFields = dataBinder.getDisallowedFields();
        assertNotNull(disallowedFields);
        assertEquals(2, disallowedFields.length);
        assertArrayEquals(new String[]{"test", "id"}, disallowedFields);
    }

    @Test
    public void testSetAllowedFieldsWithNullDataBinder() {
        assertThrows(NullPointerException.class, () -> ownerController.setAllowedFields(null));
    }
}
