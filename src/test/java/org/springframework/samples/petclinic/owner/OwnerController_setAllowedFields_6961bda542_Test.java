/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when WebDataBinder object is null
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object is null.

2. Scenario: Test when WebDataBinder object is not null and doesn't contain a field named "id"
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object does not contain a field named "id".

3. Scenario: Test when WebDataBinder object is not null and contains a field named "id"
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object contains a field named "id". After the function is called, the "id" field should be disallowed.

4. Scenario: Test when WebDataBinder object contains multiple fields including "id"
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object contains multiple fields. After the function is called, only the "id" field should be disallowed and the other fields should remain unchanged.

5. Scenario: Test when WebDataBinder object contains multiple fields including multiple "id" fields
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object contains multiple "id" fields. After the function is called, all "id" fields should be disallowed.

6. Scenario: Test when WebDataBinder object is not null and contains a field named "ID" (case-sensitive test)
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object contains a field named "ID". Since the function is case-sensitive, the "ID" field should not be disallowed after the function is called.

7. Scenario: Test when WebDataBinder object is not null and contains special character or numeric fields
   - Description: The test will verify that the function behaves correctly when the input WebDataBinder object contains fields that contain special characters or numbers. The "id" field should be disallowed after the function is called, and the other fields should remain unchanged.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.validation.DataBinder;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class OwnerController_setAllowedFields_6961bda542_Test {

    private OwnerController ownerController;

    @BeforeEach
    public void setup() {
        ownerController = new OwnerController(new OwnerRepository());
    }

    @Test
    public void testSetAllowedFields_NullDataBinder() {
        assertThrows(NullPointerException.class, () -> {
            ownerController.setAllowedFields(null);
        });
    }

    @Test
    public void testSetAllowedFields_ValidDataBinder_NoIdField() {
        DataBinder dataBinder = new DataBinder(new Owner());
        ownerController.setAllowedFields(dataBinder);
        assertTrue(dataBinder.getDisallowedFields().length == 1);
        assertTrue("id".equals(dataBinder.getDisallowedFields()[0]));
    }

    @Test
    public void testSetAllowedFields_ValidDataBinder_WithIdField() {
        DataBinder dataBinder = new DataBinder(new Owner());
        dataBinder.setDisallowedFields("id");
        ownerController.setAllowedFields(dataBinder);
        assertTrue(dataBinder.getDisallowedFields().length == 1);
        assertTrue("id".equals(dataBinder.getDisallowedFields()[0]));
    }

    @Test
    public void testSetAllowedFields_ValidDataBinder_MultipleFields() {
        DataBinder dataBinder = new DataBinder(new Owner());
        dataBinder.setDisallowedFields("id", "name");
        ownerController.setAllowedFields(dataBinder);
        assertTrue(dataBinder.getDisallowedFields().length == 2);
    }

    @Test
    public void testSetAllowedFields_ValidDataBinder_MultipleIdFields() {
        DataBinder dataBinder = new DataBinder(new Owner());
        dataBinder.setDisallowedFields("id", "id");
        ownerController.setAllowedFields(dataBinder);
        assertTrue(dataBinder.getDisallowedFields().length == 2);
    }

    @Test
    public void testSetAllowedFields_ValidDataBinder_CaseSensitive() {
        DataBinder dataBinder = new DataBinder(new Owner());
        dataBinder.setDisallowedFields("ID");
        ownerController.setAllowedFields(dataBinder);
        assertTrue(dataBinder.getDisallowedFields().length == 2);
    }

    @Test
    public void testSetAllowedFields_ValidDataBinder_SpecialCharacterOrNumericFields() {
        DataBinder dataBinder = new DataBinder(new Owner());
        dataBinder.setDisallowedFields("#123", "@abc");
        ownerController.setAllowedFields(dataBinder);
        assertTrue(dataBinder.getDisallowedFields().length == 3);
    }
}
