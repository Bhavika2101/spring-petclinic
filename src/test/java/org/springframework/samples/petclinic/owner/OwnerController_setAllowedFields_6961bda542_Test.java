/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the "id" field is disallowed after calling the setAllowedFields method.
   Given a WebDataBinder instance with some fields including "id",
   When the setAllowedFields method is called,
   Then the "id" field should be disallowed.

2. Scenario: Check if other fields apart from "id" are still allowed after calling the setAllowedFields method.
   Given a WebDataBinder instance with some fields including "id" and "name",
   When the setAllowedFields method is called,
   Then the "name" field should still be allowed.

3. Scenario: Check if the setAllowedFields method works correctly when the WebDataBinder instance has no fields.
   Given an empty WebDataBinder instance,
   When the setAllowedFields method is called,
   Then no error should be thrown.

4. Scenario: Check if the setAllowedFields method works correctly when the WebDataBinder instance has only the "id" field.
   Given a WebDataBinder instance with only the "id" field,
   When the setAllowedFields method is called,
   Then the "id" field should be disallowed.

5. Scenario: Check if the setAllowedFields method works correctly when the WebDataBinder instance has multiple fields including "id".
   Given a WebDataBinder instance with multiple fields including "id",
   When the setAllowedFields method is called,
   Then only the "id" field should be disallowed, and all other fields should still be allowed.

6. Scenario: Check if calling the setAllowedFields method multiple times has the expected cumulative effect.
   Given a WebDataBinder instance with some fields including "id" and "name",
   When the setAllowedFields method is called twice, first with "id" and then with "name",
   Then both "id" and "name" fields should be disallowed.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_setAllowedFields_6961bda542_Test {

    @Mock
    private WebDataBinder dataBinder;

    @InjectMocks
    private OwnerController ownerController;

    @BeforeEach
    void setup() {
        ownerController = new OwnerController();
    }

    @Test
    public void testSetAllowedFields_WithIdField() {
        ownerController.setAllowedFields(dataBinder);
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }

    @Test
    public void testSetAllowedFields_WithoutIdField() {
        ownerController.setAllowedFields(dataBinder);
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }

    @Test
    public void testSetAllowedFields_WithEmptyFields() {
        ownerController.setAllowedFields(dataBinder);
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }

    @Test
    public void testSetAllowedFields_WithOnlyIdField() {
        ownerController.setAllowedFields(dataBinder);
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }

    @Test
    public void testSetAllowedFields_WithMultipleFieldsIncludingId() {
        ownerController.setAllowedFields(dataBinder);
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }

    @Test
    public void testSetAllowedFields_CalledMultipleTimes() {
        ownerController.setAllowedFields(dataBinder);
        ownerController.setAllowedFields(dataBinder);
        verify(dataBinder, times(2)).setDisallowedFields("id");
    }
}
