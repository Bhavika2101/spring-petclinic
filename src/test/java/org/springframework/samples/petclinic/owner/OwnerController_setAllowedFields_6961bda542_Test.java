/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `setAllowedFields` method:

1. **Test Case 1:** Verify that the `setAllowedFields` method correctly sets the disallowed fields to "id".

   - **Precondition:** Create a new `WebDataBinder` object.
   - **Action:** Call the `setAllowedFields` method with the created `WebDataBinder` object.
   - **Postcondition:** The `WebDataBinder` object should have its disallowed fields set to "id".

2. **Test Case 2:** Verify that the `setAllowedFields` method does not set any other disallowed fields.

   - **Precondition:** Create a new `WebDataBinder` object.
   - **Action:** Call the `setAllowedFields` method with the created `WebDataBinder` object.
   - **Postcondition:** The `WebDataBinder` object should not have any other disallowed fields set.

3. **Test Case 3:** Verify that the `setAllowedFields` method correctly handles a `WebDataBinder` object with existing disallowed fields.

   - **Precondition:** Create a new `WebDataBinder` object with existing disallowed fields.
   - **Action:** Call the `setAllowedFields` method with the created `WebDataBinder` object.
   - **Postcondition:** The `WebDataBinder` object should have its disallowed fields set to "id", and the existing disallowed fields should remain unchanged.

4. **Test Case 4:** Verify that the `setAllowedFields` method correctly handles a `WebDataBinder` object with no disallowed fields.

   - **Precondition:** Create a new `WebDataBinder` object with no disallowed fields.
   - **Action:** Call the `setAllowedFields` method with the created `WebDataBinder` object.
   - **Postcondition:** The `WebDataBinder` object should have its disallowed fields set to "id", and no other fields should be disallowed.

Please note that these test scenarios are based on the provided code snippet. If there are any additional requirements or constraints, they should be considered when writing these test scenarios.

*/
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.bind.WebDataBinder;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class OwnerController_setAllowedFields_6961bda542_Test {

    @Mock
    private WebDataBinder dataBinder;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSetAllowedFields() {
        // Arrange
        OwnerController ownerController = new OwnerController();

        // Act
        ownerController.setAllowedFields(dataBinder);

        // Assert
        verify(dataBinder, times(1)).setDisallowedFields("id");
    }
}
