/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1: Ensure that the returned collection is not null.**

* **Test Data:** None required.
* **Expected Result:** The returned collection should not be null.

**Test Scenario 2: Ensure that the returned collection contains all of the pet types in the database.**

* **Test Data:** A database containing at least one pet type.
* **Expected Result:** The returned collection should contain all of the pet types in the database.

**Test Scenario 3: Ensure that the returned collection is sorted by name.**

* **Test Data:** A database containing at least two pet types with different names.
* **Expected Result:** The returned collection should be sorted by name, in ascending order.

**Test Scenario 4: Ensure that the returned collection does not contain any duplicate pet types.**

* **Test Data:** A database containing at least two pet types with the same name.
* **Expected Result:** The returned collection should not contain any duplicate pet types.

**Test Scenario 5: Ensure that the returned collection is empty if there are no pet types in the database.**

* **Test Data:** A database containing no pet types.
* **Expected Result:** The returned collection should be empty.
*/
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Component;
import org.springframework.test.annotation.DirtiesContext;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@ComponentScan(basePackages = "org.springframework.samples.petclinic.owner")
class PetController_populatePetTypes_68489030ac_Test {

    @Autowired
    private PetController petController;

    @Test
    void testPopulatePetTypes_whenNoPetTypesInDb_shouldReturnEmptyCollection() {
        // Test Scenario 5
        Collection<PetType> petTypes = petController.populatePetTypes();

        assertThat(petTypes).isEmpty();
    }

    @Test
    void testPopulatePetTypes_whenPetTypesInDb_shouldReturnCollectionOfAllPetTypes() {
        // Test Scenario 2
        // Given
        PetType petType1 = new PetType();
        petType1.setName("Dog");
        PetType petType2 = new PetType();
        petType2.setName("Cat");
        petController.owners.savePetTypes(petType1, petType2);

        // When
        Collection<PetType> petTypes = petController.populatePetTypes();

        // Then
        assertThat(petTypes).containsExactlyInAnyOrder(petType1, petType2);
    }

    @Test
    void testPopulatePetTypes_whenDuplicatePetTypesInDb_shouldReturnCollectionWithoutDuplicates() {
        // Test Scenario 4
        // Given
        PetType petType1 = new PetType();
        petType1.setName("Dog");
        PetType petType2 = new PetType();
        petType2.setName("Dog");
        petController.owners.savePetTypes(petType1, petType2);

        // When
        Collection<PetType> petTypes = petController.populatePetTypes();

        // Then
        assertThat(petTypes).containsExactly(petType1);
    }

    @Test
    void testPopulatePetTypes_whenPetTypesInDbAreNotSortedByName_shouldReturnCollectionSortedByName() {
        // Test Scenario 3
        // Given
        PetType petType1 = new PetType();
        petType1.setName("Cat");
        PetType petType2 = new PetType();
        petType2.setName("Dog");
        petController.owners.savePetTypes(petType1, petType2);

        // When
        Collection<PetType> petTypes = petController.populatePetTypes();

        // Then
        assertThat(petTypes).containsExactly(petType1, petType2);
    }

}
