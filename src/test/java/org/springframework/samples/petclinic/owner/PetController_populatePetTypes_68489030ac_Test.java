/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you might consider for the `populatePetTypes` method:

1. **Test when the `owners` object is null**: In this case, the method should return an empty collection.

2. **Test when the `owners` object is not null but the `findPetTypes` method returns null**: In this case, the method should return an empty collection.

3. **Test when the `owners` object is not null and the `findPetTypes` method returns a non-empty collection**: In this case, the method should return the collection returned by `findPetTypes`.

4. **Test when the `owners` object is not null and the `findPetTypes` method returns an empty collection**: In this case, the method should return an empty collection.

Please note that these tests assume that the `findPetTypes` method is correctly implemented and returns the expected results. You should also consider testing the behavior of the method when the `owners` object is null or the `findPetTypes` method throws an exception.

*/
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class PetController_populatePetTypes_68489030ac_Test {

    @InjectMocks
    private PetController petController;

    @Mock
    private Owners owners;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPopulatePetTypes_success() {
        Collection<PetType> expectedPetTypes = new ArrayList<>();
        expectedPetTypes.add(new PetType());

        when(owners.findPetTypes()).thenReturn(expectedPetTypes);

        Collection<PetType> actualPetTypes = petController.populatePetTypes();

        assertEquals(expectedPetTypes, actualPetTypes);
    }

    @Test
    public void testPopulatePetTypes_failure() {
        Collection<PetType> expectedPetTypes = new ArrayList<>();
        expectedPetTypes.add(new PetType());

        when(owners.findPetTypes()).thenReturn(new ArrayList<>());

        Collection<PetType> actualPetTypes = petController.populatePetTypes();

        assertEquals(expectedPetTypes, actualPetTypes);
    }
}
