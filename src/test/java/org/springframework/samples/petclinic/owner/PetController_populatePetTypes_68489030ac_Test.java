/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate that the `populatePetTypes()` function returns a collection of `PetType` objects.
   - Input: No input required for this function.
   - Expected Output: A collection of `PetType` objects.

2. Scenario: Validate that the `populatePetTypes()` function returns an empty collection if there are no `PetType` objects.
   - Input: No input required for this function.
   - Expected Output: An empty collection.

3. Scenario: Validate that the `populatePetTypes()` function returns all `PetType` objects present in the database.
   - Input: No input required for this function.
   - Expected Output: A collection containing all `PetType` objects present in the database.

4. Scenario: Validate that the `populatePetTypes()` function returns a collection of `PetType` objects in the order in which they are present in the database.
   - Input: No input required for this function.
   - Expected Output: A collection of `PetType` objects in the same order as they appear in the database.

5. Scenario: Validate that the `populatePetTypes()` function handles potential exceptions properly.
   - Input: No input required for this function.
   - Expected Output: Appropriate exception handling, such as returning a default value or logging the error.

6. Scenario: Validate that the `populatePetTypes()` function works correctly when called multiple times in quick succession.
   - Input: No input required for this function.
   - Expected Output: Each call should return a collection of `PetType` objects, and the results should not be affected by the timing of the calls.

7. Scenario: Validate that the `populatePetTypes()` function does not modify the `PetType` objects it retrieves from the database.
   - Input: No input required for this function.
   - Expected Output: The `PetType` objects returned by the function should be the same as those in the database, with no modifications.

8. Scenario: Validate that the `populatePetTypes()` function works correctly when the database is updated while the function is running.
   - Input: No input required for this function.
   - Expected Output: The function should either return the `PetType` objects that were in the database when it started running, or it should return the updated set of `PetType` objects, depending on the expected behavior in this situation.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.samples.petclinic.owner.PetType;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PetController_populatePetTypes_68489030ac_Test {
    @Mock
    OwnerRepository owners;
    @InjectMocks
    PetController petController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testPopulatePetTypes() {
        PetType petType1 = new PetType();
        PetType petType2 = new PetType();
        List<PetType> petTypes = Arrays.asList(petType1, petType2);
        when(owners.findPetTypes()).thenReturn(petTypes);

        Collection<PetType> result = petController.populatePetTypes();
        assertEquals(petTypes, result);
    }

    @Test
    void testPopulatePetTypes_NoPetTypes() {
        when(owners.findPetTypes()).thenReturn(Collections.emptyList());

        Collection<PetType> result = petController.populatePetTypes();
        assertTrue(result.isEmpty());
    }

    @Test
    void testPopulatePetTypes_ExceptionHandling() {
        when(owners.findPetTypes()).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> petController.populatePetTypes());
    }
}
