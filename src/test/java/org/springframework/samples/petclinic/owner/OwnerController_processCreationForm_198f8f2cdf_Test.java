/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `processCreationForm` method, you can create the following test scenarios:

1. **Valid Owner Data**: 
   - Given: A valid `Owner` object and an empty `BindingResult`.
   - When: `processCreationForm` is called.
   - Then: Verify that the method saves the owner and returns the expected redirect string with the owner's ID.

2. **Invalid Owner Data**:
   - Given: An `Owner` object with validation errors and a `BindingResult` containing those errors.
   - When: `processCreationForm` is called.
   - Then: Verify that the method does not save the owner and returns the view name for the creation or update form.

3. **BindingResult Without Errors and Save Failure**:
   - Given: A valid `Owner` object and an empty `BindingResult`.
   - When: Save operation fails (You can mock this behavior).
   - Then: Verify how the method behaves in case of save failure. It should handle the failure appropriately, potentially returning an error view or message.

4. **BindingResult With Errors and Save Attempt**:
   - Given: An `Owner` object with validation errors and a `BindingResult` containing those errors.
   - When: `processCreationForm` is called.
   - Then: Verify that the method does not attempt to save the owner despite the presence of errors.

5. **Owner ID After Save**:
   - Given: A valid `Owner` object and an empty `BindingResult`.
   - When: `processCreationForm` is called and the owner is successfully saved.
   - Then: Verify that the owner's ID is correctly appended to the redirect URL.

6. **Owner Save Side Effects**:
   - Given: A valid `Owner` object and an empty `BindingResult`.
   - When: `processCreationForm` is called.
   - Then: Verify any side effects or additional actions taken when an owner is saved (e.g., logging, events fired, etc.).

7. **Owner Not Saved When BindingResult Has Global Errors**:
   - Given: An `Owner` object and a `BindingResult` with global (non-field) errors.
   - When: `processCreationForm` is called.
   - Then: Verify that the owner is not saved and the correct view is returned.

8. **Owner Not Saved When BindingResult Has Field Errors**:
   - Given: An `Owner` object and a `BindingResult` with field-specific errors.
   - When: `processCreationForm` is called.
   - Then: Verify that the owner is not saved and the correct view is returned.

9. **Check Redirect URL Format**:
   - Given: A valid `Owner` object with a specific ID and an empty `BindingResult`.
   - When: `processCreationForm` is called.
   - Then: Verify that the redirect URL is correctly formatted, including the correct path and the owner's ID.

10. **Concurrent Save Collision**:
    - Given: Multiple valid `Owner` objects being saved simultaneously.
    - When: `processCreationForm` is called concurrently.
    - Then: Verify that the save operation is thread-safe and each owner is saved correctly without any data corruption or loss.

Each of these test scenarios would need to be implemented as unit tests using a testing framework such as JUnit and possibly mocking frameworks like Mockito to mock the behavior of the `owners.save(owner)` method and the `BindingResult`.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BindingResult;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class OwnerController_processCreationForm_198f8f2cdf_Test {

    @Mock
    private OwnerRepository owners;

    @Mock
    private BindingResult bindingResult;

    @InjectMocks
    private OwnerController ownerController;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testProcessCreationFormWithValidOwner() {
        Owner owner = new Owner();
        owner.setId(1);
        when(bindingResult.hasErrors()).thenReturn(false);

        String view = ownerController.processCreationForm(owner, bindingResult);

        verify(owners, times(1)).save(owner);
        assertEquals("redirect:/owners/1", view);
    }

    @Test
    void testProcessCreationFormWithInvalidOwner() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(true);

        String view = ownerController.processCreationForm(owner, bindingResult);

        verify(owners, never()).save(any(Owner.class));
        assertEquals("owners/createOrUpdateOwnerForm", view);
    }

    @Test
    void testProcessCreationFormWithBindingResultErrorsAndSaveAttempt() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(true);

        ownerController.processCreationForm(owner, bindingResult);

        verify(owners, never()).save(owner);
    }

    @Test
    void testProcessCreationFormWithoutErrorsAndSaveFailure() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(false);
        doThrow(new RuntimeException("Save failed")).when(owners).save(owner);

        Exception exception = assertThrows(RuntimeException.class, () ->
                ownerController.processCreationForm(owner, bindingResult));

        assertEquals("Save failed", exception.getMessage());
    }

    @Test
    void testProcessCreationFormOwnerIdAfterSave() {
        Owner owner = new Owner();
        owner.setId(5);
        when(bindingResult.hasErrors()).thenReturn(false);

        String view = ownerController.processCreationForm(owner, bindingResult);

        assertTrue(view.contains("/owners/5"));
    }

    // TODO: Implement additional test cases based on the test scenarios provided
}
