/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `processCreationForm` method, we need to consider the method's responsibilities and how it should behave under different circumstances. Below are some test scenarios that should be covered:

1. **Validation Success Scenario:**
   - Given that the `owner` object is valid (i.e., all constraints are met),
   - When `processCreationForm` is called,
   - Then the method should save the owner using `this.owners.save(owner)`,
   - And it should redirect to the owner's details page with the correct owner ID in the URL.

2. **Validation Failure Scenario:**
   - Given that the `owner` object is invalid (i.e., it does not meet one or more constraints),
   - When `processCreationForm` is called,
   - Then the method should not save the owner,
   - And it should return the view name for the owner creation or update form without performing a redirect.

3. **BindingResult Errors Handling:**
   - Given that the `BindingResult` has one or more errors (e.g., field errors or global errors),
   - When `processCreationForm` is called,
   - Then the method should not save the owner,
   - And it should return the view name for the owner creation or update form without performing a redirect.

4. **Owner Object with Null ID After Save:**
   - Given that the `owner` ID is null after the save operation (assuming the save operation should generate an ID),
   - When `processCreationForm` is called,
   - Then the method should handle this scenario gracefully (e.g., by throwing an exception or by redirecting to an error page),
   - And it should not result in an invalid redirect URL.

5. **Owner Save Operation Failure:**
   - Given that the `owner` save operation fails due to a database error or any other reason,
   - When `processCreationForm` is called,
   - Then the method should handle the failure (e.g., by redirecting to an error page or displaying an error message),
   - And it should not redirect to the owner's details page as if the save was successful.

6. **Owner ID Present in Redirect URL:**
   - Given that the owner is successfully saved and has a non-null ID,
   - When `processCreationForm` is called,
   - Then the redirect URL should contain the correct owner ID.

7. **Check for Side Effects:**
   - Given that the `processCreationForm` is called,
   - When the owner is valid and saved successfully,
   - Then there should be no side effects on other system components (e.g., no updates to unrelated records).

8. **Concurrent Save Operations:**
   - Given that multiple requests to `processCreationForm` are made concurrently with valid owner objects,
   - When the method processes these requests,
   - Then each owner should be saved without conflict, and each should redirect to the correct owner details page.

9. **Form Submission with No Owner Object:**
   - Given that the `processCreationForm` is called without an `owner` object or with a `null` `owner`,
   - When the method is executed,
   - Then the method should handle the situation appropriately (e.g., by rejecting the request or by redirecting to a fallback page).

These scenarios cover a range of possible situations that the `processCreationForm` method might encounter and help ensure that the business logic is robust and handles both the expected and edge cases gracefully.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BindingResult;

public class OwnerController_processCreationForm_198f8f2cdf_Test {

    @Mock
    private OwnerRepository owners;

    @Mock
    private BindingResult bindingResult;

    @InjectMocks
    private OwnerController ownerController;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    // Test scenario 1: Validation Success Scenario
    @Test
    public void testProcessCreationForm_Success() {
        Owner owner = new Owner();
        owner.setId(1);
        when(bindingResult.hasErrors()).thenReturn(false);
        when(owners.save(any(Owner.class))).thenReturn(null); // Assuming save method is void

        String view = ownerController.processCreationForm(owner, bindingResult);

        verify(owners, times(1)).save(any(Owner.class));
        assertEquals("redirect:/owners/1", view);
    }

    // Test scenario 2: Validation Failure Scenario
    @Test
    public void testProcessCreationForm_ValidationFailure() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(true);

        String view = ownerController.processCreationForm(owner, bindingResult);

        verify(owners, never()).save(any(Owner.class));
        assertEquals(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
    }

    // Test scenario 3: BindingResult Errors Handling
    @Test
    public void testProcessCreationForm_BindingResultErrors() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(true);

        String view = ownerController.processCreationForm(owner, bindingResult);

        verify(owners, never()).save(any(Owner.class));
        assertEquals(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
    }

    // Test scenario 4: Owner Object with Null ID After Save
    @Test
    public void testProcessCreationForm_NullIdAfterSave() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(false);
        doAnswer(invocation -> {
            Owner savedOwner = invocation.getArgument(0);
            savedOwner.setId(null); // Simulate that the ID is not generated
            return null;
        }).when(owners).save(any(Owner.class));

        String view = ownerController.processCreationForm(owner, bindingResult);

        verify(owners, times(1)).save(any(Owner.class));
        assertNotNull("Redirect view should not be null when owner ID is null", view);
    }

    // Test scenario 5: Owner Save Operation Failure
    @Test(expected = RuntimeException.class)
    public void testProcessCreationForm_SaveOperationFailure() {
        Owner owner = new Owner();
        when(bindingResult.hasErrors()).thenReturn(false);
        doThrow(new RuntimeException()).when(owners).save(any(Owner.class));

        ownerController.processCreationForm(owner, bindingResult);
    }

    // Test scenario 6: Owner ID Present in Redirect URL
    @Test
    public void testProcessCreationForm_OwnerIdInRedirectUrl() {
        Owner owner = new Owner();
        owner.setId(1);
        when(bindingResult.hasErrors()).thenReturn(false);

        String view = ownerController.processCreationForm(owner, bindingResult);

        assertEquals("redirect:/owners/1", view);
    }

    // Test scenario 7, 8, and 9 are not directly testable without additional context or setup
}
