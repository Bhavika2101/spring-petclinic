/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `processCreationForm` method:

1. **Test with valid data**:
   - Create an `Owner` object with valid data.
   - Call `processCreationForm` with the `Owner` object and a `BindingResult` object.
   - Verify that the method returns the expected view (`VIEWS_OWNER_CREATE_OR_UPDATE_FORM`).
   - Verify that the `Owner` object is saved in the database.

2. **Test with invalid data**:
   - Create an `Owner` object with invalid data.
   - Call `processCreationForm` with the `Owner` object and a `BindingResult` object.
   - Verify that the method returns the expected view (`VIEWS_OWNER_CREATE_OR_UPDATE_FORM`).
   - Verify that the `Owner` object is not saved in the database.

3. **Test with null data**:
   - Call `processCreationForm` with a null `Owner` object and a `BindingResult` object.
   - Verify that the method returns the expected view (`VIEWS_OWNER_CREATE_OR_UPDATE_FORM`).
   - Verify that the `Owner` object is not saved in the database.

4. **Test with empty data**:
   - Create an `Owner` object with empty data.
   - Call `processCreationForm` with the `Owner` object and a `BindingResult` object.
   - Verify that the method returns the expected view (`VIEWS_OWNER_CREATE_OR_UPDATE_FORM`).
   - Verify that the `Owner` object is not saved in the database.

Please note that these test scenarios assume that you have a way to verify that the `Owner` object is saved in the database. In a real-world application, you would typically use a testing framework like JUnit and a mocking library like Mockito to mock the database interactions.

*/
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class OwnerController_processCreationForm_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private Owners owners;

    @Test
    public void testProcessCreationForm_success() throws Exception {
        Owner owner = new Owner();
        owner.setId(1);
        when(owners.save(any(Owner.class))).thenReturn(owner);

        mockMvc.perform(post("/owners")
                .param("id", "1"))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/owners/1"));

        verify(owners, times(1)).save(any(Owner.class));
    }

    @Test
    public void testProcessCreationForm_failure() throws Exception {
        Owner owner = new Owner();
        owner.setId(1);
        when(owners.save(any(Owner.class))).thenReturn(owner);

        mockMvc.perform(post("/owners")
                .param("id", ""))
                .andExpect(status().isOk())
                .andExpect(view().name(VIEWS_OWNER_CREATE_OR_UPDATE_FORM));

        verify(owners, never()).save(any(Owner.class));
    }
}
