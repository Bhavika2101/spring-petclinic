/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

Here are some possible test scenarios for the `processCreationForm()` function:

1. Test when the `Owner` object is valid and the result does not have any errors. The function should save the owner and redirect to the owner's page. 

2. Test when the `Owner` object is valid but the result has errors. The function should return the constant `VIEWS_OWNER_CREATE_OR_UPDATE_FORM`.

3. Test when the `Owner` object is not valid and the result has errors. The function should return the constant `VIEWS_OWNER_CREATE_OR_UPDATE_FORM`.

4. Test when the `Owner` object is not valid but the result does not have any errors. This scenario is unlikely if the validation is working properly, but could occur if there is a bug in the validation code. The function should still attempt to save the owner, but it may cause an exception or other error.

5. Test with an `Owner` object that has the same ID as an existing owner. Depending on the implementation of the `save()` method, this could either update the existing owner or cause an error.

6. Test with an `Owner` object that has a null ID. Depending on the implementation of the `save()` method, this could either assign a new ID to the owner or cause an error.

7. Test with a null `Owner` object. This should cause a NullPointerException before the `result.hasErrors()` check.

8. Test with a null `result` object. This should cause a NullPointerException at the `result.hasErrors()` check.

9. Test with a `result` object that has errors but a null `Owner` object. This should return the constant `VIEWS_OWNER_CREATE_OR_UPDATE_FORM`, but it may also cause a NullPointerException if the function attempts to access the owner.

10. Test with a `result` object that does not have errors but a null `Owner` object. This should cause a NullPointerException when the function attempts to save the owner.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.validation.BindingResult;

@RunWith(MockitoJUnitRunner.class)
public class OwnerController_processCreationForm_198f8f2cdf_Test {

    @Mock
    private OwnerRepository owners;

    @Mock
    private BindingResult result;

    @Mock
    private Owner owner;

    @InjectMocks
    private OwnerController ownerController;

    @Before
    public void setup() {
        when(owner.getId()).thenReturn(1);
    }

    @Test
    public void testProcessCreationForm_Success() {
        when(result.hasErrors()).thenReturn(false);
        String view = ownerController.processCreationForm(owner, result);
        assertEquals("redirect:/owners/1", view);
    }

    @Test
    public void testProcessCreationForm_HasErrors() {
        when(result.hasErrors()).thenReturn(true);
        String view = ownerController.processCreationForm(owner, result);
        assertEquals("owners/createOrUpdateOwnerForm", view);
    }
}
