/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

Scenario 1: Test the processCreationForm with a valid owner object.
In this scenario, a valid owner object is passed to the processCreationForm method. The expected outcome is that the owner object is saved and the method returns a redirect URL that includes the ID of the new owner.

Scenario 2: Test the processCreationForm with an invalid owner object.
In this scenario, an invalid owner object is passed to the processCreationForm method. The expected outcome is that the method returns the view name for the creation or update form, indicating that there were errors in the owner object and the form needs to be filled out again.

Scenario 3: Test the processCreationForm with a null owner object.
In this scenario, a null owner object is passed to the processCreationForm method. The expected outcome is that the method throws a NullPointerException, indicating that a valid owner object is required.

Scenario 4: Test the processCreationForm with a valid owner object, but the save operation fails.
In this scenario, a valid owner object is passed to the processCreationForm method, but an error occurs when attempting to save the owner object. The expected outcome is that the method throws an exception, indicating that the save operation failed.

Scenario 5: Test the processCreationForm with a valid owner object, but the owner object already exists.
In this scenario, a valid owner object is passed to the processCreationForm method, but an owner with the same ID already exists. The expected outcome is that the method throws an exception, indicating that an owner with the same ID already exists.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.times;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.validation.BindingResult;

@RunWith(MockitoJUnitRunner.class)
public class OwnerController_processCreationForm_198f8f2cdf_Test {

    @Mock
    private OwnerRepository owners;

    @Mock
    private BindingResult result;

    @InjectMocks
    private OwnerController ownerController;

    private Owner owner;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        owner = new Owner();
        owner.setId(1);
    }

    @Test
    public void testProcessCreationForm_ValidOwner() {
        when(result.hasErrors()).thenReturn(false);

        String view = ownerController.processCreationForm(owner, result);

        verify(owners, times(1)).save(any(Owner.class));
        assertEquals("redirect:/owners/1", view);
    }

    @Test
    public void testProcessCreationForm_InvalidOwner() {
        when(result.hasErrors()).thenReturn(true);

        String view = ownerController.processCreationForm(owner, result);

        assertEquals("owners/createOrUpdateOwnerForm", view);
    }

    @Test(expected = NullPointerException.class)
    public void testProcessCreationForm_NullOwner() {
        ownerController.processCreationForm(null, result);
    }

    @Test(expected = RuntimeException.class)
    public void testProcessCreationForm_SaveFailed() {
        when(result.hasErrors()).thenReturn(false);
        when(owners.save(any(Owner.class))).thenThrow(RuntimeException.class);

        ownerController.processCreationForm(owner, result);
    }

    // TODO: Add a test case for the scenario where the owner object already exists. This requires modifying the OwnerRepository to throw an exception when trying to save an owner that already exists.
}
