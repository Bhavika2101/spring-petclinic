/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `processCreationForm` function, we need to consider the various scenarios that could occur when this method is called. Here are some test scenarios to consider:

1. **Form Submission with No Errors:**
   - Given a valid `Owner` object with all required fields properly filled out, and no binding errors, when the `processCreationForm` method is invoked, then it should save the owner and redirect to the owner's detail page.

2. **Form Submission with Binding Errors:**
   - Given an `Owner` object with missing or invalid fields that violate constraints, and binding errors are present, when the `processCreationForm` method is invoked, then it should not save the owner and should return the form view for correction.

3. **Form Submission with Business Rule Violations:**
   - Given an `Owner` object that passes basic field validations but violates specific business rules (e.g., duplicate owner information), when the `processCreationForm` method is invoked, then it should not save the owner and should return an appropriate error message.

4. **Owner Persistence:**
   - Given a valid `Owner` object with no binding errors, when the `processCreationForm` method is invoked, then it should verify that the owner is persisted in the data store (e.g., database).

5. **Redirection after Successful Submission:**
   - Given a valid `Owner` object with no binding errors, when the `processCreationForm` method is invoked, then it should verify that the response is a redirect to the correct URL (i.e., `/owners/{ownerId}`).

6. **Handling of Null Owner Object:**
   - Given a null `Owner` object, when the `processCreationForm` method is invoked, then it should handle the null object appropriately, potentially returning an error or exception.

7. **Idempotency Check:**
   - Given a valid `Owner` object with no binding errors, when the `processCreationForm` method is invoked multiple times with the same data, then it should verify that multiple submissions do not create duplicate entries.

8. **Form Submission with Valid but Edge Case Data:**
   - Given an `Owner` object with edge case data (e.g., extremely long names, special characters), when the `processCreationForm` method is invoked, then it should verify that the data is handled correctly and saved if it meets business rules.

9. **Validation of Owner ID after Save:**
   - Given a valid `Owner` object with no binding errors, when the `processCreationForm` method is invoked and the owner is saved, then it should verify that the owner has been assigned a non-null and valid ID.

10. **Form Submission with Partial Data:**
    - Given an `Owner` object with only some required fields filled out, when the `processCreationForm` method is invoked, then it should verify that binding errors are generated and the user is prompted to complete the required fields.

11. **Form Submission with BindingResult Manipulation:**
    - Given an `Owner` object and a `BindingResult` that has been manipulated to include errors that do not correspond to the actual state of the `Owner` object, when the `processCreationForm` is invoked, then it should verify that the method behaves as expected in the presence of artificially introduced errors.

12. **Concurrent Submissions:**
    - Given multiple concurrent submissions of valid `Owner` objects, when the `processCreationForm` method is invoked, then it should verify that the system correctly handles concurrent saves and maintains data integrity.

Each of these scenarios would need to be fleshed out with more detailed steps and expectations if they were to be turned into actual test cases. These scenarios are meant to guide the development of test cases that cover the different paths through the `processCreationForm` method.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class OwnerController_processCreationForm_198f8f2cdf_Test {

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	private OwnerController ownerController;

	@Mock
	private OwnerRepository owners;

	@Mock
	private BindingResult bindingResult;

	@BeforeEach
	void setup() {
		MockitoAnnotations.openMocks(this);
		ownerController = new OwnerController(owners);
	}

	@Test
	public void testProcessCreationFormSuccess() {
		Owner owner = new Owner();
		owner.setId(1);
		when(bindingResult.hasErrors()).thenReturn(false);

		String viewName = ownerController.processCreationForm(owner, bindingResult);

		verify(owners, times(1)).save(owner);
		assertEquals("redirect:/owners/1", viewName);
	}

	@Test
	public void testProcessCreationFormHasErrors() {
		Owner owner = new Owner();
		when(bindingResult.hasErrors()).thenReturn(true);

		String viewName = ownerController.processCreationForm(owner, bindingResult);

		verify(owners, never()).save(any(Owner.class));
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
	}

	@Test
    public void testProcessCreationFormWithNullOwner() {
        when(bindingResult.hasErrors()).thenReturn(false);

        Exception exception = assertThrows(NullPointerException.class, () ->
                ownerController.processCreationForm(null, bindingResult));

        assertEquals("Cannot invoke \"org.springframework.samples.petclinic.owner.Owner.getId()\" because \"owner\" is null", exception.getMessage());
    }

	@Test
	public void testProcessCreationFormWithBindingResultManipulation() {
		Owner owner = new Owner();
		owner.setId(1);
		when(bindingResult.hasErrors()).thenReturn(true);
		bindingResult.addError(new ObjectError("owner", "Forced error"));

		String viewName = ownerController.processCreationForm(owner, bindingResult);

		verify(owners, never()).save(owner);
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
	}

}
