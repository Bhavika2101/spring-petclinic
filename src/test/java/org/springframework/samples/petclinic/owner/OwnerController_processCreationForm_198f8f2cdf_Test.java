/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `processCreationForm` method, we need to consider the method's responsibilities and how it should behave under different circumstances. Below are some test scenarios that should be covered:

1. **Validation Success Scenario:**
   - Given that the `owner` object has all the required fields correctly filled in (passes validation),
   - When the `processCreationForm` method is called,
   - Then the method should save the owner using the `owners.save(owner)` method and
   - It should redirect to the owner's details page with the correct owner ID.

2. **Validation Failure Scenario:**
   - Given that the `owner` object has missing or incorrectly filled fields (fails validation),
   - When the `processCreationForm` method is called,
   - Then the method should not save the owner,
   - And it should return the view name for the owner creation or update form for correction.

3. **Owner ID in Redirect Path:**
   - Given that the `owner` object passes validation and is saved,
   - When the `processCreationForm` method is called,
   - Then the redirect path should include the ID of the newly saved owner,
   - And the ID in the redirect path should match the ID of the owner after it is saved.

4. **Persistence Mechanism Called:**
   - Given that the `owner` object passes validation,
   - When the `processCreationForm` method is called,
   - Then the `owners.save(owner)` method should be called exactly once to persist the owner.

5. **Form Error Handling:**
   - Given that the `BindingResult` contains errors,
   - When the `processCreationForm` method is called,
   - Then the method should not attempt to save the owner,
   - And it should return the correct view for displaying the form again with validation errors.

6. **Correct View on Validation Errors:**
   - Given that the `BindingResult` has errors,
   - When the `processCreationForm` method is called,
   - Then the method should return the name of the view used for creating or updating an owner.

7. **No Side Effects on Validation Errors:**
   - Given that the `owner` object fails validation,
   - When the `processCreationForm` method is called,
   - Then no other operations (like database updates, API calls, etc.) should be performed besides returning the view name.

8. **Redirect Path Integrity:**
   - Given that the `owner` object is successfully saved,
   - When the `processCreationForm` method is called,
   - Then the redirect path should be properly constructed to prevent any URL manipulation vulnerabilities.

9. **Handling of Concurrent Saves:**
   - Given that multiple requests are made to save different `owner` objects that pass validation,
   - When the `processCreationForm` method is called concurrently,
   - Then each owner should be saved without interference and the redirects should go to the correct individual owner pages.

10. **Edge Cases:**
    - Test with an `owner` object that has boundary edge cases for validation (e.g., maximum field lengths, special characters, etc.),
    - Ensure that the method still behaves appropriately, either saving the owner or returning validation errors.

These scenarios cover various aspects of the method's functionality, including validation, persistence, and proper response handling. Test code would need to be written to exercise these scenarios and assert the expected outcomes.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;

public class OwnerController_processCreationForm_198f8f2cdf_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testProcessCreationFormSuccess() {
        Owner owner = new Owner();
        owner.setId(1);
        BindingResult result = new BeanPropertyBindingResult(owner, "owner");

        when(owners.save(any(Owner.class))).thenReturn(null);

        String view = ownerController.processCreationForm(owner, result);

        verify(owners, times(1)).save(owner);
        assertEquals("redirect:/owners/1", view);
    }

    @Test
    public void testProcessCreationFormHasErrors() {
        Owner owner = new Owner();
        owner.setId(1);
        BindingResult result = new BeanPropertyBindingResult(owner, "owner");
        result.reject("error");

        String view = ownerController.processCreationForm(owner, result);

        verify(owners, never()).save(any(Owner.class));
        assertEquals("owners/createOrUpdateOwnerForm", view);
    }
}
