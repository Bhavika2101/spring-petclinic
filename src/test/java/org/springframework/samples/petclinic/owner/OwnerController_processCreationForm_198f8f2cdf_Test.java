/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1: Valid Owner Creation**
- Given a valid Owner object with all required fields populated correctly,
- When the processCreationForm() method is called,
- Then the method should save the Owner object to the database and redirect to the owner details page.

**Test Scenario 2: Invalid Owner Creation**
- Given an Owner object with missing or invalid data,
- When the processCreationForm() method is called,
- Then the method should return to the owner creation form with appropriate error messages displayed.

**Test Scenario 3: Null Owner Object**
- Given a null Owner object,
- When the processCreationForm() method is called,
- Then the method should throw an IllegalArgumentException.

**Test Scenario 4: Binding Result Errors**
- Given a valid Owner object but with binding result errors (e.g., type mismatch),
- When the processCreationForm() method is called,
- Then the method should return to the owner creation form with appropriate error messages displayed.

**Test Scenario 5: Database Save Failure**
- Given a valid Owner object,
- When the save() method of the owners repository throws an exception,
- Then the processCreationForm() method should handle the exception and display an appropriate error message.

**Test Scenario 6: Redirect to Owner Details Page**
- Given a valid Owner object that is saved successfully,
- When the processCreationForm() method is called,
- Then the method should redirect to the owner details page with the correct owner ID.
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

@WebMvcTest(OwnerController.class)
public class OwnerController_processCreationForm_198f8f2cdf_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OwnerRepository owners;

    @Test
    void testValidOwnerCreation() throws Exception {
        // Given a valid Owner object with all required fields populated correctly
        Owner owner = new Owner();
        owner.setFirstName("John");
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("0123456789");

        // When the processCreationForm() method is called
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/new")
                .flashAttr("owner", owner))
                .andExpect(MockMvcResultMatchers.status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/owners/" + owner.getId()));

        // Then the method should save the Owner object to the database and redirect to the owner details page
        verify(owners).save(owner);
    }

    @Test
    void testInvalidOwnerCreation() throws Exception {
        // Given an Owner object with missing or invalid data
        Owner owner = new Owner();
        owner.setFirstName(""); // Missing first name
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("0123456789");

        // When the processCreationForm() method is called
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/new")
                .flashAttr("owner", owner))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.view().name(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM))
                .andExpect(MockMvcResultMatchers.model().attributeHasFieldErrors("owner", "firstName"));

        // Then the method should return to the owner creation form with appropriate error messages displayed
        verify(owners, never()).save(owner);
    }

    @Test
    void testNullOwnerObject() throws Exception {
        // Given a null Owner object
        Owner owner = null;

        // When the processCreationForm() method is called
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/new")
                .flashAttr("owner", owner))
                .andExpect(MockMvcResultMatchers.status().is5xxServerError());

        // Then the method should throw an IllegalArgumentException
        verify(owners, never()).save(owner);
    }

    @Test
    void testBindingResultErrors() throws Exception {
        // Given a valid Owner object but with binding result errors (e.g., type mismatch)
        Owner owner = new Owner();
        owner.setFirstName("John");
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("0123456789");

        BindingResult bindingResult = mock(BindingResult.class);
        when(bindingResult.hasErrors()).thenReturn(true);

        // When the processCreationForm() method is called
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/new")
                .flashAttr("owner", owner)
                .flashAttr("org.springframework.validation.BindingResult.owner", bindingResult))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.view().name(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM));

        // Then the method should return to the owner creation form with appropriate error messages displayed
        verify(owners, never()).save(owner);
    }

    @Test
    void testDatabaseSaveFailure() throws Exception {
        // Given a valid Owner object
        Owner owner = new Owner();
        owner.setFirstName("John");
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("0123456789");

        // When the save() method of the owners repository throws an exception
        when(owners.save(any(Owner.class))).thenThrow(new RuntimeException());

        // Then the processCreationForm() method should handle the exception and display an appropriate error message
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/new")
                .flashAttr("owner", owner))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.view().name(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM))
                .andExpect(MockMvcResultMatchers.model().attributeHasFieldErrors("owner", "global"));
    }

    @Test
    void testRedirectToOwnerDetailsPage() throws Exception {
        // Given a valid Owner object that is saved successfully
        Owner owner = new Owner();
        owner.setFirstName("John");
        owner.setLastName("Doe");
        owner.setAddress("123 Main Street");
        owner.setCity("Anytown");
        owner.setTelephone("0123456789");

        // When the processCreationForm() method is called
        when(owners.save(any(Owner.class))).thenReturn(owner);
        mockMvc.perform(MockMvcRequestBuilders.post("/owners/new")
                .flashAttr("owner", owner))
                .andExpect(MockMvcResultMatchers.status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/owners/" + owner.getId()));

        // Then the method should redirect to the owner details page with the correct owner ID
        verify(owners).save(owner);
    }
}
