/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenarios:**

**1. Valid owner ID:**
   - Test with a valid owner ID that exists in the database.
   - Expected outcome: The method should return a ModelAndView object with the owner details and the view name "owners/ownerDetails".

**2. Invalid owner ID:**
   - Test with an invalid owner ID that does not exist in the database.
   - Expected outcome: The method should return a ModelAndView object with a null owner and the view name "owners/ownerDetails".

**3. Null owner ID:**
   - Test with a null owner ID.
   - Expected outcome: The method should throw a NullPointerException.

**4. Empty owner ID:**
   - Test with an empty owner ID ("").
   - Expected outcome: The method should throw a NumberFormatException.

**5. Negative owner ID:**
   - Test with a negative owner ID (-1).
   - Expected outcome: The method should throw a NumberFormatException.

**6. Owner not found:**
   - Mock the findById method of the owners repository to return null.
   - Test with a valid owner ID that does not exist in the database.
   - Expected outcome: The method should return a ModelAndView object with a null owner and the view name "owners/ownerDetails".

**7. Exception handling:**
   - Mock the findById method of the owners repository to throw an exception.
   - Test with a valid owner ID.
   - Expected outcome: The method should catch the exception and return a ModelAndView object with a null owner and the view name "owners/ownerDetails".
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

@WebMvcTest(OwnerController.class)
class OwnerController_showOwner_db2a323b89_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OwnerRepository owners;

    @ParameterizedTest
    @CsvSource({
            "1",
            "2",
            "3"
    })
    void testValidOwnerId(int ownerId) throws Exception {
        Owner owner = new Owner();
        owner.setId(ownerId);
        when(owners.findById(anyInt())).thenReturn(owner);

        ModelAndView mav = mockMvc.perform(get("/owners/" + ownerId))
                .andReturn().getModelAndView();

        assertEquals(owner, mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    void testInvalidOwnerId() throws Exception {
        when(owners.findById(anyInt())).thenReturn(null);

        ModelAndView mav = mockMvc.perform(get("/owners/100"))
                .andReturn().getModelAndView();

        assertEquals(null, mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    void testNullOwnerId() {
        assertThrows(NullPointerException.class, () -> {
            mockMvc.perform(get("/owners/null"));
        });
    }

    @Test
    void testEmptyOwnerId() {
        assertThrows(NumberFormatException.class, () -> {
            mockMvc.perform(get("/owners/"));
        });
    }

    @Test
    void testNegativeOwnerId() {
        assertThrows(NumberFormatException.class, () -> {
            mockMvc.perform(get("/owners/-1"));
        });
    }

    @Test
    void testOwnerNotFound() throws Exception {
        when(owners.findById(anyInt())).thenReturn(null);

        ModelAndView mav = mockMvc.perform(get("/owners/100"))
                .andReturn().getModelAndView();

        assertEquals(null, mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    void testExceptionHandling() throws Exception {
        when(owners.findById(anyInt())).thenThrow(new RuntimeException());

        ModelAndView mav = mockMvc.perform(get("/owners/1"))
                .andReturn().getModelAndView();

        assertEquals(null, mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }
}
