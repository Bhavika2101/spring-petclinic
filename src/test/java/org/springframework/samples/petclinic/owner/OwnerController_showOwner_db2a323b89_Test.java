/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario: Valid ownerId**
   - Description: Test the scenario when a valid ownerId is passed to the function. The ownerId exists in the database.
   - Expected Result: The function should return a ModelAndView object with the correct owner details.

2. **Scenario: Invalid ownerId**
   - Description: Test the scenario when an invalid ownerId is passed to the function. The ownerId does not exist in the database.
   - Expected Result: The function should handle this situation appropriately. It could either return a ModelAndView with some kind of error message or a default owner object.

3. **Scenario: OwnerId is a negative number**
   - Description: Test the scenario when the ownerId passed to the function is a negative number.
   - Expected Result: The function should handle this situation appropriately. It could either return a ModelAndView with some kind of error message or a default owner object.

4. **Scenario: OwnerId is zero**
   - Description: Test the scenario when the ownerId passed to the function is zero.
   - Expected Result: The function should handle this situation appropriately. It could either return a ModelAndView with some kind of error message or a default owner object.

5. **Scenario: OwnerId is a large number**
   - Description: Test the scenario when the ownerId passed to the function is a very large number, beyond the maximum possible id in the database.
   - Expected Result: The function should handle this situation appropriately. It could either return a ModelAndView with some kind of error message or a default owner object.

6. **Scenario: Database connection failure**
   - Description: Test the scenario when the function is unable to connect to the database to retrieve the owner details.
   - Expected Result: The function should handle this situation appropriately. It could either return a ModelAndView with some kind of error message or a default owner object.
   
7. **Scenario: Null ownerId**
   - Description: Test the scenario where the ownerId passed to the function is null.
   - Expected Result: The function should handle this situation appropriately. It could either return a ModelAndView with some kind of error message or a default owner object.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.server.ResponseStatusException;

public class OwnerController_showOwner_db2a323b89_Test {

    private OwnerController ownerController;
    private OwnerRepository owners;

    @BeforeEach
    public void setup() {
        owners = mock(OwnerRepository.class);
        ownerController = new OwnerController(owners);
    }

    @Test
    public void testShowOwner_ValidOwnerId() {
        Owner owner = new Owner();
        owner.setId(1);
        when(owners.findById(1)).thenReturn(owner);
        
        ModelAndView mav = ownerController.showOwner(1);
        
        assertNotNull(mav);
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertEquals(owner, mav.getModel().get("owner"));
    }

    @Test
    public void testShowOwner_InvalidOwnerId() {
        when(owners.findById(-1)).thenThrow(new ResponseStatusException(HttpStatus.NOT_FOUND));
        
        assertThrows(ResponseStatusException.class, () -> {
            ownerController.showOwner(-1);
        });
    }

    @Test
    public void testShowOwner_OwnerIdZero() {
        when(owners.findById(0)).thenThrow(new ResponseStatusException(HttpStatus.NOT_FOUND));
        
        assertThrows(ResponseStatusException.class, () -> {
            ownerController.showOwner(0);
        });
    }

    @Test
    public void testShowOwner_LargeOwnerId() {
        when(owners.findById(Integer.MAX_VALUE)).thenThrow(new ResponseStatusException(HttpStatus.NOT_FOUND));
        
        assertThrows(ResponseStatusException.class, () -> {
            ownerController.showOwner(Integer.MAX_VALUE);
        });
    }

    @Test
    public void testShowOwner_DatabaseConnectionFailure() {
        when(owners.findById(anyInt())).thenThrow(new RuntimeException("Database connection failure"));
        
        assertThrows(RuntimeException.class, () -> {
            ownerController.showOwner(1);
        });
    }

    @Test
    public void testShowOwner_NullOwnerId() {
        assertThrows(NullPointerException.class, () -> {
            ownerController.showOwner(null);
        });
    }
}
