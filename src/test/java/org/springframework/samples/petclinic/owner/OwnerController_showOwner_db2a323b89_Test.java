/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `showOwner` method, you could consider the following test scenarios:

1. **Valid Owner ID Provided:**
   - Given an existing owner ID is provided, when the `showOwner` method is called, then it should return a `ModelAndView` instance with the expected owner details.
   - Verify that the view name is set correctly to "owners/ownerDetails".
   - Verify that the model contains an attribute that represents the owner with the given ID.

2. **Owner ID Does Not Exist:**
   - Given an owner ID that does not correspond to any existing owner, when the `showOwner` method is called, then it should handle the situation appropriately (e.g., by showing an error message or redirecting to a generic error page).
   - Verify that the model does not contain an owner attribute or contains an error message indicating the owner was not found.

3. **Invalid Owner ID Format:**
   - Given an owner ID with an invalid format (e.g., non-numeric characters), when the `showOwner` method is called, then it should handle the format error appropriately.
   - Verify that the method returns the correct response for invalid input (e.g., HTTP 400 Bad Request).

4. **Boundary Conditions:**
   - Test with the minimum and maximum integer values for `ownerId` to ensure that the method handles these edge cases without error.
   - Test with a zero or negative `ownerId` to verify how the method responds to such cases.

5. **Database/Repository Interaction:**
   - Verify that the `owners.findById` method is called exactly once with the correct `ownerId`.
   - Test the behavior when the `owners.findById` method throws an exception (e.g., database connection issue) to ensure the method handles it gracefully.

6. **ModelAndView Object Properties:**
   - Confirm that the `ModelAndView` object has the correct model attributes set.
   - Validate that the `ModelAndView` object's model map contains only the necessary data and no additional, unrelated data.

7. **Web Layer Integration:**
   - If applicable, test the integration with the web layer by simulating HTTP requests and asserting the responses.
   - Verify the correct HTTP status code is returned (e.g., HTTP 200 for a successful request, HTTP 404 for a not found owner).

8. **Security and Permissions:**
   - If there are security constraints on which users can view owner details, verify that the method enforces these constraints correctly.
   - Test with authenticated users who have permission to view the owner details and with users who do not have the necessary permissions.

9. **Concurrent Access:**
   - Simulate concurrent requests to the `showOwner` method to ensure that the method behaves correctly under concurrent load and that there are no race conditions or shared state issues.

10. **Performance Expectations:**
    - If there are performance requirements, design scenarios to measure the response time and resource usage of the `showOwner` method to ensure it meets the expectations.

Remember to cover both positive and negative test cases, and consider using a mock framework (e.g., Mockito) to isolate the method from external dependencies like the `owners` repository when writing unit tests.
*/
package org.springframework.samples.petclinic.owner;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.ModelAndView;

@ExtendWith(MockitoExtension.class)
public class OwnerController_showOwner_db2a323b89_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    private Owner owner;

    @BeforeEach
    void setup() {
        owner = new Owner();
        owner.setId(1);
        owner.setFirstName("John");
        owner.setLastName("Doe");
        owner.setAddress("123 Street");
        owner.setCity("Anytown");
        owner.setTelephone("1234567890");
    }

    @Test
    void testShowOwner_ValidOwnerId() {
        when(owners.findById(anyInt())).thenReturn(owner);
        ModelAndView mav = ownerController.showOwner(owner.getId());
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertEquals(owner, mav.getModel().get("owner"));
    }

    @Test
    void testShowOwner_OwnerIdDoesNotExist() {
        when(owners.findById(anyInt())).thenReturn(null);
        ModelAndView mav = ownerController.showOwner(999);
        assertTrue(mav.getModel().isEmpty());
    }
}
