/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when valid ownerId is provided.
   - Given the ownerId is valid.
   - When the function showOwner is called with this ownerId.
   - Then the function should return the correct owner details in the ModelAndView.

2. Scenario: Test when ownerId does not exist in the system.
   - Given the ownerId does not exist in the system.
   - When the function showOwner is called with this ownerId.
   - Then the function should handle this gracefully, possibly returning an empty ModelAndView or an error message.

3. Scenario: Test when ownerId is negative.
   - Given the ownerId is a negative number.
   - When the function showOwner is called with this ownerId.
   - Then the function should handle this gracefully, possibly returning an error message as negative id is invalid.

4. Scenario: Test when ownerId is zero.
   - Given the ownerId is zero.
   - When the function showOwner is called with this ownerId.
   - Then the function should handle this gracefully, possibly returning an error message as id zero is often reserved or invalid.

5. Scenario: Test the function with maximum possible ownerId.
   - Given the ownerId is the maximum possible integer.
   - When the function showOwner is called with this ownerId.
   - Then the function should handle this gracefully, not causing any overflow or other errors.

6. Scenario: Test the function with minimum possible ownerId.
   - Given the ownerId is the minimum possible integer.
   - When the function showOwner is called with this ownerId.
   - Then the function should handle this gracefully, not causing any underflow or other errors.

7. Scenario: Test the function when the database or owners service is down.
   - Given the database or owners service is down.
   - When the function showOwner is called.
   - Then the function should handle this gracefully, returning an appropriate error message.

8. Scenario: Test the function when there's a delay in response from the owners service.
   - Given there's a significant delay in response from the owners service.
   - When the function showOwner is called.
   - Then the function should handle this gracefully, possibly returning a timeout error message.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.ModelAndView;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_showOwner_db2a323b89_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @Mock
    private Owner owner;

    @BeforeEach
    public void setup() {
        when(owners.findById(anyInt())).thenReturn(owner);
    }

    @Test
    public void testShowOwnerValidId() {
        int ownerId = 1;
        ModelAndView mav = ownerController.showOwner(ownerId);
        verify(owners, times(1)).findById(ownerId);
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertEquals(owner, mav.getModel().get("owner"));
    }

    @Test
    public void testShowOwnerInvalidId() {
        int ownerId = -1;
        ModelAndView mav = ownerController.showOwner(ownerId);
        verify(owners, times(1)).findById(ownerId);
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertNull(mav.getModel().get("owner"));
    }

    @Test
    public void testShowOwnerZeroId() {
        int ownerId = 0;
        ModelAndView mav = ownerController.showOwner(ownerId);
        verify(owners, times(1)).findById(ownerId);
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertNull(mav.getModel().get("owner"));
    }

    @Test
    public void testShowOwnerMaxIntId() {
        int ownerId = Integer.MAX_VALUE;
        ModelAndView mav = ownerController.showOwner(ownerId);
        verify(owners, times(1)).findById(ownerId);
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertNull(mav.getModel().get("owner"));
    }

    @Test
    public void testShowOwnerMinIntId() {
        int ownerId = Integer.MIN_VALUE;
        ModelAndView mav = ownerController.showOwner(ownerId);
        verify(owners, times(1)).findById(ownerId);
        assertEquals("owners/ownerDetails", mav.getViewName());
        assertNull(mav.getModel().get("owner"));
    }

    @Test
    public void testShowOwnerDatabaseDown() {
        int ownerId = 1;
        when(owners.findById(anyInt())).thenThrow(new RuntimeException("Database down"));
        assertThrows(RuntimeException.class, () -> ownerController.showOwner(ownerId));
    }

    @Test
    public void testShowOwnerServiceDelay() {
        int ownerId = 1;
        when(owners.findById(anyInt())).thenAnswer(invocation -> {
            Thread.sleep(10000);
            return owner;
        });
        assertTimeout(ofSeconds(5), () -> ownerController.showOwner(ownerId));
    }
}
