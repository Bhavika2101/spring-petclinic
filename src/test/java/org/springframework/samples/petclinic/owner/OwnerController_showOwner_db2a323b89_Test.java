/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check the behavior when a valid ownerId is provided. 
   Description: Pass a valid ownerId to the function and validate that the correct owner details are returned in the ModelAndView object.

2. Test Scenario: Check the behavior when an invalid ownerId is provided.
   Description: Pass an invalid ownerId (i.e., an id that doesn't exist in the database) to the function and check how the function handles this case.

3. Test Scenario: Check the behavior when a negative ownerId is provided.
   Description: Pass a negative ownerId to the function. The function should handle this invalid input appropriately, possibly by throwing an exception or returning an error message.

4. Test Scenario: Check the behavior when zero is provided as ownerId.
   Description: Pass zero as ownerId to the function. Since zero is usually not a valid id, the function should handle this case properly.

5. Test Scenario: Check the behavior when the ownerId is of the maximum possible value.
   Description: Pass the maximum possible value of an integer as ownerId. The function should be able to handle large numbers without crashing or slowing down.

6. Test Scenario: Check the behavior when the ownerId is of the minimum possible value.
   Description: Pass the minimum possible value of an integer as ownerId. The function should be able to handle this case without any issues.

7. Test Scenario: Check the behavior when the ownerId is null.
   Description: Pass null as ownerId to the function. The function should handle this case appropriately, possibly by throwing an exception or returning an error message.

8. Test Scenario: Check the behavior when the ownerId is a non-integer value.
   Description: Pass a non-integer value as ownerId. The function should handle this case appropriately, possibly by throwing an exception or returning an error message.

9. Test Scenario: Check the behavior when the ownerId is an empty string.
   Description: Pass an empty string as ownerId. The function should handle this case appropriately, possibly by throwing an exception or returning an error message.

10. Test Scenario: Check the behavior when the ownerId is a string of white spaces.
    Description: Pass a string of white spaces as ownerId. The function should handle this case appropriately, possibly by throwing an exception or returning an error message.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.ModelAndView;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_showOwner_db2a323b89_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @Test
    public void testShowOwnerWithValidId() {
        Owner owner = new Owner();
        when(owners.findById(1)).thenReturn(owner);

        ModelAndView mav = ownerController.showOwner(1);

        assertSame(owner, mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    public void testShowOwnerWithInvalidId() {
        when(owners.findById(-1)).thenReturn(null);

        ModelAndView mav = ownerController.showOwner(-1);

        assertNull(mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    public void testShowOwnerWithZeroId() {
        when(owners.findById(0)).thenReturn(null);

        ModelAndView mav = ownerController.showOwner(0);

        assertNull(mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    public void testShowOwnerWithMaxValueId() {
        when(owners.findById(Integer.MAX_VALUE)).thenReturn(null);

        ModelAndView mav = ownerController.showOwner(Integer.MAX_VALUE);

        assertNull(mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }

    @Test
    public void testShowOwnerWithMinValueId() {
        when(owners.findById(Integer.MIN_VALUE)).thenReturn(null);

        ModelAndView mav = ownerController.showOwner(Integer.MIN_VALUE);

        assertNull(mav.getModel().get("owner"));
        assertEquals("owners/ownerDetails", mav.getViewName());
    }
}
