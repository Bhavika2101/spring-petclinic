/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `showOwner` method:

1. **Test with a valid ownerId**:
   - Scenario: The `showOwner` method is called with a valid ownerId that exists in the database.
   - Expected Result: The method should return a ModelAndView object with the view name "owners/ownerDetails" and the owner object as a model attribute.

2. **Test with an invalid ownerId**:
   - Scenario: The `showOwner` method is called with an invalid ownerId that does not exist in the database.
   - Expected Result: The method should return a ModelAndView object with the view name "owners/ownerDetails" and the owner object as a model attribute. However, the owner object should be null because there is no owner with the given ownerId.

3. **Test with a null ownerId**:
   - Scenario: The `showOwner` method is called with a null ownerId.
   - Expected Result: The method should throw an exception because the ownerId is null.

4. **Test with a negative ownerId**:
   - Scenario: The `showOwner` method is called with a negative ownerId.
   - Expected Result: The method should throw an exception because the ownerId is negative.

5. **Test with a zero ownerId**:
   - Scenario: The `showOwner` method is called with a zero ownerId.
   - Expected Result: The method should throw an exception because the ownerId is zero.

Please note that these test scenarios assume that the `findById` method of the `owners` object is correctly implemented to retrieve the owner object based on the ownerId. If the `findById` method is not correctly implemented, the test scenarios may not pass.

*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.ModelAndView;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class OwnerController_showOwner_db2a323b89_Test {

    @Mock
    private Owners owners;

    @InjectMocks
    private OwnerController ownerController;

    @Test
    public void testShowOwner_success() {
        // Arrange
        int ownerId = 1;
        Owner owner = new Owner();
        owner.setId(ownerId);
        when(owners.findById(ownerId)).thenReturn(owner);

        // Act
        ModelAndView result = ownerController.showOwner(ownerId);

        // Assert
        assertEquals("owners/ownerDetails", result.getViewName());
        assertEquals(owner, result.getModel().get("owner"));
    }

    @Test
    public void testShowOwner_notFound() {
        // Arrange
        int ownerId = 1;
        when(owners.findById(ownerId)).thenReturn(null);

        // Act & Assert
        ModelAndView result = ownerController.showOwner(ownerId);

        // Assert
        assertEquals("owners/ownerNotFound", result.getViewName());
    }
}
