/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

Test Scenarios:

1. Test if the PetController is initialized correctly with a non-null OwnerRepository.
2. Test if the PetController fails to initialize when a null OwnerRepository is passed.
3. Test if the correct view is returned when a GET request is made.
4. Test if the correct model attribute is returned when a GET request is made.
5. Test if the correct view is returned when a POST request is made.
6. Test if the correct model attribute is returned when a POST request is made.
7. Test if the correct path variable is returned when a GET request is made with a specific path variable.
8. Test if the correct binding result is returned when a POST request is made with a specific binding result.
9. Test if the correct binding result is returned when a GET request is made with a specific binding result.
10. Test if the correct model map is returned when a GET request is made with a specific model map.
11. Test if the correct model map is returned when a POST request is made with a specific model map.
12. Test if the correct web data binder is returned when the InitBinder annotation is used.
13. Test if the correct model attribute is returned when the ModelAttribute annotation is used.
14. Test if the correct path variable is returned when the PathVariable annotation is used.
15. Test if the correct validation is performed when the Valid annotation is used.
16. Test if the correct request mapping is performed when the RequestMapping annotation is used.
17. Test if the correct data is returned when the StringUtils utility is used.
18. Test if the correct date is returned when the LocalDate class is used.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.ui.ModelMap;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PetController_PetController_2a2536f183_Test {

    private PetController petController;
    private OwnerRepository owners;

    @BeforeEach
    void setUp() {
        owners = Mockito.mock(OwnerRepository.class);
        petController = new PetController(owners);
    }

    @Test
    void testConstructorWithNonNullOwnerRepository() {
        assertNotNull(petController);
    }

    @Test
    void testConstructorWithNullOwnerRepository() {
        assertThrows(IllegalArgumentException.class, () -> new PetController(null));
    }

    @Test
    void testFindOwner() {
        Owner owner = new Owner();
        owner.setId(1);
        when(owners.findById(1)).thenReturn(owner);
        assertEquals(owner, petController.findOwner(1));
    }

    @Test
    void testFindOwnerWithInvalidId() {
        when(owners.findById(1)).thenReturn(null);
        assertThrows(IllegalArgumentException.class, () -> petController.findOwner(1));
    }

    @Test
    void testFindPet() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setId(1);
        owner.addPet(pet);
        when(owners.findById(1)).thenReturn(owner);
        assertEquals(pet, petController.findPet(1, 1));
    }

    @Test
    void testFindPetWithInvalidOwnerId() {
        when(owners.findById(1)).thenReturn(null);
        assertThrows(IllegalArgumentException.class, () -> petController.findPet(1, 1));
    }

    @Test
    void testFindPetWithNullPetId() {
        Owner owner = new Owner();
        when(owners.findById(1)).thenReturn(owner);
        assertNotNull(petController.findPet(1, null));
    }

}
