/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenarios for findOwner method of OwnerController**

**1. Positive Test Case - Owner Found**
   - Given an existing owner with a valid ownerId,
   - When the findOwner method is called with the ownerId,
   - Then the method should return the corresponding Owner object.

**2. Negative Test Case - Owner Not Found**
   - Given an invalid or non-existent ownerId,
   - When the findOwner method is called with the ownerId,
   - Then the method should return a new, empty Owner object.

**3. Null Test Case - Null OwnerId**
   - Given a null ownerId,
   - When the findOwner method is called with the null ownerId,
   - Then the method should return a new, empty Owner object.

**4. Boundary Test Case - Maximum OwnerId**
   - Given the maximum possible ownerId value,
   - When the findOwner method is called with the maximum ownerId,
   - Then the method should return the corresponding Owner object if it exists, or a new, empty Owner object if the ownerId is invalid.

**5. Boundary Test Case - Minimum OwnerId**
   - Given the minimum possible ownerId value,
   - When the findOwner method is called with the minimum ownerId,
   - Then the method should return the corresponding Owner object if it exists, or a new, empty Owner object if the ownerId is invalid.
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(OwnerController.class)
class OwnerController_findOwner_66dfd5ad88_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OwnerRepository owners;

    @Test
    void testPositive_OwnerFound() throws Exception {
        // Given an existing owner with a valid ownerId
        int ownerId = 1;
        Owner owner = new Owner();
        owner.setId(ownerId);
        when(owners.findById(ownerId)).thenReturn(owner);

        // When the findOwner method is called with the ownerId
        mockMvc.perform(get("/owners/" + ownerId))

                // Then the method should return the corresponding Owner object
                .andExpect(status().isOk());
    }

    @Test
    void testNegative_OwnerNotFound() throws Exception {
        // Given an invalid or non-existent ownerId
        int ownerId = -1;
        when(owners.findById(ownerId)).thenReturn(null);

        // When the findOwner method is called with the ownerId
        mockMvc.perform(get("/owners/" + ownerId))

                // Then the method should return a new, empty Owner object
                .andExpect(status().isOk());
    }

    @Test
    void testNull_NullOwnerId() throws Exception {
        // Given a null ownerId
        Integer ownerId = null;

        // When the findOwner method is called with the null ownerId
        mockMvc.perform(get("/owners/" + ownerId))

                // Then the method should return a new, empty Owner object
                .andExpect(status().isOk());
    }

    @ParameterizedTest
    @ValueSource(ints = {Integer.MAX_VALUE, Integer.MIN_VALUE})
    void testBoundary_MaximumAndMinimumOwnerId(int ownerId) throws Exception {
        // Given the maximum or minimum possible ownerId value
        when(owners.findById(ownerId)).thenReturn(ownerId == 1 ? new Owner() : null);

        // When the findOwner method is called with the maximum or minimum ownerId
        mockMvc.perform(get("/owners/" + ownerId))

                // Then the method should return the corresponding Owner object if it exists, or a new, empty Owner object if the ownerId is invalid
                .andExpect(status().isOk());
    }
}
