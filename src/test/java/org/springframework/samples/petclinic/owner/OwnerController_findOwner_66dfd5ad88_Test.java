/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Null Owner ID
   Given a null owner ID, the function should return a new Owner instance. This needs to be tested to ensure that the function handles null values as expected.

2. Scenario: Valid Owner ID
   Given a valid owner ID, the function should return the owner with the matching ID. The returned owner's details should match the details stored in the database.

3. Scenario: Non-existent Owner ID
   Given an owner ID that does not exist in the database, the function's behavior should be tested. Depending on the implementation of the `findById` method, it might return null or throw an exception.

4. Scenario: Negative Owner ID
   Given a negative owner ID, the function's behavior should be tested. Depending on the implementation of the `findById` method, it might return null, a new Owner instance, or throw an exception.

5. Scenario: Owner ID is Zero
   Given an owner ID of zero, the function's behavior should be tested. Depending on the implementation of the `findById` method, it might return null, a new Owner instance, or throw an exception.

6. Scenario: Owner ID of Type Other than Integer
   Given an owner ID of a type other than Integer, the function's behavior should be tested. It might throw a type conversion error or handle the incorrect type in some other way.

7. Scenario: Large Owner ID
   Given a very large owner ID, the function's behavior should be tested. It might return null, a new Owner instance, or throw an exception, depending on the implementation of the `findById` method.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.samples.petclinic.owner.OwnerController;

@ExtendWith(MockitoExtension.class)
public class OwnerController_findOwner_66dfd5ad88_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @BeforeEach
    public void setup() {
        when(owners.findById(1)).thenReturn(new Owner());
    }

    @Test
    public void testFindOwner_NullId() {
        Owner owner = ownerController.findOwner(null);
        assertNotNull(owner);
    }

    @Test
    public void testFindOwner_ExistingId() {
        Owner owner = ownerController.findOwner(1);
        assertNotNull(owner);
    }

    // TODO: Additional test cases can be added here
}
