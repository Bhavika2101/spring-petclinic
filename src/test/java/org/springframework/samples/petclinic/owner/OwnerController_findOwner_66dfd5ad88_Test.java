/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `findOwner` method, we need to create test scenarios that cover various cases. Here are some potential scenarios that can be used to test the method:

1. **Owner ID is provided and exists in the system:**
   - Test that when a valid `ownerId` is provided, the method returns the correct `Owner` object.
   - Validate that the returned `Owner` has the same ID as the one requested.

2. **Owner ID is provided but does not exist in the system:**
   - Test that when a non-existent `ownerId` is provided, the method returns `null` or throws an appropriate exception (depending on the implementation of `this.owners.findById`).

3. **Owner ID is null:**
   - Test that when `ownerId` is `null`, the method returns a new instance of `Owner`.
   - Validate that the newly created `Owner` object has the default state (e.g., all fields are either `null`, `0`, `false`, or their respective default values).

4. **Owner ID is provided but is a negative number:**
   - Test that when a negative `ownerId` is provided, the method handles it appropriately (e.g., returns `null`, throws an exception, or treats it as non-existent ID).

5. **Owner ID is provided but is of an invalid type (e.g., String):**
   - Since the method signature defines `ownerId` as an `Integer`, this test scenario falls outside the scope of unit testing for the method itself and would be more relevant for testing the request mapping and URL pattern.

6. **Owner ID is the edge value of the Integer range (Integer.MAX_VALUE or Integer.MIN_VALUE):**
   - Test that when the `ownerId` is `Integer.MAX_VALUE` or `Integer.MIN_VALUE`, the method behaves as expected and the system can handle such edge cases.

7. **Concurrency Test:**
   - Test how the method behaves under concurrent access with valid, invalid, and `null` owner IDs. Ensure that the method is thread-safe if required.

8. **Performance Test:**
   - Test the performance of the method when retrieving an owner by ID, ensuring that the method performs within acceptable time limits under normal load.

9. **Integration Test with Database:**
   - Test the integration of the method with the actual database or data access layer to ensure that `this.owners.findById` interacts correctly with the database and retrieves the correct data.

10. **Test for Memory Leaks:**
    - Ensure that the method does not introduce any memory leaks, especially when returning new `Owner` instances.

11. **Security Test:**
    - If applicable, test that the method does not expose any sensitive information and adheres to security best practices (though this method itself does not seem to involve security concerns directly).

12. **Validation of Owner Object State:**
    - For the returned `Owner` object, validate that all expected fields are populated correctly and that no data corruption occurs during retrieval.

Remember, the actual implementation of `this.owners.findById` is crucial for determining the exact behavior when an `ownerId` is provided. It's also important to mock or stub out dependencies like `this.owners` to isolate the tests for the `findOwner` method.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.when;

public class OwnerController_findOwner_66dfd5ad88_Test {

    @Mock
    private OwnerRepository owners;

    private OwnerController ownerController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        ownerController = new OwnerController(owners);
    }

    @Test
    public void testFindOwner_WithExistingId() {
        // Arrange
        Integer ownerId = 1;
        Owner expectedOwner = new Owner();
        expectedOwner.setAddress("123 Street");
        expectedOwner.setCity("City");
        expectedOwner.setTelephone("1234567890");
        when(owners.findById(ownerId)).thenReturn(expectedOwner);

        // Act
        Owner actualOwner = ownerController.findOwner(ownerId);

        // Assert
        assertNotNull(actualOwner);
        assertEquals(expectedOwner.getAddress(), actualOwner.getAddress());
        assertEquals(expectedOwner.getCity(), actualOwner.getCity());
        assertEquals(expectedOwner.getTelephone(), actualOwner.getTelephone());
    }

    @Test
    public void testFindOwner_WithNonExistentId() {
        // Arrange
        Integer ownerId = 999;
        when(owners.findById(ownerId)).thenReturn(null);

        // Act
        Owner actualOwner = ownerController.findOwner(ownerId);

        // Assert
        assertNull(actualOwner);
    }

    @Test
    public void testFindOwner_WithNullId() {
        // Act
        Owner actualOwner = ownerController.findOwner(null);

        // Assert
        assertNotNull(actualOwner);
        assertNull(actualOwner.getAddress());
        assertNull(actualOwner.getCity());
        assertNull(actualOwner.getTelephone());
    }

    @Test
    public void testFindOwner_WithNegativeId() {
        // Arrange
        Integer ownerId = -1;
        when(owners.findById(ownerId)).thenReturn(null);

        // Act
        Owner actualOwner = ownerController.findOwner(ownerId);

        // Assert
        assertNull(actualOwner);
    }

    @Test
    public void testFindOwner_WithIntegerMaxValue() {
        // Arrange
        Integer ownerId = Integer.MAX_VALUE;
        Owner expectedOwner = new Owner();
        when(owners.findById(ownerId)).thenReturn(expectedOwner);

        // Act
        Owner actualOwner = ownerController.findOwner(ownerId);

        // Assert
        assertNotNull(actualOwner);
    }

    @Test
    public void testFindOwner_WithIntegerMinValue() {
        // Arrange
        Integer ownerId = Integer.MIN_VALUE;
        when(owners.findById(ownerId)).thenReturn(null);

        // Act
        Owner actualOwner = ownerController.findOwner(ownerId);

        // Assert
        assertNull(actualOwner);
    }
}
