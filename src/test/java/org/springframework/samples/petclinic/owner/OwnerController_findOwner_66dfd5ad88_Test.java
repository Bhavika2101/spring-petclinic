/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `findOwner` method:

1. **Test with a valid ownerId**:
   - Scenario: The method should return the owner with the given ownerId.
   - Expected Result: The method should return the owner with the given ownerId.

2. **Test with an invalid ownerId**:
   - Scenario: The method should return a new Owner object if the given ownerId is null.
   - Expected Result: The method should return a new Owner object.

3. **Test with a non-existing ownerId**:
   - Scenario: The method should return null if the given ownerId does not exist in the database.
   - Expected Result: The method should return null.

4. **Test with a null ownerId**:
   - Scenario: The method should return a new Owner object if the given ownerId is null.
   - Expected Result: The method should return a new Owner object.

5. **Test with a negative ownerId**:
   - Scenario: The method should return a new Owner object if the given ownerId is negative.
   - Expected Result: The method should return a new Owner object.

Please note that these test scenarios are based on the assumption that the `owners.findById(ownerId)` method returns the owner with the given ownerId if it exists, otherwise it returns null. You may need to adjust these test scenarios based on your actual implementation.

*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class OwnerController_findOwner_66dfd5ad88_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    @Test
    public void testFindOwner_withNullId() {
        Owner expected = new Owner();
        assertEquals(expected, ownerController.findOwner(null));
    }

    @Test
    public void testFindOwner_withValidId() {
        Integer validId = 1;
        Owner expected = new Owner();
        expected.setId(validId);
        when(owners.findById(validId)).thenReturn(expected);
        assertEquals(expected, ownerController.findOwner(validId));
    }
}
