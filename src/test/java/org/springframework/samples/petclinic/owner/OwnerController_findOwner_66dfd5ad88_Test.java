/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Null Owner ID
   In this scenario, the ownerId parameter is null. The expected result is that the function should return a new Owner object. 

2. Scenario: Valid Owner ID
   In this scenario, the ownerId parameter is a valid ID that exists in the system. The expected result is that the function should return the Owner object associated with the provided ID.

3. Scenario: Invalid Owner ID
   In this scenario, the ownerId parameter is an ID that does not exist in the system. The expected result is to test how the function handles this situation. It might throw an exception, or it might return null.

4. Scenario: Negative Owner ID
   In this scenario, the ownerId parameter is a negative number. The expected result is to test how the function handles this invalid input. It could throw an exception, or it might return null.

5. Scenario: Owner ID is Zero
   In this scenario, the ownerId parameter is zero. The expected result is to test how the function handles this situation. It could throw an exception, or it might return null.

6. Scenario: Owner ID is a very large number
   In this scenario, the ownerId parameter is a very large number that is unlikely to exist in the system. The expected result is to test how the function handles this situation. It could throw an exception, or it might return null.

7. Scenario: Owner ID is a special character or string
   In this scenario, the ownerId parameter is a special character or string. The expected result is to test how the function handles this invalid input. It could throw an exception, or it might return null.

8. Scenario: Owner ID is a floating-point number
   In this scenario, the ownerId parameter is a floating-point number. The expected result is to test how the function handles this invalid input. It could throw an exception, or it might return null.
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class OwnerController_findOwner_66dfd5ad88_Test {

    @InjectMocks
    OwnerController controller;

    @Mock
    OwnerRepository ownerRepository;

    @Test
    public void testFindOwner_NullOwnerID() {
        Owner owner = controller.findOwner(null);
        assertNotNull(owner, "Owner object should not be null");
    }

    @Test
    public void testFindOwner_ValidOwnerID() {
        Owner mockOwner = new Owner();
        when(ownerRepository.findById(1)).thenReturn(mockOwner);

        Owner owner = controller.findOwner(1);
        assertEquals(mockOwner, owner, "Returned owner should match the mocked one");
    }

    @Test
    public void testFindOwner_InvalidOwnerID() {
        when(ownerRepository.findById(999)).thenReturn(null);

        Owner owner = controller.findOwner(999);
        assertEquals(null, owner, "Returned owner should be null for invalid ID");
    }

    @Test
    public void testFindOwner_NegativeOwnerID() {
        when(ownerRepository.findById(-1)).thenReturn(null);

        Owner owner = controller.findOwner(-1);
        assertEquals(null, owner, "Returned owner should be null for negative ID");
    }

    @Test
    public void testFindOwner_ZeroOwnerID() {
        when(ownerRepository.findById(0)).thenReturn(null);

        Owner owner = controller.findOwner(0);
        assertEquals(null, owner, "Returned owner should be null for zero ID");
    }

    @Test
    public void testFindOwner_LargeOwnerID() {
        when(ownerRepository.findById(Integer.MAX_VALUE)).thenReturn(null);

        Owner owner = controller.findOwner(Integer.MAX_VALUE);
        assertEquals(null, owner, "Returned owner should be null for large ID");
    }
}
