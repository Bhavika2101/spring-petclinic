/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. Scenario: When ownerId is not provided in the request
   - Expected: The function should return a new Owner object.

2. Scenario: When ownerId is provided in the request and exists in the database (Assuming owners is a repository object)
   - Expected: The function should return the Owner object associated with the provided ownerId.

3. Scenario: When ownerId is provided in the request but does not exist in the database
   - Expected: The function should return null (Assuming findById returns null for non-existing ids).

4. Scenario: When ownerId is provided in the request but is not a valid Integer 
   - Expected: The function should throw a TypeMismatchException or similar (This is handled by Spring framework, not the function).

5. Scenario: When ownerId is provided in the request but is a negative number 
   - Expected: The behavior is not defined in the function. It's based on how the owners repository's findById method handles negative ids.

6. Scenario: When ownerId is provided in the request but is a zero
   - Expected: The behavior is not defined in the function. It's based on how the owners repository's findById method handles zero id.

7. Scenario: When ownerId is provided in the request but is an extremely large number 
   - Expected: The behavior is not defined in the function. It's based on how the owners repository's findById method handles such ids.

8. Scenario: When the database is not accessible or down 
   - Expected: The function should throw a database access related exception (This is handled by Spring framework, not the function).

9. Scenario: When ownerId is provided in the request and exists in the database, but the associated Owner object in the database is partially filled or corrupted
   - Expected: The function should return the partially filled or corrupted Owner object. The validity or correctness of the Owner object is not validated in the function.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest
public class OwnerController_findOwner_66dfd5ad88_Test {

    @Autowired
    private OwnerController ownerController;

    @MockBean
    private OwnerRepository owners;

    private final Integer validOwnerId = 1;
    private final Integer invalidOwnerId = -1;
    private final Owner validOwner = new Owner();

    @BeforeEach
    public void setup() {
        when(owners.findById(validOwnerId)).thenReturn(validOwner);
        when(owners.findById(invalidOwnerId)).thenReturn(null);
    }

    @Test
    public void testFindOwner_ValidOwnerId() {
        Owner owner = ownerController.findOwner(validOwnerId);
        assertEquals(validOwner, owner);
        verify(owners, times(1)).findById(validOwnerId);
    }

    @Test
    public void testFindOwner_InvalidOwnerId() {
        Owner owner = ownerController.findOwner(invalidOwnerId);
        assertNull(owner);
        verify(owners, times(1)).findById(invalidOwnerId);
    }

    @Test
    public void testFindOwner_NullOwnerId() {
        Owner owner = ownerController.findOwner(null);
        assertNotNull(owner);
        verify(owners, never()).findById(anyInt());
    }
}
