/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario**: Validate that the function is able to find and return an existing owner correctly. 
   **Test Case**: Pass an ownerId that is known to exist in the system. The function should return the correct Owner object associated with that id.

2. **Scenario**: Validate the function's behavior when an invalid/nonexistent ownerId is passed.
   **Test Case**: Pass an ownerId that does not exist in the system. The function should throw an IllegalArgumentException with the message "Owner ID not found: " followed by the invalid ownerId.

3. **Scenario**: Validate the function's behavior when a negative ownerId is passed.
   **Test Case**: Pass a negative ownerId. The function should throw an IllegalArgumentException with the message "Owner ID not found: " followed by the negative ownerId.

4. **Scenario**: Validate the function's behavior when the ownerId is zero.
   **Test Case**: Pass zero as the ownerId. The function should throw an IllegalArgumentException with the message "Owner ID not found: 0".

5. **Scenario**: Validate the function's behavior with maximum integer value as ownerId.
   **Test Case**: Pass `Integer.MAX_VALUE` as the ownerId. The function should either return the Owner object associated with that id (if it exists) or throw an IllegalArgumentException with the message "Owner ID not found: " followed by the maximum integer value.

6. **Scenario**: Validate the function's behavior when null is passed as ownerId.
   **Test Case**: This scenario is not applicable as the parameter type is primitive int and cannot accept null value.

7. **Scenario**: Validate the function's behavior when the ownerId is of maximum possible length (integer limit).
   **Test Case**: Pass an ownerId of maximum possible length. The function should either return the Owner object associated with that id (if it exists) or throw an IllegalArgumentException with the message "Owner ID not found: " followed by the ownerId.

8. **Scenario**: Validate the function's behavior under heavy load.
   **Test Case**: Pass various valid ownerIds in a very short period of time to simulate heavy load. The function should be able to handle the load and return the correct Owner objects or exceptions as expected.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.samples.petclinic.owner.Owner;
import org.springframework.samples.petclinic.owner.OwnerRepository;
import org.springframework.samples.petclinic.owner.PetController_findOwner_0895b41fd2_Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PetController_findOwner_0895b41fd2_Test {

    @Mock
    private OwnerRepository owners;

    private PetController_findOwner_0895b41fd2_Test petController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        petController = new PetController_findOwner_0895b41fd2_Test(owners);
    }

    @Test
    public void testFindOwner_validOwnerId() {
        Owner expectedOwner = new Owner();
        when(owners.findById(1)).thenReturn(expectedOwner);

        Owner actualOwner = petController.findOwner(1);

        assertEquals(expectedOwner, actualOwner);
        verify(owners, times(1)).findById(1);
    }

    @Test
    public void testFindOwner_invalidOwnerId() {
        when(owners.findById(-1)).thenReturn(null);

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            petController.findOwner(-1);
        });

        String expectedMessage = "Owner ID not found: -1";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
        verify(owners, times(1)).findById(-1);
    }

    @Test
    public void testFindOwner_ownerIdZero() {
        when(owners.findById(0)).thenReturn(null);

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            petController.findOwner(0);
        });

        String expectedMessage = "Owner ID not found: 0";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
        verify(owners, times(1)).findById(0);
    }

    @Test
    public void testFindOwner_maxIntOwnerId() {
        when(owners.findById(Integer.MAX_VALUE)).thenReturn(null);

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            petController.findOwner(Integer.MAX_VALUE);
        });

        String expectedMessage = "Owner ID not found: " + Integer.MAX_VALUE;
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
        verify(owners, times(1)).findById(Integer.MAX_VALUE);
    }

    // TODO: Add more test cases for other scenarios
}
