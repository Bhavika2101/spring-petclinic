/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenarios:**

**1. Valid Owner ID:**
   - Scenario: The owner ID provided is valid and exists in the database.
   - Expected Result: The owner object with the specified ID should be returned.

**2. Null Owner ID:**
   - Scenario: The owner ID provided is null.
   - Expected Result: An IllegalArgumentException should be thrown with the message "Owner ID cannot be null".

**3. Invalid Owner ID:**
   - Scenario: The owner ID provided does not exist in the database.
   - Expected Result: An IllegalArgumentException should be thrown with the message "Owner ID not found: [owner ID]".

**4. Negative Owner ID:**
   - Scenario: The owner ID provided is a negative number.
   - Expected Result: An IllegalArgumentException should be thrown with the message "Owner ID cannot be negative".

**5. Zero Owner ID:**
   - Scenario: The owner ID provided is zero.
   - Expected Result: An IllegalArgumentException should be thrown with the message "Owner ID cannot be zero".

**6. Non-Numeric Owner ID:**
   - Scenario: The owner ID provided is not a numeric value (e.g., "abc").
   - Expected Result: An IllegalArgumentException should be thrown with the message "Owner ID must be a numeric value".

**7. Empty String Owner ID:**
   - Scenario: The owner ID provided is an empty string.
   - Expected Result: An IllegalArgumentException should be thrown with the message "Owner ID cannot be an empty string".
*/
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@WebMvcTest(controllers = PetController.class)
class PetController_findOwner_0895b41fd2_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OwnerRepository owners;

    @DisplayName("Test finding an owner with a valid ID")
    @Test
    void testFindOwnerWithValidId() {
        // Given
        int validOwnerId = 1;
        Owner expectedOwner = new Owner();
        when(owners.findById(validOwnerId)).thenReturn(expectedOwner);

        // When
        Owner actualOwner = petController.findOwner(validOwnerId);

        // Then
        assertThat(actualOwner).isEqualTo(expectedOwner);
    }

    @DisplayName("Test finding an owner with a null ID")
    @Test
    void testFindOwnerWithNullId() {
        // Given
        Integer nullOwnerId = null;

        // When
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> petController.findOwner(nullOwnerId));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Owner ID cannot be null");
    }

    @DisplayName("Test finding an owner with an invalid ID")
    @ParameterizedTest
    @ValueSource(ints = {-1, 0})
    void testFindOwnerWithInvalidId(int invalidOwnerId) {
        // Given
        when(owners.findById(invalidOwnerId)).thenReturn(null);

        // When
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> petController.findOwner(invalidOwnerId));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Owner ID not found: " + invalidOwnerId);
    }

    @DisplayName("Test finding an owner with a non-numeric ID")
    @Test
    void testFindOwnerWithNonNumericId() {
        // Given
        String nonNumericOwnerId = "abc";

        // When
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> petController.findOwner(nonNumericOwnerId));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Owner ID must be a numeric value");
    }

    @DisplayName("Test finding an owner with an empty string ID")
    @Test
    void testFindOwnerWithEmptyStringId() {
        // Given
        String emptyStringOwnerId = "";

        // When
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> petController.findOwner(emptyStringOwnerId));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Owner ID cannot be an empty string");
    }
}
