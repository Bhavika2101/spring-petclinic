/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `findOwner` method, we should consider writing test scenarios that cover the expected behavior of the function under various conditions. Here are some scenarios that can be used to guide the creation of test cases:

1. **Owner ID Found**:
   - Scenario: The `ownerId` provided matches an existing owner in the system.
   - Expected Result: The method should return the `Owner` object corresponding to the provided `ownerId`.

2. **Owner ID Not Found**:
   - Scenario: The `ownerId` provided does not match any existing owner in the system.
   - Expected Result: The method should throw an `IllegalArgumentException` with a message indicating that the owner ID was not found.

3. **Owner ID Boundary Conditions**:
   - Scenario: The `ownerId` provided is at the edge of valid integer values (e.g., `Integer.MAX_VALUE`, `Integer.MIN_VALUE`).
   - Expected Result: The method should either return the corresponding `Owner` object if it exists or throw an `IllegalArgumentException` if it does not.

4. **Invalid Owner ID Types**:
   - Scenario: The `ownerId` provided is not an integer (e.g., a string, a floating-point number).
   - Expected Result: Since the method signature expects an integer, this scenario would not be applicable at the method level and would be handled by the path variable parsing mechanism. However, it's worth noting that such a request should not reach this method and should be handled by the framework with a 400 Bad Request error.

5. **Negative Owner ID**:
   - Scenario: The `ownerId` provided is a negative integer.
   - Expected Result: The method should throw an `IllegalArgumentException` because owner IDs are typically non-negative.

6. **Zero Owner ID**:
   - Scenario: The `ownerId` provided is zero, assuming that IDs start from 1.
   - Expected Result: The method should throw an `IllegalArgumentException` if zero is not a valid `ownerId`.

7. **Concurrent Access**:
   - Scenario: Multiple threads are trying to find an owner with the same `ownerId` simultaneously.
   - Expected Result: Each thread should receive the same `Owner` object without any race conditions or errors, assuming that the `findById` method is thread-safe.

8. **Database/Repository Errors**:
   - Scenario: There is an issue with the underlying database or repository, such as a connection loss or query timeout when calling `findById`.
   - Expected Result: The method should handle such exceptions gracefully. Depending on the implementation of `findById`, this might result in a specific data access exception being thrown.

9. **Owner ID as Special Characters**:
   - Scenario: The `ownerId` provided contains special characters or is a non-numeric string that somehow bypasses the path variable parsing.
   - Expected Result: This should be handled before reaching the method and result in a 400 Bad Request error.

10. **Cache Handling**:
    - Scenario: The `ownerId` is requested multiple times in a short period, and the system uses caching.
    - Expected Result: Subsequent calls for the same `ownerId` may return a cached `Owner` object, assuming the cache is up-to-date and consistent.

11. **Owner ID as Null**:
    - Scenario: A null value is passed as the `ownerId`.
    - Expected Result: This should not occur since `@PathVariable` cannot be null, and the framework should handle this with a 400 Bad Request error.

Remember that some of these scenarios may be handled at different layers of the application (e.g., web framework, middleware). The actual implementation of tests would depend on the overall architecture of the system and the behavior of components like the web framework and the data repository.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class PetController_findOwner_0895b41fd2_Test {

	private OwnerRepository owners;

	private PetController petController;

	@BeforeEach
	public void setup() {
		owners = Mockito.mock(OwnerRepository.class);
		petController = new PetController(owners);
	}

	@Test
	public void testFindOwner_OwnerIDFound() {
		int ownerId = 1;
		Owner expectedOwner = new Owner();
		Mockito.when(owners.findById(ownerId)).thenReturn(expectedOwner);

		Owner actualOwner = petController.findOwner(ownerId);

		assertEquals(expectedOwner, actualOwner);
	}

	@Test
	public void testFindOwner_OwnerIDNotFound() {
		int ownerId = 2;
		Mockito.when(owners.findById(ownerId)).thenReturn(null);

		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			petController.findOwner(ownerId);
		});

		String expectedMessage = "Owner ID not found: " + ownerId;
		String actualMessage = exception.getMessage();

		assertEquals(expectedMessage, actualMessage);
	}

}
