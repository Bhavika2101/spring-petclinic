/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the `findOwner` function, we can create a series of test scenarios that address different aspects of the business logic and potential edge cases. Here are some test scenarios to consider:

1. **Valid Owner ID Test**
   - Description: Test with a valid owner ID that exists in the system.
   - Expected Result: The function should return the corresponding Owner object without any exceptions.

2. **Owner ID Not Found Test**
   - Description: Test with an owner ID that does not exist in the system.
   - Expected Result: The function should throw an `IllegalArgumentException` with an appropriate message indicating that the owner ID was not found.

3. **Negative Owner ID Test**
   - Description: Test with a negative owner ID to check how the system handles invalid input.
   - Expected Result: The function should either throw an `IllegalArgumentException` indicating an invalid owner ID, or handle the negative value according to the application's specific business rules (e.g., converting to a positive ID, if applicable).

4. **Zero Owner ID Test**
   - Description: Test with an owner ID of zero, which is often used as a default or invalid value.
   - Expected Result: The function should either return a default Owner object, throw an `IllegalArgumentException`, or handle the zero value according to the application's specific business logic.

5. **Maximum Integer Owner ID Test**
   - Description: Test with the maximum integer value for an owner ID to test the boundary condition.
   - Expected Result: The function should either return the corresponding Owner object or throw an `IllegalArgumentException` if the ID is out of the valid range.

6. **Non-Existent but Positive Owner ID Test**
   - Description: Test with a positive owner ID that does not exist in the system, but is a valid positive integer.
   - Expected Result: The function should throw an `IllegalArgumentException` with an appropriate message indicating that the owner ID was not found.

7. **Concurrent Modification Test**
   - Description: Test the function under a simulated concurrent environment where the owner ID may be deleted by another transaction right before or during the `findOwner` call.
   - Expected Result: The function should handle the concurrency gracefully, either by throwing an exception indicating the owner was not found or by providing a consistent state according to the system's concurrency model.

8. **Database Connection Failure Test**
   - Description: Simulate a database connection failure while calling `findOwner`.
   - Expected Result: The function should throw an exception indicating the failure to connect to the database or retrieve the owner information, depending on how the underlying `owners.findById` method is implemented to handle such scenarios.

9. **Invalid Input Type Test**
   - Description: Test with an invalid input type, such as a string or a floating-point number, to ensure the path variable is being correctly cast to an integer.
   - Expected Result: The system should reject the request before it reaches the `findOwner` function due to type mismatch, or the function should throw a type-related exception.

10. **Performance Test**
    - Description: Test the function under load to ensure that it performs well when handling a large number of requests.
    - Expected Result: The function should maintain acceptable performance levels and return results within a reasonable timeframe.

These test scenarios cover a range of possible conditions that could affect the `findOwner` function's behavior and help ensure the robustness of the business logic implementation.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

@SpringBootTest
public class PetController_findOwner_0895b41fd2_Test {

    @Autowired
    private PetController petController;

    @MockBean
    private OwnerRepository ownerRepository;

    @BeforeEach
    void setUp() {
        Mockito.when(ownerRepository.findById(1)).thenReturn(new Owner());
        Mockito.when(ownerRepository.findById(99)).thenReturn(null);
    }

    @Test
    public void testFindOwner_ValidOwnerId() {
        Owner expectedOwner = new Owner();
        Owner actualOwner = petController.findOwner(1);
        assertEquals(expectedOwner, actualOwner);
    }

    @Test
    public void testFindOwner_OwnerIdNotFound() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            petController.findOwner(99);
        });
        assertEquals("Owner ID not found: 99", exception.getMessage());
    }

    // TODO: Add more test cases based on the TEST SCENARIOS table provided
}
