/*
Test generated by RoostGPT for test pom-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `findOwner` method:

1. **Test with a valid ownerId**:
   - Input: 1
   - Expected Output: The owner with ID 1 should be returned.
   - Verify: Check if the returned owner has the correct ID.

2. **Test with an invalid ownerId**:
   - Input: An ID that does not exist in the database.
   - Expected Output: An `IllegalArgumentException` should be thrown with a message indicating that the owner ID was not found.
   - Verify: Check if the exception message matches the expected one.

3. **Test with a negative ownerId**:
   - Input: -1
   - Expected Output: An `IllegalArgumentException` should be thrown with a message indicating that the owner ID was not found.
   - Verify: Check if the exception message matches the expected one.

4. **Test with a zero ownerId**:
   - Input: 0
   - Expected Output: An `IllegalArgumentException` should be thrown with a message indicating that the owner ID was not found.
   - Verify: Check if the exception message matches the expected one.

5. **Test with a null ownerId**:
   - Input: null
   - Expected Output: An `IllegalArgumentException` should be thrown with a message indicating that the owner ID was not found.
   - Verify: Check if the exception message matches the expected one.

Please note that these test scenarios are based on the assumption that the `findById` method of the `owners` object returns an owner with the given ID if it exists, and null otherwise. If the `owners` object is not a mock or stub, you may need to modify these test scenarios to simulate different behaviors of the `owners` object.

*/
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

@WebMvcTest(PetController.class)
public class PetController_findOwner_0895b41fd2_Test {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private OwnerRepository owners;

    @Test
    public void testFindOwner_Success() throws Exception {
        Owner owner = new Owner();
        owner.setId(1);
        owner.setName("John Doe");
        given(owners.findById(1)).willReturn(owner);

        mvc.perform(get("/owners/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("John Doe"));
    }

    @Test
    public void testFindOwner_NotFound() throws Exception {
        given(owners.findById(2)).willReturn(null);

        mvc.perform(get("/owners/2"))
                .andExpect(status().isNotFound());
    }
}
