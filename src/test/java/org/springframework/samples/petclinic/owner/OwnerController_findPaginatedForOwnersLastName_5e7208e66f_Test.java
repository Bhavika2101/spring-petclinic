/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Test with valid "page" and "lastname" parameters. 
   Expected Result: The function should return a Page of Owners with the given last name, and the size of the returned page should not exceed the defined page size (5).

2. Scenario: Test with a "page" parameter that is less than 1.
   Expected Result: The function should handle the invalid page number and return an appropriate error or warning.

3. Scenario: Test with a "lastname" parameter that is null or empty string.
   Expected Result: The function should handle the invalid last name and return an appropriate error or warning.

4. Scenario: Test with a "lastname" parameter for which there are no matching Owners.
   Expected Result: The function should return an empty Page of Owners.

5. Scenario: Test with a "lastname" parameter that contains special characters or numbers.
   Expected Result: The function should handle the special characters or numbers in last name and return an appropriate result or error.

6. Scenario: Test with a "page" parameter greater than the total number of pages available for the given "lastname".
   Expected Result: The function should handle the scenario and return an appropriate result or error.

7. Scenario: Test with a "lastname" parameter that has leading or trailing whitespaces.
   Expected Result: The function should trim the whitespaces and return the correct result.

8. Scenario: Test with a "page" parameter that is a floating-point number.
   Expected Result: The function should handle the floating-point number and return an appropriate error or warning.

9. Scenario: Test with a "lastname" parameter that is case insensitive.
   Expected Result: The function should return the correct result regardless of the case of the last name.

10. Scenario: Test with a "page" parameter that is a string or non-integer type.
    Expected Result: The function should handle the non-integer type and return an appropriate error or warning.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;

public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    @InjectMocks
    private OwnerController ownerController;

    @Mock
    private OwnerRepository ownerRepository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_validParameters() {
        Page<Owner> owners = Page.empty();
        when(ownerRepository.findByLastName(any(String.class), any(Pageable.class))).thenReturn(owners);

        Page<Owner> result = ownerController.findPaginatedForOwnersLastName(1, "Smith");

        assertNotNull(result);
        assertEquals(owners, result);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_invalidPage() {
        assertThrows(IllegalArgumentException.class, () -> ownerController.findPaginatedForOwnersLastName(0, "Smith"));
    }

    @Test
    public void testFindPaginatedForOwnersLastName_nullLastName() {
        assertThrows(IllegalArgumentException.class, () -> ownerController.findPaginatedForOwnersLastName(1, null));
    }

    @Test
    public void testFindPaginatedForOwnersLastName_emptyLastName() {
        Page<Owner> owners = Page.empty();
        when(ownerRepository.findByLastName(any(String.class), any(Pageable.class))).thenReturn(owners);

        Page<Owner> result = ownerController.findPaginatedForOwnersLastName(1, "");

        assertNotNull(result);
        assertEquals(owners, result);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_noMatchingOwners() {
        Page<Owner> owners = Page.empty();
        when(ownerRepository.findByLastName(any(String.class), any(Pageable.class))).thenReturn(owners);

        Page<Owner> result = ownerController.findPaginatedForOwnersLastName(1, "NonExistentLastName");

        assertNotNull(result);
        assertEquals(owners, result);
    }

    // TODO: Add more test cases for other scenarios
}
