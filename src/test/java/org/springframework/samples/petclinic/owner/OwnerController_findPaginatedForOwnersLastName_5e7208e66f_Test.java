/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Search with a valid last name and a valid page number
   - Input: page = 1, lastname = "Smith"
   - Expected Output: A Page object containing a list of owners with the last name "Smith", page 1 of the results. The page should contain a maximum of 5 results.

2. Scenario: Search with a valid last name and an invalid page number
   - Input: page = 0 or negative number, lastname = "Smith"
   - Expected Output: Error or exception, as page numbers should start from 1.

3. Scenario: Search with a valid last name and a page number greater than total number of pages
   - Input: page = 100 (assuming there are less than 100 pages of results), lastname = "Smith"
   - Expected Output: An empty Page object, as there are no more results to show.

4. Scenario: Search with an invalid last name and a valid page number
   - Input: page = 1, lastname = "InvalidName"
   - Expected Output: An empty Page object, as there are no owners with the last name "InvalidName".

5. Scenario: Search with a null last name and a valid page number
   - Input: page = 1, lastname = null
   - Expected Output: Error or exception, as the last name should not be null.

6. Scenario: Search with a valid last name and a page number but the page size is modified to more than 5
   - Input: page = 1, lastname = "Smith", pageSize = 10
   - Expected Output: Error or exception, as the page size should not be more than 5.

7. Scenario: Search with a valid last name and a page number but the page size is modified to less than 1
   - Input: page = 1, lastname = "Smith", pageSize = 0
   - Expected Output: Error or exception, as the page size should be at least 1.

8. Scenario: Search with a valid last name and a page number but the page size is modified to a non-integer
   - Input: page = 1, lastname = "Smith", pageSize = "five"
   - Expected Output: Error or exception, as the page size should be an integer.

9. Scenario: Search with a case-insensitive last name
   - Input: page = 1, lastname = "smith"
   - Expected Output: A Page object containing a list of owners with the last name "Smith", page 1 of the results. The page should contain a maximum of 5 results, showing that the search is case-insensitive.

10. Scenario: Search with a partial last name
    - Input: page = 1, lastname = "Smi"
    - Expected Output: A Page object containing a list of owners with the last name starting with "Smi", page 1 of the results. The page should contain a maximum of 5 results.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    @InjectMocks
    private OwnerController ownerController;

    @Mock
    private OwnerRepository owners;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testFindPaginatedForOwnersLastName_ValidLastNameValidPage() {
        Owner owner1 = new Owner();
        Owner owner2 = new Owner();
        List<Owner> ownerList = Arrays.asList(owner1, owner2);
        int page = 1;
        String lastname = "Smith";
        Page<Owner> ownerPage = new PageImpl<>(ownerList);
        Pageable pageable = PageRequest.of(page - 1, 5);

        when(owners.findByLastName(lastname, pageable)).thenReturn(ownerPage);

        Page<Owner> results = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertNotNull(results);
        assertEquals(2, results.getContent().size());
        verify(owners, times(1)).findByLastName(lastname, pageable);
    }

    @Test
    void testFindPaginatedForOwnersLastName_InvalidLastName() {
        int page = 1;
        String lastname = "InvalidName";
        Pageable pageable = PageRequest.of(page - 1, 5);

        when(owners.findByLastName(lastname, pageable)).thenReturn(Page.empty());

        Page<Owner> results = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertNotNull(results);
        assertTrue(results.isEmpty());
        verify(owners, times(1)).findByLastName(lastname, pageable);
    }

    @Test
    void testFindPaginatedForOwnersLastName_NullLastName() {
        int page = 1;
        String lastname = null;
        Pageable pageable = PageRequest.of(page - 1, 5);

        when(owners.findByLastName(lastname, pageable)).thenReturn(Page.empty());

        assertThrows(NullPointerException.class, () -> ownerController.findPaginatedForOwnersLastName(page, lastname));
        verify(owners, times(0)).findByLastName(lastname, pageable);
    }
}
