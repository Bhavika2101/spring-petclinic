/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1: Valid last name and page number**

- Given a valid last name "Smith" and a valid page number "1",
- When the findPaginatedForOwnersLastName method is called,
- Then it should return a Page object with a list of owners whose last name is "Smith" and the page number is "1".

**Test Scenario 2: Invalid last name**

- Given an invalid last name "NonExistentLastName" and a valid page number "1",
- When the findPaginatedForOwnersLastName method is called,
- Then it should return an empty Page object.

**Test Scenario 3: Invalid page number**

- Given a valid last name "Smith" and an invalid page number "-1",
- When the findPaginatedForOwnersLastName method is called,
- Then it should throw an IllegalArgumentException.

**Test Scenario 4: Null last name**

- Given a null last name and a valid page number "1",
- When the findPaginatedForOwnersLastName method is called,
- Then it should throw an IllegalArgumentException.

**Test Scenario 5: Empty last name**

- Given an empty last name "" and a valid page number "1",
- When the findPaginatedForOwnersLastName method is called,
- Then it should return an empty Page object.
*/
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    @Autowired
    private OwnerRepository owners;

    @Test
    public void testFindPaginatedForOwnersLastName_ValidLastNameAndPageNumber() {
        // Given
        String lastName = "Smith";
        int page = 1;

        // When
        Page<Owner> ownersPage = findPaginatedForOwnersLastName(page, lastName);

        // Then
        List<Owner> ownersList = ownersPage.getContent();
        assertEquals(1, ownersPage.getTotalPages());
        assertEquals(5, ownersList.size());
        assertEquals("Smith", ownersList.get(0).getLastName());
    }

    @Test
    public void testFindPaginatedForOwnersLastName_InvalidLastName() {
        // Given
        String lastName = "NonExistentLastName";
        int page = 1;

        // When
        Page<Owner> ownersPage = findPaginatedForOwnersLastName(page, lastName);

        // Then
        assertEquals(0, ownersPage.getTotalPages());
        assertEquals(0, ownersPage.getContent().size());
    }

    @Test
    public void testFindPaginatedForOwnersLastName_InvalidPageNumber() {
        // Given
        String lastName = "Smith";
        int page = -1;

        // Then
        assertThrows(IllegalArgumentException.class, () -> {
            // When
            findPaginatedForOwnersLastName(page, lastName);
        });
    }

    @Test
    public void testFindPaginatedForOwnersLastName_NullLastName() {
        // Given
        String lastName = null;
        int page = 1;

        // Then
        assertThrows(IllegalArgumentException.class, () -> {
            // When
            findPaginatedForOwnersLastName(page, lastName);
        });
    }

    @Test
    public void testFindPaginatedForOwnersLastName_EmptyLastName() {
        // Given
        String lastName = "";
        int page = 1;

        // When
        Page<Owner> ownersPage = findPaginatedForOwnersLastName(page, lastName);

        // Then
        assertEquals(0, ownersPage.getTotalPages());
        assertEquals(0, ownersPage.getContent().size());
    }

    private Page<Owner> findPaginatedForOwnersLastName(int page, String lastname) {
        int pageSize = 5;
        Pageable pageable = PageRequest.of(page - 1, pageSize);
        return owners.findByLastName(lastname, pageable);
    }
}
