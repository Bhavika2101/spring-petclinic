/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `findPaginatedForOwnersLastName` method, here are several test scenarios that can be considered:

1. **Valid Last Name with Results**: 
   - **Given**: A valid `lastname` that exists in the database.
   - **When**: The method is called with a page number that has results.
   - **Then**: The returned `Page<Owner>` should contain the expected number of owners with the given last name, not exceeding the page size.

2. **Valid Last Name with No Results**:
   - **Given**: A valid `lastname` that does not exist in the database.
   - **When**: The method is called with any page number.
   - **Then**: The returned `Page<Owner>` should be empty with a total of zero elements.

3. **Invalid Last Name**:
   - **Given**: An invalid `lastname` (e.g., special characters, numbers, etc.).
   - **When**: The method is called.
   - **Then**: Depending on the database and search implementation, the method should either return an empty `Page<Owner>` or throw an exception.

4. **Boundary Case for Page Number**:
   - **Given**: A valid `lastname`.
   - **When**: The method is called with a page number of 1 (first page).
   - **Then**: The returned `Page<Owner>` should contain the first `pageSize` number of owners with the given last name.

5. **Page Number Exceeding Total Pages**:
   - **Given**: A valid `lastname`.
   - **When**: The method is called with a page number that is greater than the total number of available pages.
   - **Then**: The returned `Page<Owner>` should be empty, indicating that there are no results for that page.

6. **Page Size Consistency**:
   - **Given**: A valid `lastname` with more results than the `pageSize`.
   - **When**: The method is called multiple times with consecutive page numbers.
   - **Then**: Each `Page<Owner>` except the last one should be full (i.e., contain exactly `pageSize` number of owners). The last page may have less than `pageSize` owners if the total number of results is not a multiple of `pageSize`.

7. **Negative Page Number**:
   - **Given**: A valid `lastname`.
   - **When**: The method is called with a negative page number.
   - **Then**: The method should throw an exception or return the first page results as a fallback mechanism.

8. **Zero Page Number**:
   - **Given**: A valid `lastname`.
   - **When**: The method is called with a page number of 0.
   - **Then**: Depending on the implementation details, either return the first page results or throw an exception.

9. **Null Last Name**:
   - **Given**: A `null` value for `lastname`.
   - **When**: The method is called.
   - **Then**: The method should either return all owners paginated (if `null` is treated as a wildcard) or throw an exception.

10. **Empty String Last Name**:
    - **Given**: An empty string for `lastname`.
    - **When**: The method is called.
    - **Then**: The method should either return all owners paginated (if empty string is treated as a wildcard) or return an empty `Page<Owner>`.

11. **Concurrent Access**:
    - **Given**: A valid `lastname`.
    - **When**: The method is called concurrently by multiple threads.
    - **Then**: The method should handle concurrent access gracefully and return consistent paginated results for each thread.

12. **Case Sensitivity**:
    - **Given**: A `lastname` in varying cases (e.g., "Smith", "smith", "SMITH").
    - **When**: The method is called with each case variation.
    - **Then**: Depending on whether the search is case-sensitive or not, the results should either be the same for all case variations or different.

These test scenarios can be refined further based on specific business requirements, the behavior of the underlying database, and the expected handling of edge cases in the implementation of the `findByLastName` repository method.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;

public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    private OwnerController ownerController;
    private OwnerRepository ownerRepositoryMock;

    @BeforeEach
    void setup() {
        ownerRepositoryMock = Mockito.mock(OwnerRepository.class);
        ownerController = new OwnerController(ownerRepositoryMock);
    }

    @Test
    void testFindPaginatedForOwnersLastName_ValidLastNameWithResults() {
        // Given
        String lastname = "Smith";
        int page = 1;
        int pageSize = 5;
        List<Owner> ownersList = Collections.nCopies(pageSize, new Owner());
        Page<Owner> expectedPage = new PageImpl<>(ownersList);

        // When
        Mockito.when(ownerRepositoryMock.findByLastName(eq(lastname), any())).thenReturn(expectedPage);
        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        // Then
        assertEquals(expectedPage.getTotalElements(), actualPage.getTotalElements());
        assertEquals(expectedPage.getContent(), actualPage.getContent());
    }

    @Test
    void testFindPaginatedForOwnersLastName_ValidLastNameWithNoResults() {
        // Given
        String lastname = "Nonexistent";
        int page = 1;
        Page<Owner> expectedPage = Page.empty();

        // When
        Mockito.when(ownerRepositoryMock.findByLastName(eq(lastname), any())).thenReturn(expectedPage);
        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        // Then
        assertTrue(actualPage.isEmpty());
    }

    @Test
    void testFindPaginatedForOwnersLastName_PageNumberExceedingTotalPages() {
        // Given
        String lastname = "Smith";
        int page = 10; // Assuming there are less than 10 pages of results
        Page<Owner> expectedPage = Page.empty(PageRequest.of(page - 1, 5));

        // When
        Mockito.when(ownerRepositoryMock.findByLastName(eq(lastname), any())).thenReturn(expectedPage);
        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        // Then
        assertTrue(actualPage.isEmpty());
    }

    @Test
    void testFindPaginatedForOwnersLastName_EmptyStringLastName() {
        // Given
        String lastname = "";
        int page = 1;
        List<Owner> ownersList = Collections.nCopies(5, new Owner());
        Page<Owner> expectedPage = new PageImpl<>(ownersList);

        // When
        Mockito.when(ownerRepositoryMock.findByLastName(eq(lastname), any())).thenReturn(expectedPage);
        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        // Then
        assertEquals(expectedPage.getTotalElements(), actualPage.getTotalElements());
        assertEquals(expectedPage.getContent(), actualPage.getContent());
    }
}
