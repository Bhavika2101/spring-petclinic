/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `findPaginatedForOwnersLastName` method, the following test scenarios should be considered:

1. **Valid Last Name with Results**
   - **Given**: A valid `lastname` that exists in the database.
   - **When**: The method is called with a page number.
   - **Then**: It should return a `Page<Owner>` object containing the expected owners with the given last name, not exceeding the page size.

2. **Valid Last Name with No Results**
   - **Given**: A valid `lastname` that does not exist in the database.
   - **When**: The method is called with a page number.
   - **Then**: It should return an empty `Page<Owner>` object.

3. **Pagination Test with Multiple Pages**
   - **Given**: A `lastname` that has more results than the page size.
   - **When**: The method is called with different page numbers.
   - **Then**: It should return different subsets of `Owner` objects for each page, each subset not exceeding the page size.

4. **First Page Retrieval**
   - **Given**: A valid `lastname` with multiple pages of results.
   - **When**: The method is called with page number 1.
   - **Then**: It should return the first `pageSize` number of owners.

5. **Middle Page Retrieval**
   - **Given**: A valid `lastname` with multiple pages of results.
   - **When**: The method is called with a page number that is neither the first nor the last page.
   - **Then**: It should return a full page of owners (i.e., `pageSize` owners) if available.

6. **Last Page Retrieval**
   - **Given**: A valid `lastname` with multiple pages of results.
   - **When**: The method is called with the last page number.
   - **Then**: It should return the last set of owners, which could be less than `pageSize`.

7. **Invalid Page Number**
   - **Given**: A valid `lastname`.
   - **When**: The method is called with an invalid page number (e.g., negative number or zero).
   - **Then**: It should handle the scenario gracefully, possibly by throwing an exception or returning the first page.

8. **Boundary Conditions for Page Number**
   - **Given**: A valid `lastname` with multiple pages of results.
   - **When**: The method is called with the boundary page numbers (e.g., 1 and the maximum number of pages).
   - **Then**: It should return the correct results for the first and last pages, respectively.

9. **Null or Empty Last Name**
   - **Given**: A `lastname` that is null or empty.
   - **When**: The method is called.
   - **Then**: The method should handle this input appropriately, possibly by returning all owners or throwing a validation exception.

10. **Invalid Last Name Characters**
    - **Given**: A `lastname` with invalid characters or format not accepted by the business logic.
    - **When**: The method is called.
    - **Then**: The method should validate the input and possibly throw an exception or return no results.

11. **Case Sensitivity**
    - **Given**: A `lastname` with different cases (e.g., uppercase, lowercase, mixed).
    - **When**: The method is called.
    - **Then**: The test should verify if the search is case-sensitive and that the results are consistent with the expected behavior.

12. **PageSize Configuration**
    - **Given**: A `lastname` that has enough results to be paginated.
    - **When**: The `pageSize` is configured to a different number (other than 5).
    - **Then**: The method should respect the new `pageSize` and return the results accordingly.

13. **Concurrency Test**
    - **Given**: Multiple requests with the same or different `lastname` at the same time.
    - **When**: The method is called concurrently.
    - **Then**: The method should handle concurrent access and return consistent results without any data corruption.

14. **Database Connection Issues**
    - **Given**: A `lastname` for a search.
    - **When**: There are database connectivity issues.
    - **Then**: The method should handle exceptions gracefully and inform the user or the calling service of the issue.

Each of these scenarios would help ensure that the `findPaginatedForOwnersLastName` method behaves correctly under various conditions and handles edge cases as expected by the business logic.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    private OwnerRepository owners;
    private OwnerController ownerController;

    @BeforeEach
    public void setUp() {
        owners = mock(OwnerRepository.class);
        ownerController = new OwnerController(owners);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidLastNameWithResults() {
        int page = 1;
        String lastname = "Smith";
        List<Owner> ownerList = new ArrayList<>();
        ownerList.add(new Owner()); // TODO: Set properties as needed

        Page<Owner> expectedPage = new PageImpl<>(ownerList, PageRequest.of(page - 1, 5), ownerList.size());
        when(owners.findByLastName(lastname, PageRequest.of(page - 1, 5))).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertEquals(expectedPage.getTotalElements(), actualPage.getTotalElements());
        assertEquals(expectedPage.getContent(), actualPage.getContent());
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidLastNameWithNoResults() {
        int page = 1;
        String lastname = "Nonexistent";
        Page<Owner> expectedPage = new PageImpl<>(new ArrayList<>(), PageRequest.of(page - 1, 5), 0);
        when(owners.findByLastName(lastname, PageRequest.of(page - 1, 5))).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertTrue(actualPage.getContent().isEmpty());
    }

    // Additional test cases would be similar to the above two tests, but with different scenarios as per the test case scenarios table.
}
