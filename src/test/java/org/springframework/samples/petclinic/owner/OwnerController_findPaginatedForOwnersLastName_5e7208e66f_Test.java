/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `findPaginatedForOwnersLastName` method, here are several test scenarios that can be considered:

1. **Valid Last Name with Results**: 
   - **Given**: A valid `lastname` that exists in the database.
   - **When**: The method is called with a page number that has results.
   - **Then**: The returned `Page<Owner>` should contain the expected number of owners with the given last name, not exceeding the page size.

2. **Valid Last Name with No Results**:
   - **Given**: A valid `lastname` that does not exist in the database.
   - **When**: The method is called with any page number.
   - **Then**: The returned `Page<Owner>` should be empty with a total of zero elements.

3. **Invalid Last Name**:
   - **Given**: An invalid `lastname` (e.g., special characters, numbers in a context where they are not allowed).
   - **When**: The method is called with a page number.
   - **Then**: Depending on the system's handling of invalid input, it should either return an empty `Page<Owner>` or throw an exception.

4. **First Page Retrieval**:
   - **Given**: A valid `lastname` with enough results to span multiple pages.
   - **When**: The method is called with page number 1.
   - **Then**: The returned `Page<Owner>` should contain the first `pageSize` number of owners.

5. **Middle Page Retrieval**:
   - **Given**: A valid `lastname` with enough results to span multiple pages.
   - **When**: The method is called with a page number that is not the first or last page.
   - **Then**: The returned `Page<Owner>` should contain the expected number of owners, and it should be different from the first and last pages.

6. **Last Page Retrieval**:
   - **Given**: A valid `lastname` with enough results to span multiple pages.
   - **When**: The method is called with the last page number.
   - **Then**: The returned `Page<Owner>` may contain fewer than `pageSize` owners if the total number of results is not a multiple of `pageSize`.

7. **Page Number Out of Range**:
   - **Given**: A valid `lastname`.
   - **When**: The method is called with a page number that is greater than the total number of available pages.
   - **Then**: The returned `Page<Owner>` should be empty.

8. **Negative Page Number**:
   - **Given**: A valid `lastname`.
   - **When**: The method is called with a negative page number.
   - **Then**: The system should handle the invalid input appropriately, likely by throwing an exception or defaulting to the first page.

9. **Boundary Page Size Condition**:
   - **Given**: A valid `lastname` with exactly `pageSize` or `pageSize + 1` results.
   - **When**: The method is called with page number 1.
   - **Then**: The test should validate if the page correctly contains `pageSize` results and if the pagination logic appropriately handles the boundary condition.

10. **Case Sensitivity**:
    - **Given**: A valid `lastname` with different cases (e.g., "Smith" vs. "smith").
    - **When**: The method is called with a `lastname` in different cases.
    - **Then**: Depending on the case sensitivity of the search, the results should be consistent with the search behavior (either case-sensitive or case-insensitive).

11. **Concurrent Modifications**:
    - **Given**: A valid `lastname` where the underlying data may change during pagination.
    - **When**: Multiple calls are made to retrieve different pages.
    - **Then**: The test should validate how the system handles concurrent modifications (e.g., consistent read or handling of newly added/removed entries).

12. **Performance Under Load**:
    - **Given**: A valid `lastname` with a large number of results.
    - **When**: The method is called repeatedly or concurrently to simulate high load.
    - **Then**: The system should maintain performance and consistency in the results returned.

13. **Invalid Page Size Configuration**:
    - **Given**: A configuration or code change that sets an invalid page size (e.g., zero, negative).
    - **When**: The method is called with any `lastname`.
    - **Then**: The system should handle the invalid page size appropriately, likely by throwing an exception or defaulting to a predefined valid page size.

These scenarios cover various aspects of the pagination functionality, including input validation, boundary conditions, and system behavior under different circumstances. Each test scenario will help ensure that the `findPaginatedForOwnersLastName` method behaves as expected and correctly implements the business logic.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    @Mock
    private OwnerRepository owners;

    private OwnerController ownerController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        ownerController = new OwnerController(owners);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidLastNameWithResults() {
        int page = 1;
        String lastname = "Smith";
        List<Owner> ownerList = List.of(new Owner(), new Owner());
        Page<Owner> expectedPage = new PageImpl<>(ownerList);
        when(owners.findByLastName(anyString(), any())).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertEquals(expectedPage.getTotalElements(), actualPage.getTotalElements());
        assertEquals(expectedPage.getContent().size(), actualPage.getContent().size());
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidLastNameWithNoResults() {
        int page = 1;
        String lastname = "DoesNotExist";
        Page<Owner> expectedPage = new PageImpl<>(Collections.emptyList());
        when(owners.findByLastName(anyString(), any())).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertTrue(actualPage.isEmpty());
    }

    @Test
    public void testFindPaginatedForOwnersLastName_PageNumberOutOfRange() {
        int page = 100; // TODO: Change this value based on the total number of pages available in the system.
        String lastname = "Smith";
        Page<Owner> expectedPage = new PageImpl<>(Collections.emptyList());
        when(owners.findByLastName(anyString(), any())).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertTrue(actualPage.isEmpty());
    }

    @Test
    public void testFindPaginatedForOwnersLastName_NegativePageNumber() {
        int page = -1; // Negative page number
        String lastname = "Smith";
        Page<Owner> expectedPage = new PageImpl<>(Collections.emptyList());
        when(owners.findByLastName(anyString(), any())).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastname);

        assertTrue(actualPage.isEmpty());
    }

    // Additional test cases can be implemented following the scenarios provided.
}
