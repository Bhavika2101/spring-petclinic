/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify the function with valid page number and valid last name.
   **Expected Result:** The function should return a page of owners whose last name matches the input.

2. **Scenario:** Verify the function with valid page number and invalid last name.
   **Expected Result:** The function should return an empty page as there will be no matching owners.

3. **Scenario:** Verify the function with invalid page number (e.g. negative number, zero) and valid last name.
   **Expected Result:** The function should throw an IllegalArgumentException as the page number is invalid.

4. **Scenario:** Verify the function with valid page number and null last name.
   **Expected Result:** The function should throw a NullPointerException as the last name is null.

5. **Scenario:** Verify the function with valid page number and last name with leading/trailing white spaces.
   **Expected Result:** The function should return a page of owners whose last name matches the trimmed input.

6. **Scenario:** Verify the function with page number greater than the total number of pages and valid last name.
   **Expected Result:** The function should return an empty page as the page number exceeds the total pages.

7. **Scenario:** Verify the function with valid page number and last name that doesn't exist in the database.
   **Expected Result:** The function should return an empty page as there are no owners with the given last name.

8. **Scenario:** Verify the function with valid page number and last name that exists in the database but not on the requested page.
   **Expected Result:** The function should return an empty page as there are no owners with the given last name on the requested page.

9. **Scenario:** Verify the function with a page number that exactly matches the total number of pages and a valid last name.
   **Expected Result:** The function should return the last page of owners whose last name matches the input.

10. **Scenario:** Verify the function with a page number that is less than the total number of pages but greater than 1 and a valid last name.
    **Expected Result:** The function should return the corresponding page of owners whose last name matches the input.
*/
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private OwnerController ownerController;

    private static final int PAGE_SIZE = 5;

    @BeforeEach
    public void setup() {
        ownerController = new OwnerController(owners);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidPageAndLastName() {
        int page = 1;
        String lastName = "Smith";
        Pageable pageable = PageRequest.of(page - 1, PAGE_SIZE);
        Page<Owner> expectedPage = mock(Page.class);

        when(owners.findByLastName(lastName, pageable)).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastName);

        assertEquals(expectedPage, actualPage);
        verify(owners, times(1)).findByLastName(lastName, pageable);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_InvalidPageAndValidLastName() {
        int page = -1;
        String lastName = "Smith";

        assertThrows(IllegalArgumentException.class, () -> ownerController.findPaginatedForOwnersLastName(page, lastName));
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidPageAndNullLastName() {
        int page = 1;
        String lastName = null;

        assertThrows(NullPointerException.class, () -> ownerController.findPaginatedForOwnersLastName(page, lastName));
    }

    @Test
    public void testFindPaginatedForOwnersLastName_ValidPageAndLastNameWithSpaces() {
        int page = 1;
        String lastName = " Smith ";
        Pageable pageable = PageRequest.of(page - 1, PAGE_SIZE);
        Page<Owner> expectedPage = mock(Page.class);

        when(owners.findByLastName(lastName.trim(), pageable)).thenReturn(expectedPage);

        Page<Owner> actualPage = ownerController.findPaginatedForOwnersLastName(page, lastName);

        assertEquals(expectedPage, actualPage);
        verify(owners, times(1)).findByLastName(lastName.trim(), pageable);
    }
}
