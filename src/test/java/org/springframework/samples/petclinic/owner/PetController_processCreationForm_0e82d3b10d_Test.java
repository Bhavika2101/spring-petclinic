/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `processCreationForm` function, you should consider creating test scenarios that cover both the happy path (where everything works as intended) and edge cases. Here are some potential test scenarios:

1. **Happy Path Scenario:**
   - Given a valid `owner` and a valid `pet` with a unique name and a birthdate before the current date, when the form is submitted, then the pet should be added to the owner, and the user should be redirected to the owner's page.

2. **Duplicate Pet Name for the Same Owner:**
   - Given an `owner` and a `pet` with a name that already exists for another pet owned by the same owner, when the form is submitted, then the submission should be rejected with a "duplicate" error for the pet's name.

3. **Pet Birthdate in the Future:**
   - Given a `pet` with a birthdate set to a future date, when the form is submitted, then the submission should be rejected with a "typeMismatch.birthDate" error.

4. **Empty or Null Pet Name:**
   - Given a `pet` with an empty or null name, when the form is submitted, then the submission should proceed without triggering the "duplicate" validation check.

5. **Binding Errors Present:**
   - Given that the `BindingResult` has pre-existing errors prior to submitting the form, when the form is submitted, then the user should be presented with the form again to correct the input, and the pet should not be added to the owner.

6. **Owner Without Pets Adding a Pet:**
   - Given an `owner` without any pets, when a valid `pet` is submitted, then the pet should be successfully added to the owner.

7. **Adding a Pet with a Valid Past Birthdate:**
   - Given a `pet` with a valid past birthdate, when the form is submitted, then the pet should be successfully added to the owner.

8. **Pet Name with Leading or Trailing Whitespaces:**
   - Given a `pet` with a name that has leading or trailing whitespaces but is otherwise valid and unique, when the form is submitted, then the pet should be added to the owner with the trimmed name.

9. **Submitting a Form with a Null Pet Object:**
   - Given a null `pet` object, when the form is submitted, then the submission should fail, and appropriate error handling should occur.

10. **Owner Object with Inconsistent State or Null:**
    - Given an `owner` that is null or has an inconsistent state (e.g., missing mandatory fields), when the form is submitted, then the submission should fail with appropriate error handling.

11. **Persisting the Owner and Pet:**
    - Given a valid `owner` and `pet`, when the form is submitted and there are no errors, then the `owner` should be saved with the new `pet` added to its collection of pets.

12. **ModelMap Contains Pet on Error:**
    - Given a `pet` that triggers a validation error (e.g., duplicate name or future birthdate), when the form is submitted, then the `ModelMap` should contain the `pet` object for redisplaying the form with the entered values.

13. **Correct View Returned on Error:**
    - Given any validation error occurs, when the form is submitted, then the user should be returned to the `VIEWS_PETS_CREATE_OR_UPDATE_FORM` view to correct the submission.

These test scenarios aim to cover the different branches and validation checks within the `processCreationForm` method. Each scenario should be tested to ensure that the business logic is functioning correctly and that users experience the intended behavior of the system.
*/
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;

public class PetController_processCreationForm_0e82d3b10d_Test {

    private static final String VIEWS_PETS_CREATE_OR_UPDATE_FORM = "pets/createOrUpdatePetForm";
    private OwnerRepository owners;
    private PetController petController;

    @BeforeEach
    public void setup() {
        owners = mock(OwnerRepository.class);
        petController = new PetController(owners);
    }

    @Test
    public void testProcessCreationFormHappyPath() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setName("Buddy");
        pet.setBirthDate(LocalDate.now().minusYears(1));
        BindingResult result = mock(BindingResult.class);
        ModelMap model = new ModelMap();

        when(result.hasErrors()).thenReturn(false);
        when(owners.save(owner)).thenReturn(null);

        String view = petController.processCreationForm(owner, pet, result, model);

        assertEquals("redirect:/owners/{ownerId}", view);
    }

    @Test
    public void testProcessCreationFormDuplicatePetName() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setName("Buddy");
        pet.setBirthDate(LocalDate.now().minusYears(1));
        Pet existingPet = new Pet();
        existingPet.setName("Buddy");
        owner.addPet(existingPet);

        BindingResult result = mock(BindingResult.class);
        ModelMap model = new ModelMap();

        when(result.hasErrors()).thenReturn(true);
        when(owner.getPet(pet.getName(), true)).thenReturn(existingPet);

        String view = petController.processCreationForm(owner, pet, result, model);

        assertEquals(VIEWS_PETS_CREATE_OR_UPDATE_FORM, view);
    }

    @Test
    public void testProcessCreationFormBirthDateInFuture() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setName("Buddy");
        pet.setBirthDate(LocalDate.now().plusDays(10));
        BindingResult result = mock(BindingResult.class);
        ModelMap model = new ModelMap();

        when(result.hasErrors()).thenReturn(true);

        String view = petController.processCreationForm(owner, pet, result, model);

        assertEquals(VIEWS_PETS_CREATE_OR_UPDATE_FORM, view);
    }

    @Test
    public void testProcessCreationFormWithBindingErrors() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setName("Buddy");
        pet.setBirthDate(LocalDate.now().minusYears(1));
        BindingResult result = mock(BindingResult.class);
        ModelMap model = new ModelMap();

        List<ObjectError> errors = new ArrayList<>();
        errors.add(new ObjectError("name", "error"));
        when(result.hasErrors()).thenReturn(true);
        when(result.getAllErrors()).thenReturn(errors);

        String view = petController.processCreationForm(owner, pet, result, model);

        assertEquals(VIEWS_PETS_CREATE_OR_UPDATE_FORM, view);
    }
}
