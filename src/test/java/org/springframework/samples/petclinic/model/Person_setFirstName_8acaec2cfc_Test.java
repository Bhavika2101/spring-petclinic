/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Positive Scenario - Valid First Name:** Test by passing a valid first name that is not blank and verify if the first name is successfully set.

2. **Negative Scenario - Blank First Name:** Test by passing a blank first name to check whether the function throws a validation error as expected.

3. **Negative Scenario - Null First Name:** Test by passing a null first name to see if the function throws a validation error or a null pointer exception.

4. **Positive Scenario - First Name with Spaces:** Test by passing a first name that includes spaces (e.g., "John Doe") and verify if the first name is successfully set. This scenario is based on the assumption that the first name can have spaces.

5. **Boundary Scenario - Maximum Length:** Test by passing a first name with the maximum allowed length (if defined) to verify if the first name is successfully set.

6. **Boundary Scenario - Exceeding Maximum Length:** Test by passing a first name that exceeds the maximum allowed length (if defined) to check if the function throws a validation error.

7. **Positive Scenario - First Name with Special Characters:** Test by passing a first name that includes special characters (e.g., "John-Doe") and verify if the first name is successfully set. This scenario is based on the assumption that the first name can have special characters.

8. **Negative Scenario - First Name with Numbers:** Test by passing a first name that includes numbers (e.g., "John123") to check if the function throws a validation error. This scenario is based on the assumption that the first name cannot have numbers.

9. **Special Scenario - First Name with Unicode Characters:** Test by passing a first name that includes Unicode characters (e.g., "Jöhn") and verify if the first name is successfully set. This scenario is based on the assumption that the first name can have Unicode characters.

10. **Negative Scenario - First Name with SQL Injection:** Test by passing a first name that includes SQL injection patterns (e.g., "John'; DROP TABLE users; --") to check if the function handles this securely and throws a validation error.
*/
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Person_setFirstName_8acaec2cfc_Test {

    private Person person;

    @BeforeEach
    public void setUp() {
        person = new Person();
    }

    @Test
    public void testSetFirstName_ValidName() {
        String firstName = "John";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testSetFirstName_BlankName() {
        String firstName = " ";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstName));
    }

    @Test
    public void testSetFirstName_NullName() {
        assertThrows(NullPointerException.class, () -> person.setFirstName(null));
    }

    @Test
    public void testSetFirstName_NameWithSpaces() {
        String firstName = "John Doe";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testSetFirstName_MaxLength() {
        String firstName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohn"; // TODO: Adjust this value based on the maximum allowed length
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testSetFirstName_ExceedMaxLength() {
        String firstName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohn"; // TODO: Adjust this value to exceed the maximum allowed length
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstName));
    }

    @Test
    public void testSetFirstName_NameWithSpecialCharacters() {
        String firstName = "John-Doe";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testSetFirstName_NameWithNumbers() {
        String firstName = "John123";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstName));
    }

    @Test
    public void testSetFirstName_NameWithUnicodeCharacters() {
        String firstName = "Jöhn";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testSetFirstName_NameWithSQLInjection() {
        String firstName = "John'; DROP TABLE users; --";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstName));
    }
}
