/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Positive Scenario - Valid First Name:** Test by passing a valid first name that is not blank and verify if the first name is successfully set.

2. **Negative Scenario - Blank First Name:** Test by passing a blank first name to check whether the function throws the appropriate validation error.

3. **Negative Scenario - Null First Name:** Test by passing a null value for the first name and validate if the function throws a NullPointerException or any other appropriate error.

4. **Positive Scenario - First Name with Special Characters:** Test by passing a first name with special characters (like hyphen, apostrophe) which are valid in names and verify if the first name is successfully set.

5. **Negative Scenario - First Name with Numbers:** Test by passing a first name that contains numbers. Though this is not directly related to the method implementation, it could be part of business logic in a real-world application where names cannot contain numbers.

6. **Positive Scenario - First Name with White Spaces:** Test by passing a first name that contains white spaces (like "Anne Marie") and verify if the first name is successfully set.

7. **Boundary Scenario - Maximum Length of First Name:** Test by passing a first name that is at the maximum length limit (if there is any defined in the system) and verify if the first name is successfully set.

8. **Negative Scenario - Exceeding Maximum Length of First Name:** Test by passing a first name that exceeds the maximum length limit (if there is any defined in the system) and verify if the function throws the appropriate validation error.

9. **Boundary Scenario - Minimum Length of First Name:** Test by passing a first name that is at the minimum length limit (for example, "A") and verify if the first name is successfully set.

10. **Negative Scenario - Below Minimum Length of First Name:** Test by passing a first name that is below the minimum length limit (if there is any defined in the system) and verify if the function throws the appropriate validation error.
   
Remember, these scenarios are based on assumption of business rules, as the provided function does not have any built-in validation. The validation could be handled elsewhere in the system.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Person_setFirstName_8acaec2cfc_Test {

    private Person person;

    @BeforeEach
    public void setUp() {
        person = new Person();
    }

    @Test
    public void testValidFirstName() {
        String validFirstName = "John";
        person.setFirstName(validFirstName);
        assertEquals(validFirstName, person.getFirstName());
    }

    @Test
    public void testBlankFirstName() {
        String blankFirstName = " ";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(blankFirstName));
    }

    @Test
    public void testNullFirstName() {
        assertThrows(NullPointerException.class, () -> person.setFirstName(null));
    }

    @Test
    public void testFirstNameWithSpecialCharacters() {
        String firstNameWithSpecialChars = "Anne-Marie";
        person.setFirstName(firstNameWithSpecialChars);
        assertEquals(firstNameWithSpecialChars, person.getFirstName());
    }

    @Test
    public void testFirstNameWithNumbers() {
        String firstNameWithNumbers = "John123";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstNameWithNumbers));
    }

    @Test
    public void testFirstNameWithWhiteSpaces() {
        String firstNameWithSpaces = "Anne Marie";
        person.setFirstName(firstNameWithSpaces);
        assertEquals(firstNameWithSpaces, person.getFirstName());
    }

    @Test
    public void testMaxLengthFirstName() {
        String maxLengthFirstName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohn"; // TODO: Set this to the maximum length allowed in your system
        person.setFirstName(maxLengthFirstName);
        assertEquals(maxLengthFirstName, person.getFirstName());
    }

    @Test
    public void testExceedingMaxLengthFirstName() {
        String exceedingMaxLengthFirstName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohn"; // TODO: Set this to exceed the maximum length allowed in your system
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(exceedingMaxLengthFirstName));
    }

    @Test
    public void testMinLengthFirstName() {
        String minLengthFirstName = "A";
        person.setFirstName(minLengthFirstName);
        assertEquals(minLengthFirstName, person.getFirstName());
    }

    @Test
    public void testBelowMinLengthFirstName() {
        String belowMinLengthFirstName = ""; // TODO: Set this to below the minimum length allowed in your system
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(belowMinLengthFirstName));
    }
}
