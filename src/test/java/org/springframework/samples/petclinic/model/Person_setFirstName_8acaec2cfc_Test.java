/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. **Scenario 1:** Set a valid first name.
   - **Description:** In this scenario, we will set a valid first name (e.g., "John") and test if it is correctly set.

2. **Scenario 2:** Set an empty first name.
   - **Description:** In this scenario, we will set an empty string as the first name and test if the validation constraint @NotBlank throws the expected exception.

3. **Scenario 3:** Set a first name with whitespace.
   - **Description:** In this scenario, we will set a first name that contains only whitespace and test if the @NotBlank constraint works as expected and throws an exception.

4. **Scenario 4:** Set a first name with special characters.
   - **Description:** In this scenario, we will set a first name (e.g., "John$%") that contains special characters and test if it is correctly set. Note that the business logic does not explicitly forbid this, but it may not be desirable depending on the context.

5. **Scenario 5:** Set a first name with numbers.
   - **Description:** In this scenario, we will set a first name (e.g., "John123") that contains numbers and test if it is correctly set.

6. **Scenario 6:** Set a null first name.
   - **Description:** In this scenario, we will set a null value as the first name and test if the @NotBlank constraint throws the expected exception.

7. **Scenario 7:** Set a very long first name.
   - **Description:** In this scenario, we will set a very long first name and test if it is correctly set or if there is a limit on the length of the first name.

8. **Scenario 8:** Set a first name, then change it.
   - **Description:** In this scenario, we will set a valid first name, then change it to another valid first name, and test if the change is correctly performed.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

class Person_setFirstName_8acaec2cfc_Test {

    private Person person;

    @BeforeEach
    void setup() {
        person = new Person();
    }

    @Test
    @DisplayName("Scenario 1: Set a valid first name")
    void setValidFirstName() {
        String firstName = "John";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    @DisplayName("Scenario 2: Set an empty first name")
    void setEmptyFirstName() {
        String firstName = "";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstName));
    }

    @Test
    @DisplayName("Scenario 3: Set a first name with whitespace")
    void setWhitespaceFirstName() {
        String firstName = " ";
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(firstName));
    }

    @Test
    @DisplayName("Scenario 4: Set a first name with special characters")
    void setSpecialCharacterFirstName() {
        String firstName = "John$%";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    @DisplayName("Scenario 5: Set a first name with numbers")
    void setNumericFirstName() {
        String firstName = "John123";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    @DisplayName("Scenario 6: Set a null first name")
    void setNullFirstName() {
        assertThrows(IllegalArgumentException.class, () -> person.setFirstName(null));
    }

    @Test
    @DisplayName("Scenario 7: Set a very long first name")
    void setLongFirstName() {
        String firstName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohnJohn";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    @DisplayName("Scenario 8: Set a first name, then change it")
    void setAndChangeFirstName() {
        String firstName1 = "John";
        String firstName2 = "Doe";
        person.setFirstName(firstName1);
        assertEquals(firstName1, person.getFirstName());
        person.setFirstName(firstName2);
        assertEquals(firstName2, person.getFirstName());
    }
}
