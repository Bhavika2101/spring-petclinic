/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Test scenario where the `name` parameter is a valid string: This scenario will test the normal functionality of the `setName` function. We can create a test where we pass a valid string as a parameter and then check if the `name` attribute of the object was set correctly.

2. Test scenario where the `name` parameter is null: This scenario will test the robustness of the `setName` function. We can create a test where we pass null as the parameter and then check if the `name` attribute of the object was set to null.

3. Test scenario where the `name` parameter is an empty string: This scenario will test the setName function when an empty string is passed. In this test, we will check if the `name` attribute of the object was set to an empty string.

4. Test scenario where the `name` parameter is a string with special characters: This scenario will test the setName function when a string with special characters is passed. In this test, we will check if the `name` attribute of the object was set correctly with those special characters.

5. Test scenario where the `name` parameter is a string with spaces: This scenario will test the setName function when a string with spaces is passed. In this test, we will check if the `name` attribute of the object was set correctly with those spaces.

6. Test scenario where the `name` parameter is a very long string: This scenario will test the setName function when a very long string is passed. In this test, we will check if the `name` attribute of the object was set correctly and if the function can handle very long strings.

7. Test scenario where the `name` parameter is a string with numbers: This scenario will test the setName function when a string with numbers is passed. In this test, we will check if the `name` attribute of the object was set correctly with those numbers.

8. Test scenario where the `name` parameter is not a string: This scenario will test the setName function when a non-string parameter is passed. This test is expected to fail, as the function is designed to accept strings only.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NamedEntity_setName_5d23a892d9_Test {

    @Test
    public void testSetName_ValidString() {
        NamedEntity namedEntity = new NamedEntity();
        namedEntity.setName("John Doe");
        assertEquals("John Doe", namedEntity.getName());
    }

    @Test
    public void testSetName_Null() {
        NamedEntity namedEntity = new NamedEntity();
        namedEntity.setName(null);
        assertNull(namedEntity.getName());
    }

    @Test
    public void testSetName_EmptyString() {
        NamedEntity namedEntity = new NamedEntity();
        namedEntity.setName("");
        assertEquals("", namedEntity.getName());
    }

    @Test
    public void testSetName_SpecialCharacters() {
        NamedEntity namedEntity = new NamedEntity();
        namedEntity.setName("@#$$%^&*");
        assertEquals("@#$$%^&*", namedEntity.getName());
    }

    @Test
    public void testSetName_StringWithSpaces() {
        NamedEntity namedEntity = new NamedEntity();
        namedEntity.setName("John Doe Smith");
        assertEquals("John Doe Smith", namedEntity.getName());
    }

    @Test
    public void testSetName_VeryLongString() {
        NamedEntity namedEntity = new NamedEntity();
        String veryLongString = new String(new char[10000]).replace('\0', 'A');
        namedEntity.setName(veryLongString);
        assertEquals(veryLongString, namedEntity.getName());
    }

    @Test
    public void testSetName_StringWithNumbers() {
        NamedEntity namedEntity = new NamedEntity();
        namedEntity.setName("John123");
        assertEquals("John123", namedEntity.getName());
    }

    @Test
    public void testSetName_NonStringInput() {
        NamedEntity namedEntity = new NamedEntity();
        assertThrows(ClassCastException.class, () -> namedEntity.setName((String) new Object()));
    }
}
