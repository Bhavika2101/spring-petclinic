/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario 1:** Null Value Test
   - **Description:** Verify that the function returns null when the `lastName` attribute is null. 

2. **Scenario 2:** Empty String Test
   - **Description:** Check if the function returns an empty string when the `lastName` attribute is set as an empty string. 

3. **Scenario 3:** Whitespace Test
   - **Description:** Test if the function returns a whitespace or blank string when the `lastName` attribute is set as a whitespace.

4. **Scenario 4:** Single Character Test
   - **Description:** Verify if the function returns a single character when the `lastName` attribute is set as a single character.

5. **Scenario 5:** Alphanumeric Test
   - **Description:** Check if the function returns the correct alphanumeric value when the `lastName` attribute is set as an alphanumeric string.

6. **Scenario 6:** Special Characters Test
   - **Description:** Test if the function returns the correct special characters when the `lastName` attribute is set as a string containing special characters.

7. **Scenario 7:** Unicode Characters Test
   - **Description:** Check if the function returns the correct unicode characters when the `lastName` attribute is set as a string containing unicode characters.

8. **Scenario 8:** Long String Test
   - **Description:** Verify if the function returns the correct long string when the `lastName` attribute is set as a long string. 

9. **Scenario 9:** Case Sensitivity Test
   - **Description:** Check if the function is case sensitive and returns the correct case when the `lastName` attribute is set with a mix of lower and uppercase letters.

10. **Scenario 10:** Typical Last Name Test
   - **Description:** Test if the function returns the correct typical last name when the `lastName` attribute is set as a typical last name.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Person_getLastName_4814a2dee7_Test {

    @Test
    public void testGetLastName_NullValue() {
        Person person = new Person();
        person.setLastName(null);
        Assertions.assertNull(person.getLastName());
    }

    @Test
    public void testGetLastName_EmptyString() {
        Person person = new Person();
        person.setLastName("");
        Assertions.assertEquals("", person.getLastName());
    }

    @Test
    public void testGetLastName_Whitespace() {
        Person person = new Person();
        person.setLastName(" ");
        Assertions.assertEquals(" ", person.getLastName());
    }

    @Test
    public void testGetLastName_SingleCharacter() {
        Person person = new Person();
        person.setLastName("A");
        Assertions.assertEquals("A", person.getLastName());
    }

    @Test
    public void testGetLastName_Alphanumeric() {
        Person person = new Person();
        person.setLastName("John123");
        Assertions.assertEquals("John123", person.getLastName());
    }

    @Test
    public void testGetLastName_SpecialCharacters() {
        Person person = new Person();
        person.setLastName("@#$%!");
        Assertions.assertEquals("@#$%!", person.getLastName());
    }

    @Test
    public void testGetLastName_UnicodeCharacters() {
        Person person = new Person();
        person.setLastName("\u00A9");
        Assertions.assertEquals("\u00A9", person.getLastName());
    }

    @Test
    public void testGetLastName_LongString() {
        Person person = new Person();
        person.setLastName("ThisIsAVeryLongLastName");
        Assertions.assertEquals("ThisIsAVeryLongLastName", person.getLastName());
    }

    @Test
    public void testGetLastName_CaseSensitivity() {
        Person person = new Person();
        person.setLastName("JohnDoe");
        Assertions.assertEquals("JohnDoe", person.getLastName());
    }

    @Test
    public void testGetLastName_TypicalLastName() {
        Person person = new Person();
        person.setLastName("Smith");
        Assertions.assertEquals("Smith", person.getLastName());
    }
}
