/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `getLastName` function, you would need to consider various test scenarios that focus on the behavior and constraints implied by the code and annotations. Here are some test scenarios that could be considered:

1. **Basic Retrieval Test**: 
   - Given an instance of the class with `lastName` set to a known value, when the `getLastName` method is called, then it should return the exact `lastName` value that was set.

2. **Null Value Test**: 
   - Given an instance of the class with `lastName` set to `null`, when the `getLastName` method is called, then it should return `null`.

3. **Empty String Test**: 
   - Given an instance of the class with `lastName` set to an empty string, when the `getLastName` method is called, then it should return an empty string.

4. **Whitespace Test**: 
   - Given an instance of the class with `lastName` set to a string with only whitespace, when the `getLastName` method is called, then it should return the whitespace string.

5. **Persistence Annotation Test**: 
   - Verify that the `lastName` field is correctly mapped to a database column (This would require an integration test or a check of the schema generation to ensure the `@Column` annotation is being respected).

6. **Constraint Annotation Test**: 
   - Given an instance of the class with `lastName` set to a non-blank string, when validated, it should not violate `@NotBlank` constraints.
   - Given an instance of the class with `lastName` set to an empty string or only whitespace, when validated, it should violate `@NotBlank` constraints and throw a validation exception.

7. **Immutable Test**: 
   - If the class design implies immutability, verify that there is no setter for the `lastName` field, and once set through the constructor or other means, the `lastName` cannot be changed.

8. **Trimming Test**: 
   - Depending on the business logic, you might also want to test if the `lastName` is being trimmed before being returned or stored. This isn't shown in the code snippet but could be part of the class's logic.

9. **Serialization Test**: 
   - If the class is intended to be serialized (e.g., for RESTful APIs), ensure that the `lastName` field is correctly serialized and deserialized.

10. **Reflection Test**: 
    - Use reflection to ensure that the `lastName` field has the expected annotations (`@Column`, `@NotBlank`, etc.) which might be important for frameworks that rely on these annotations for functionality.

11. **Thread-Safety Test**: 
    - If the class is expected to be used in a multi-threaded environment, verify that reading the `lastName` through `getLastName` does not cause any concurrency issues.

12. **Integration Test with Business Logic**: 
    - If the `lastName` field is used in any business logic or calculations, create tests that ensure the `getLastName` method provides the correct data for those operations.

These test scenarios are written with the assumption that the `lastName` field is a string and that the class is part of a larger application that might use persistence and validation frameworks. The actual implementation of these tests would depend on the testing frameworks and tools you are using (e.g., JUnit for unit tests, Hibernate Validator for validation tests, etc.).
*/
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Person_getLastName_4814a2dee7_Test {

    private Person person;

    @BeforeEach
    public void setUp() {
        person = new Person();
    }

    @Test
    public void testGetLastName_BasicRetrieval() {
        String expectedLastName = "Doe";
        person.setLastName(expectedLastName);
        String actualLastName = person.getLastName();
        assertEquals(expectedLastName, actualLastName, "The getLastName method should return the last name set on the person object.");
    }

    @Test
    public void testGetLastName_NullValue() {
        person.setLastName(null);
        assertNull(person.getLastName(), "The getLastName method should return null if the last name is set to null.");
    }

    @Test
    public void testGetLastName_EmptyString() {
        person.setLastName("");
        assertEquals("", person.getLastName(), "The getLastName method should return an empty string if the last name is set to an empty string.");
    }

    @Test
    public void testGetLastName_Whitespace() {
        person.setLastName("   ");
        assertEquals("   ", person.getLastName(), "The getLastName method should return the whitespace string if the last name is set to whitespace.");
    }

    // TODO: Implement additional tests for persistence annotations and constraints as part of integration testing.
}
