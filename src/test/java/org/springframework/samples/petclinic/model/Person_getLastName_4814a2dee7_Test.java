/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `getLastName` function, you would need to consider various test scenarios that focus on the behavior and constraints implied by the code and annotations. Here are some test scenarios that could be considered:

1. **Basic Retrieval Test**:
   - Given a valid object with a populated `lastName` field, when `getLastName` is called, then it should return the correct `lastName` value.

2. **Null Value Test**:
   - Given an object where the `lastName` field is `null`, when `getLastName` is called, then it should return `null`.

3. **Empty String Test** (if applicable based on the broader context of the class):
   - Given an object with an empty string as the `lastName`, when `getLastName` is called, then it should return an empty string.

4. **Annotation Effect Test**:
   - Since the `@NotBlank` annotation is used in the class (but not directly above the `getLastName` method in the provided snippet), you would want to test if the validation is applied correctly elsewhere in the code when setting the `lastName`. This is not directly a test of `getLastName` but rather of the class's validation behavior:
     - Given an object attempt to set `lastName` as an empty string or whitespace, then validation should fail.
     - Given an object attempt to set `lastName` as `null`, then validation should fail.

5. **Persistence Mapping Test**:
   - The `@Column` annotation suggests that the `lastName` field is a column in a database. Therefore, you will want to verify that the `lastName` is correctly retrieved from the database and that `getLastName` returns the persisted value.

6. **Inheritance Test** (if applicable):
   - The `@MappedSuperclass` annotation implies that the class is intended to be a superclass for entities. Test that subclasses inherit the `lastName` field and that `getLastName` works correctly when invoked on instances of subclasses.

7. **Immutable Field Test** (if applicable):
   - If the business logic dictates that the `lastName` should not change after the object's creation (immutability), then you should test to ensure that there is no public setter for the `lastName` field, or if there is one, it enforces this rule.

8. **Concurrency Test**:
   - If instances of the class are accessed by multiple threads, test that `getLastName` behaves correctly in a concurrent environment, e.g., it should consistently return the correct value without any race conditions.

9. **Integration Test with Other Methods**:
   - Test that `getLastName` interacts correctly with other methods in the class that might modify the `lastName` field, ensuring that the latest data is always returned.

10. **Case Sensitivity Test**:
    - Verify that `getLastName` returns the last name in the case it was set (presuming case sensitivity is expected).

11. **Length and Character Test**:
    - If there are any business rules regarding the length or the characters allowed in the `lastName` (e.g., no special characters), test that these rules are enforced when the `lastName` is set, and that `getLastName` returns a value adhering to these rules.

Remember that the actual implementation of these test scenarios would require appropriate test code and possibly a testing framework such as JUnit. The scenarios would need to be tailored to the specifics of the class that contains the `getLastName` method and the wider application context.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Person_getLastName_4814a2dee7_Test {

	private Person person;

	@BeforeEach
	void setUp() {
		person = new Person();
	}

	@Test
	void testGetLastName_BasicRetrieval() {
		String expectedLastName = "Doe";
		person.setLastName(expectedLastName);
		String actualLastName = person.getLastName();
		assertEquals(expectedLastName, actualLastName, "The getLastName method should return the correct last name.");
	}

	@Test
	void testGetLastName_NullValue() {
		person.setLastName(null);
		assertNull(person.getLastName(), "The getLastName method should return null when last name is not set.");
	}

	@Test
	void testGetLastName_EmptyString() {
		person.setLastName("");
		String actualLastName = person.getLastName();
		assertEquals("", actualLastName,
				"The getLastName method should return an empty string when last name is set as such.");
	}

	@Test
	void testGetLastName_CaseSensitivity() {
		String expectedLastName = "McDonald";
		person.setLastName(expectedLastName);
		String actualLastName = person.getLastName();
		assertEquals(expectedLastName, actualLastName,
				"The getLastName method should preserve the case sensitivity of the last name.");
	}

	// TODO: Additional tests related to annotation effects, persistence mapping,
	// inheritance, concurrency, integration with other methods, and length/character
	// constraints can be added based on the specific requirements of the class and its
	// usage within the application.

}
