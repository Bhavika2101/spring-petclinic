/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns the correct name.
   - Given that the object has a name set to 'John Doe'.
   - When the toString function is called.
   - Then the function should return 'John Doe'.

2. Scenario: Check if the function returns an empty string when the name is not set.
   - Given that the object does not have a name set.
   - When the toString function is called.
   - Then the function should return an empty string.

3. Scenario: Check if the function returns the correct name with special characters.
   - Given that the object has a name set to 'John_Doe'.
   - When the toString function is called.
   - Then the function should return 'John_Doe'.

4. Scenario: Check if the function returns the correct name with numbers.
   - Given that the object has a name set to 'John123'.
   - When the toString function is called.
   - Then the function should return 'John123'.

5. Scenario: Check if the function returns the correct name with spaces.
   - Given that the object has a name set to 'John Doe Smith'.
   - When the toString function is called.
   - Then the function should return 'John Doe Smith'.

6. Scenario: Check if the function returns the correct name with mixed cases.
   - Given that the object has a name set to 'JoHn DoE'.
   - When the toString function is called.
   - Then the function should return 'JoHn DoE'.

7. Scenario: Check if the function returns the correct name when the name is set to null.
   - Given that the object has a name set to null.
   - When the toString function is called.
   - Then the function should throw a NullPointerException.

8. Scenario: Check if the function returns the correct name with non-alphanumeric characters.
   - Given that the object has a name set to 'John@Doe'.
   - When the toString function is called.
   - Then the function should return 'John@Doe'. 

Note: The actual behavior for some of these scenarios may depend on how the getName() method is implemented. For instance, if the getName() method is designed to return null when the name is not set, then the toString() method will throw a NullPointerException in such cases.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NamedEntity_toString_ceffa8036e_Test {

    private NamedEntity namedEntity;

    @BeforeEach
    public void setUp() {
        namedEntity = new NamedEntity();
    }

    @Test
    public void testToString_ReturnsCorrectName() {
        namedEntity.setName("John Doe");
        assertEquals("John Doe", namedEntity.toString());
    }

    @Test
    public void testToString_ReturnsEmptyStringWhenNameIsNotSet() {
        assertEquals("", namedEntity.toString());
    }

    @Test
    public void testToString_ReturnsCorrectNameWithSpecialCharacters() {
        namedEntity.setName("John_Doe");
        assertEquals("John_Doe", namedEntity.toString());
    }

    @Test
    public void testToString_ReturnsCorrectNameWithNumbers() {
        namedEntity.setName("John123");
        assertEquals("John123", namedEntity.toString());
    }

    @Test
    public void testToString_ReturnsCorrectNameWithSpaces() {
        namedEntity.setName("John Doe Smith");
        assertEquals("John Doe Smith", namedEntity.toString());
    }

    @Test
    public void testToString_ReturnsCorrectNameWithMixedCases() {
        namedEntity.setName("JoHn DoE");
        assertEquals("JoHn DoE", namedEntity.toString());
    }

    @Test
    public void testToString_ThrowsNullPointerExceptionWhenNameIsNull() {
        namedEntity.setName(null);
        assertThrows(NullPointerException.class, () -> namedEntity.toString());
    }

    @Test
    public void testToString_ReturnsCorrectNameWithNonAlphanumericCharacters() {
        namedEntity.setName("John@Doe");
        assertEquals("John@Doe", namedEntity.toString());
    }
}
