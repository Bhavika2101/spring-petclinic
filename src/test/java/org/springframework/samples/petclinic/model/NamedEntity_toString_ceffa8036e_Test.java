/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Null Object Test
   - Description: Test the scenario where the object on which the `toString` method is called is null, and validate that it handles the situation as expected (likely throwing a NullPointerException).

2. Scenario: Empty Name Test
   - Description: Test the scenario where the `getName` method returns an empty String. The `toString` method should return an empty string in this scenario.

3. Scenario: Non-Empty Name Test
   - Description: Test the scenario where the `getName` method returns a non-empty String. The `toString` method should return the same string in this scenario.

4. Scenario: Special Characters Name Test
   - Description: Test the scenario where the `getName` method returns a String that contains special characters. The `toString` method should return the same string in this scenario.

5. Scenario: Long Name Test
   - Description: Test the scenario where the `getName` method returns a very long String. The `toString` method should return the same string in this scenario.

6. Scenario: Name with Whitespaces Test
   - Description: Test the scenario where the `getName` method returns a String that contains leading, trailing, or intermediate whitespaces. The `toString` method should return the same string in this scenario.

7. Scenario: Unicode Characters Name Test
   - Description: Test the scenario where the `getName` method returns a String that contains Unicode characters. The `toString` method should return the same string in this scenario.

8. Scenario: Concurrent Access Test
   - Description: Test the scenario where multiple threads are calling the `toString` method concurrently. The method should behave as expected and not result in any race conditions or inconsistent results.

9. Scenario: Name Change Test
   - Description: Test the scenario where the name of the object is changed after the `toString` method is called once. The method should return the updated name when called again.

10. Scenario: Null Name Test
    - Description: Test the scenario where the `getName` method returns null. The `toString` method should handle this appropriately, likely returning null or an empty string.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class NamedEntity_toString_ceffa8036e_Test {

    @Test
    public void testNullObject() {
        NamedEntity entity = null;
        assertThrows(NullPointerException.class, entity::toString);
    }

    @Test
    public void testEmptyName() {
        NamedEntity entity = new NamedEntity();
        entity.setName("");
        assertEquals("", entity.toString());
    }

    @Test
    public void testNonEmptyName() {
        NamedEntity entity = new NamedEntity();
        entity.setName("Test");
        assertEquals("Test", entity.toString());
    }

    @Test
    public void testSpecialCharactersName() {
        NamedEntity entity = new NamedEntity();
        entity.setName("@#$$%^&*()");
        assertEquals("@#$$%^&*()", entity.toString());
    }

    @Test
    public void testLongName() {
        NamedEntity entity = new NamedEntity();
        entity.setName("ThisIsAVeryLongNameThatExceedsNormalLength");
        assertEquals("ThisIsAVeryLongNameThatExceedsNormalLength", entity.toString());
    }

    @Test
    public void testNameWithWhitespaces() {
        NamedEntity entity = new NamedEntity();
        entity.setName(" Test ");
        assertEquals(" Test ", entity.toString());
    }

    @Test
    public void testUnicodeCharactersName() {
        NamedEntity entity = new NamedEntity();
        entity.setName("テスト");
        assertEquals("テスト", entity.toString());
    }

    @Test
    public void testConcurrentAccess() throws InterruptedException {
        NamedEntity entity = new NamedEntity();
        entity.setName("Test");

        Thread t1 = new Thread(() -> entity.toString());
        Thread t2 = new Thread(() -> entity.toString());

        t1.start();
        t2.start();

        t1.join();
        t2.join();
        
        // If no exception is thrown, then it is thread safe
        assertTrue(true);
    }

    @Test
    public void testNameChange() {
        NamedEntity entity = new NamedEntity();
        entity.setName("Test");
        entity.toString();
        entity.setName("Changed");
        assertEquals("Changed", entity.toString());
    }

    @Test
    public void testNullName() {
        NamedEntity entity = new NamedEntity();
        entity.setName(null);
        assertNull(entity.toString());
    }
}
