/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1: Null ID**
  - Objective: Verify that the function returns null when the ID is not set.
  - Test Steps:
    - Create a new entity object without setting the ID.
    - Call the getId() function on the object.
    - Assert that the returned value is null.

**Test Scenario 2: Valid ID**
  - Objective: Verify that the function returns the correct ID when it is set.
  - Test Steps:
    - Create a new entity object and set the ID to a valid value.
    - Call the getId() function on the object.
    - Assert that the returned value is equal to the expected ID.

**Test Scenario 3: Negative ID**
  - Objective: Verify that the function throws an exception when the ID is negative.
  - Test Steps:
    - Create a new entity object and set the ID to a negative value.
    - Call the getId() function on the object.
    - Assert that the function throws an exception.

**Test Scenario 4: Non-Integer ID**
  - Objective: Verify that the function throws an exception when the ID is not an integer.
  - Test Steps:
    - Create a new entity object and set the ID to a non-integer value (e.g., a string).
    - Call the getId() function on the object.
    - Assert that the function throws an exception.
*/
import org.junit.jupiter.api.Test;
import org.springframework.samples.petclinic.model.BaseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class BaseEntity_getId_2f24a803f0_Test {

    @Test
    void getId_NullId() {
        // Arrange
        BaseEntity entity = new BaseEntity();

        // Act
        Integer id = entity.getId();

        // Assert
        assertEquals(null, id);
    }

    @Test
    void getId_ValidId() {
        // Arrange
        Integer expectedId = 1;
        BaseEntity entity = new BaseEntity();
        entity.setId(expectedId);

        // Act
        Integer id = entity.getId();

        // Assert
        assertEquals(expectedId, id);
    }

    @Test
    void getId_NegativeId() {
        // Arrange
        Integer invalidId = -1;
        BaseEntity entity = new BaseEntity();
        entity.setId(invalidId);

        // Act and Assert
        assertThrows(IllegalArgumentException.class, () -> entity.getId());
    }

    @Test
    void getId_NonIntegerId() {
        // Arrange
        String invalidId = "invalid";
        BaseEntity entity = new BaseEntity();
        entity.setId(invalidId);

        // Act and Assert
        assertThrows(IllegalArgumentException.class, () -> entity.getId());
    }
}
