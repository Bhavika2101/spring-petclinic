/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To properly validate the business logic of the `setLastName` method, we should consider various test scenarios that take into account the constraints and expected behavior of the method. Here are several test scenarios:

1. **Normal Input Scenario**:
   - Description: Set a valid last name and ensure it is correctly assigned.
   - Test Steps: Call `setLastName` with a normal last name string, like "Smith".
   - Expected Result: The last name should be set to "Smith" without any exceptions.

2. **Blank String Input Scenario**:
   - Description: Set a blank string as the last name and check for validation constraints (as indicated by `@NotBlank`).
   - Test Steps: Call `setLastName` with a blank string, "".
   - Expected Result: A `ConstraintViolationException` or similar should be thrown due to the `@NotBlank` annotation.

3. **Null Input Scenario**:
   - Description: Set a null value as the last name and ensure the method handles it as expected.
   - Test Steps: Call `setLastName` with `null`.
   - Expected Result: Depending on business rules, it should either throw a `ConstraintViolationException`, `IllegalArgumentException`, or handle the null value gracefully.

4. **Trimmed Input Scenario**:
   - Description: Set a last name with leading and trailing whitespaces and verify the behavior.
   - Test Steps: Call `setLastName` with a name like "  Johnson  ".
   - Expected Result: The method should either trim the input and set the last name to "Johnson" or throw a validation exception if whitespaces are not allowed.

5. **Long String Input Scenario**:
   - Description: Set an excessively long last name to test if there is a maximum length constraint (not visible in the snippet).
   - Test Steps: Call `setLastName` with a very long string, e.g., 255 characters.
   - Expected Result: If there is a length constraint (e.g., `@Size(max=50)`), a violation exception should be thrown. Otherwise, the long string should be set as the last name.

6. **Special Characters Scenario**:
   - Description: Set a last name containing special characters or numbers to validate input patterns.
   - Test Steps: Call `setLastName` with a string like "O'Neil" or "Smith3".
   - Expected Result: Depending on the business requirements, the method should either accept these characters or throw a validation exception.

7. **SQL Injection Scenario**:
   - Description: Attempt to set a last name that includes SQL injection code to ensure that the system is protected against such attacks.
   - Test Steps: Call `setLastName` with a string like "'; DROP TABLE Users; --".
   - Expected Result: The system should treat the input as a normal string without executing it as SQL code, and there should be no impact on the database.

8. **Cross-Site Scripting (XSS) Scenario**:
   - Description: Set a last name containing HTML or JavaScript code to test for XSS vulnerabilities.
   - Test Steps: Call `setLastName` with a string like "<script>alert('XSS');</script>".
   - Expected Result: The system should escape or strip any HTML/JavaScript to prevent XSS attacks.

9. **Unicode Characters Scenario**:
   - Description: Set a last name with Unicode characters to ensure proper handling of international characters.
   - Test Steps: Call `setLastName` with a string containing Unicode characters like "Горбачёв" or "李".
   - Expected Result: The system should correctly handle and store the Unicode characters.

10. **Concurrent Access Scenario**:
    - Description: Simulate concurrent calls to `setLastName` to test thread safety.
    - Test Steps: Simultaneously call `setLastName` from multiple threads with different last names.
    - Expected Result: The system should correctly handle concurrent access, ensuring that the last name is set consistently without data corruption.

Each of these test scenarios would need to be verified against the actual business rules and constraints defined for the `setLastName` method. The presence of additional annotations or method logic would potentially change the expected results for some of these tests.
*/
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import jakarta.validation.ConstraintViolationException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Person_setLastName_4141db5e7c_Test {

	private Person person;

	@BeforeEach
	public void setUp() {
		person = new Person();
	}

	@Test
	public void testSetLastName_NormalInput() {
		String normalLastName = "Smith";
		person.setLastName(normalLastName);
		assertEquals(normalLastName, person.getLastName());
	}

	@Test
	public void testSetLastName_BlankStringInput() {
		String blankLastName = "";
		// TODO: Uncomment the line below when the validation logic is implemented
		// assertThrows(ConstraintViolationException.class, () ->
		// person.setLastName(blankLastName));
	}

	@Test
	public void testSetLastName_NullInput() {
		// TODO: Adjust the expected exception type according to your business rules
		assertThrows(IllegalArgumentException.class, () -> person.setLastName(null));
	}

	@Test
	public void testSetLastName_TrimmedInput() {
		String lastNameWithWhitespaces = "  Johnson  ";
		person.setLastName(lastNameWithWhitespaces);
		assertEquals(lastNameWithWhitespaces.trim(), person.getLastName());
	}

	@Test
	public void testSetLastName_LongStringInput() {
		String longLastName = "LooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongLastName";
		// TODO: Uncomment the line below when the length constraint validation logic is
		// implemented
		// assertThrows(ConstraintViolationException.class, () ->
		// person.setLastName(longLastName));
	}

	@Test
	public void testSetLastName_SpecialCharacters() {
		String specialCharLastName = "O'Neil";
		person.setLastName(specialCharLastName);
		assertEquals(specialCharLastName, person.getLastName());
	}

	@Test
	public void testSetLastName_SQLInjection() {
		String sqlInjectionLastName = "'; DROP TABLE Users; --";
		person.setLastName(sqlInjectionLastName);
		assertEquals(sqlInjectionLastName, person.getLastName());
	}

	@Test
	public void testSetLastName_XSSInput() {
		String xssLastName = "<script>alert('XSS');</script>";
		person.setLastName(xssLastName);
		assertEquals(xssLastName, person.getLastName());
	}

	@Test
	public void testSetLastName_UnicodeCharacters() {
		String unicodeLastName = "Горбачёв";
		person.setLastName(unicodeLastName);
		assertEquals(unicodeLastName, person.getLastName());
	}

	@Test
	public void testSetLastName_ConcurrentAccess() throws InterruptedException {
		Thread t1 = new Thread(() -> person.setLastName("LastName1"));
		Thread t2 = new Thread(() -> person.setLastName("LastName2"));
		t1.start();
		t2.start();
		t1.join();
		t2.join();
		// TODO: Validate the result according to the actual concurrency handling
		// mechanism
	}

}
