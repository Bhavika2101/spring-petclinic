/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario**: Test when a valid last name is provided.
   **Test Case**: Pass a valid last name such as "Smith" to the setLastName method.
   **Expected Result**: The last name should be set to "Smith" without any errors.

2. **Scenario**: Test when an empty string is passed as last name.
   **Test Case**: Pass an empty string "" to the setLastName method.
   **Expected Result**: As @NotBlank annotation is used, an error or exception should be thrown indicating that the last name cannot be blank.

3. **Scenario**: Test when a null value is passed as last name.
   **Test Case**: Pass a null to the setLastName method.
   **Expected Result**: As @NotBlank annotation is used, an error or exception should be thrown indicating that the last name cannot be null.

4. **Scenario**: Test when a last name with spaces is passed.
   **Test Case**: Pass a last name with leading, trailing, or multiple spaces in between like "  Smith  " to the setLastName method.
   **Expected Result**: The last name should be set to "  Smith  " without any errors. It is up to the business logic how to handle such cases.

5. **Scenario**: Test when a last name with special characters is passed.
   **Test Case**: Pass a last name with special characters like "Smith$%" to the setLastName method.
   **Expected Result**: The last name should be set to "Smith$%" without any errors. It is up to the business logic whether to allow special characters or not.

6. **Scenario**: Test when a last name with numbers is passed.
   **Test Case**: Pass a last name with numbers like "Smith123" to the setLastName method.
   **Expected Result**: The last name should be set to "Smith123" without any errors. It is up to the business logic whether to allow numbers or not.

7. **Scenario**: Test when a very long string is passed as last name.
   **Test Case**: Pass a very long string (beyond the acceptable limit, if any) to the setLastName method.
   **Expected Result**: Depending on the business logic, the method should either successfully set the last name, or throw an error indicating that the last name is too long.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class Person_setLastName_4141db5e7c_Test {

    @DisplayName("Test setLastName with valid names")
    @ParameterizedTest(name = "\"{0}\" should be valid last name")
    @MethodSource("validLastNameProvider")
    void testSetLastName_valid(String lastName) {
        Person person = new Person();
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @DisplayName("Test setLastName with invalid names")
    @ParameterizedTest(name = "\"{0}\" should be invalid last name")
    @MethodSource("invalidLastNameProvider")
    void testSetLastName_invalid(String lastName) {
        Person person = new Person();
        assertThrows(IllegalArgumentException.class, () -> person.setLastName(lastName));
    }

    static Stream<String> validLastNameProvider() {
        return Stream.of("Smith", "  Smith  ", "Smith$%", "Smith123", "SmithSmithSmithSmithSmithSmithSmithSmithSmithSmith");
    }

    static Stream<String> invalidLastNameProvider() {
        return Stream.of("", null);
    }
}
