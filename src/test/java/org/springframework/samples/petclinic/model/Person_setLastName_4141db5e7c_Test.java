/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario**: Test when a valid last name is provided.
   **Given**: A valid last name, e.g., "Smith".
   **When**: The `setLastName()` method is called.
   **Then**: The last name should be set to "Smith".

2. **Scenario**: Test when an empty string is provided as the last name.
   **Given**: An empty string "".
   **When**: The `setLastName()` method is called.
   **Then**: The method should throw a `ConstraintViolationException` due to `@NotBlank` annotation.

3. **Scenario**: Test when a null value is provided as the last name.
   **Given**: A null value.
   **When**: The `setLastName()` method is called.
   **Then**: The method should throw a `ConstraintViolationException` due to `@NotBlank` annotation.

4. **Scenario**: Test when a last name with leading and trailing spaces is provided.
   **Given**: A last name with leading and trailing spaces, e.g., " Smith ".
   **When**: The `setLastName()` method is called.
   **Then**: The last name should be set to " Smith ", as the method does not trim the input.

5. **Scenario**: Test when a long last name is provided.
   **Given**: A long last name which exceeds the column length in database (assuming the column length to be 255).
   **When**: The `setLastName()` method is called.
   **Then**: Depending on the database setup, it might either throw an exception or truncate the last name to fit the column length.

6. **Scenario**: Test when a last name with special characters is provided.
   **Given**: A last name with special characters, e.g., "O'Conner".
   **When**: The `setLastName()` method is called.
   **Then**: The last name should be set to "O'Conner", as the method does not sanitize the input.

7. **Scenario**: Test when a last name with numbers is provided.
   **Given**: A last name with numbers, e.g., "John3".
   **When**: The `setLastName()` method is called.
   **Then**: The last name should be set to "John3", as the method does not sanitize the input.
*/
package org.springframework.samples.petclinic.model;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class Person_setLastName_4141db5e7c_Test {

    private Person person;
    private Validator validator;

    @BeforeEach
    void setUp() {
        person = new Person();
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    void testSetLastName_ValidLastName() {
        person.setLastName("Smith");
        assertEquals("Smith", person.getLastName());
    }

    @Test
    void testSetLastName_EmptyLastName() {
        person.setLastName("");
        Set<ConstraintViolation<Person>> violations = validator.validate(person);
        assertFalse(violations.isEmpty());
    }

    @Test
    void testSetLastName_NullLastName() {
        person.setLastName(null);
        Set<ConstraintViolation<Person>> violations = validator.validate(person);
        assertFalse(violations.isEmpty());
    }

    @Test
    void testSetLastName_LastNameWithSpaces() {
        person.setLastName(" Smith ");
        assertEquals(" Smith ", person.getLastName());
    }

    @Test
    void testSetLastName_LongLastName() {
        String longLastName = "A".repeat(256);
        person.setLastName(longLastName);
        Set<ConstraintViolation<Person>> violations = validator.validate(person);
        assertFalse(violations.isEmpty());
    }

    @Test
    void testSetLastName_LastNameWithSpecialCharacters() {
        person.setLastName("O'Conner");
        assertEquals("O'Conner", person.getLastName());
    }

    @Test
    void testSetLastName_LastNameWithNumbers() {
        person.setLastName("John3");
        assertEquals("John3", person.getLastName());
    }
}
