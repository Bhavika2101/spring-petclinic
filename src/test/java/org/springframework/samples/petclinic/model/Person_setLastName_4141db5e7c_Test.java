/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the `setLastName` function's business logic, you would want to create test scenarios that ensure the function behaves as expected under various conditions. Here are several test scenarios:

1. **Normal Input Scenario**: 
   - Description: Set a valid last name and verify that it is correctly stored.
   - Test Steps: Call `setLastName` with a normal string, e.g., "Smith".
   - Expected Result: The `lastName` field should be updated to "Smith".

2. **Blank Input Scenario**:
   - Description: Validate that setting a blank last name is handled properly, given the `@NotBlank` annotation.
   - Test Steps: Call `setLastName` with a blank string, e.g., "" or " ".
   - Expected Result: An exception should be thrown indicating that the last name cannot be blank.

3. **Null Input Scenario**:
   - Description: Check how the method handles a `null` input, as `null` might be considered as not blank.
   - Test Steps: Call `setLastName` with `null`.
   - Expected Result: Depending on the business logic, it should either throw an exception or handle the `null` value appropriately (e.g., by setting the last name to `null` if that's valid in the context).

4. **Trimming Scenario**:
   - Description: Ensure that leading and trailing whitespaces are handled correctly, if applicable.
   - Test Steps: Call `setLastName` with a last name that has leading and/or trailing whitespace, e.g., " Johnson ".
   - Expected Result: Depending on the business requirements, the whitespaces should either be trimmed, or the value should be stored as-is.

5. **Long String Input Scenario**:
   - Description: Validate how the method handles excessively long strings, especially if there's a database column length limit (implied by the `@Column` annotation).
   - Test Steps: Call `setLastName` with a string that exceeds the expected column size limit.
   - Expected Result: An exception should be thrown or the input should be truncated to the maximum allowed length, depending on the business rules.

6. **Special Character Input Scenario**:
   - Description: Check the behavior when the last name contains special characters or punctuation.
   - Test Steps: Call `setLastName` with a string that contains special characters, e.g., "O'Neil".
   - Expected Result: The special characters should be accepted or rejected based on the business logic and data validation rules.

7. **SQL Injection Scenario**:
   - Description: Ensure that the method is not vulnerable to SQL injection attacks, assuming the last name is being stored in a database.
   - Test Steps: Call `setLastName` with a string that includes SQL code, e.g., "Smith'; DROP TABLE Users; --".
   - Expected Result: The SQL code should be treated as a normal string and should not affect the database operations.

8. **Unicode and Internationalization Scenario**:
   - Description: Confirm that the method can handle last names in different languages and character sets.
   - Test Steps: Call `setLastName` with a Unicode string, e.g., "李".
   - Expected Result: The Unicode string should be accepted and stored correctly.

9. **Concurrent Access Scenario**:
   - Description: Check that the method behaves correctly when called concurrently, which might be relevant if the object is shared across threads.
   - Test Steps: Call `setLastName` from multiple threads at the same time.
   - Expected Result: The last name should be set correctly, and there should be no race conditions or data corruption.

Each of these scenarios would be translated into one or more test cases with specific inputs and expected outcomes to validate the behavior of the `setLastName` method against the business requirements and constraints.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.samples.petclinic.model.Person;
import static org.junit.jupiter.api.Assertions.*;

public class Person_setLastName_4141db5e7c_Test {

    private Person person;

    @BeforeEach
    public void setUp() {
        person = new Person();
    }

    @Test
    public void testSetLastName_NormalInput() {
        String lastName = "Smith";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_BlankInput() {
        String lastName = "";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> person.setLastName(lastName));
        assertTrue(exception.getMessage().contains("last name cannot be blank"));
    }

    @Test
    public void testSetLastName_NullInput() {
        String lastName = null;
        person.setLastName(lastName);
        assertNull(person.getLastName());
    }

    @Test
    public void testSetLastName_TrimmingScenario() {
        String lastName = " Johnson ";
        person.setLastName(lastName);
        assertEquals(lastName.trim(), person.getLastName());
    }

    @Test
    public void testSetLastName_LongStringInput() {
        String lastName = "ThisLastNameIsWayTooLongToBeValidAndShouldCauseAnExceptionOrBeTruncated";
        Exception exception = assertThrows(IllegalArgumentException.class, () -> person.setLastName(lastName));
        assertTrue(exception.getMessage().contains("last name too long"));
    }

    @Test
    public void testSetLastName_SpecialCharacterInput() {
        String lastName = "O'Neil";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_SQLInjectionScenario() {
        String lastName = "Smith'; DROP TABLE Users; --";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName()); // Assuming proper escaping is handled elsewhere
    }

    @Test
    public void testSetLastName_UnicodeAndInternationalizationScenario() {
        String lastName = "李";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    // TODO: Implement a test for Concurrent Access Scenario if needed
}
