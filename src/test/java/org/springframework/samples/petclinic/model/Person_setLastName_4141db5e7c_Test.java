/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate that the `setLastName` function properly sets the `lastName` attribute.
   - **Input:** "Smith"
   - **Expected Output:** `lastName` attribute should be set to "Smith"

2. **Scenario:** Validate that the `setLastName` function handles null input gracefully.
   - **Input:** null
   - **Expected Output:** `lastName` attribute should be set to null, or an appropriate exception should be thrown if null is not allowed.

3. **Scenario:** Validate that the `setLastName` function can handle an empty string.
   - **Input:** ""
   - **Expected Output:** `lastName` attribute should be set to an empty string, or an appropriate exception should be thrown if empty strings are not allowed.

4. **Scenario:** Validate that the `setLastName` function can handle strings with special characters.
   - **Input:** "O'Conner"
   - **Expected Output:** `lastName` attribute should be set to "O'Conner"

5. **Scenario:** Validate that the `setLastName` function can handle strings with whitespace.
   - **Input:** " Van Gogh"
   - **Expected Output:** `lastName` attribute should be set to " Van Gogh"

6. **Scenario:** Validate that the `setLastName` function can handle very long strings.
   - **Input:** A string with 1000 characters
   - **Expected Output:** `lastName` attribute should be set to the 1000 character string, or an appropriate exception should be thrown if strings of this length are not allowed.

7. **Scenario:** Validate that the `setLastName` function can handle non-English characters.
   - **Input:** "Müller"
   - **Expected Output:** `lastName` attribute should be set to "Müller"

8. **Scenario:** Validate that the `setLastName` function works correctly with numeric characters.
   - **Input:** "1234"
   - **Expected Output:** `lastName` attribute should be set to "1234"

9. **Scenario:** Validate that the `setLastName` function can handle strings with leading or trailing whitespace.
   - **Input:** "  Smith  "
   - **Expected Output:** `lastName` attribute should be set to "  Smith  ", or the leading and trailing whitespace should be removed if it's not allowed.

10. **Scenario:** Validate that the `setLastName` function can handle strings consisting only of whitespace.
    - **Input:** "     "
    - **Expected Output:** `lastName` attribute should be set to "     ", or an appropriate exception should be thrown if strings of this type are not allowed.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Person_setLastName_4141db5e7c_Test {

    private Person person;

    @BeforeEach
    public void setup() {
        person = new Person();
    }

    @Test
    public void testSetLastName_ValidLastName() {
        String lastName = "Smith";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_NullLastName() {
        String lastName = null;
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_EmptyLastName() {
        String lastName = "";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_SpecialCharactersInLastName() {
        String lastName = "O'Conner";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_WhiteSpaceInLastName() {
        String lastName = " Van Gogh";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_LongLastName() {
        String lastName = new String(new char[1000]).replace("\0", "a");
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_NonEnglishCharactersInLastName() {
        String lastName = "Müller";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_NumericCharactersInLastName() {
        String lastName = "1234";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }

    @Test
    public void testSetLastName_WhiteSpaceAroundLastName() {
        String lastName = "  Smith  ";
        person.setLastName(lastName);
        assertEquals(lastName.trim(), person.getLastName());
    }

    @Test
    public void testSetLastName_OnlyWhiteSpaceInLastName() {
        String lastName = "     ";
        person.setLastName(lastName);
        assertEquals(lastName, person.getLastName());
    }
}
