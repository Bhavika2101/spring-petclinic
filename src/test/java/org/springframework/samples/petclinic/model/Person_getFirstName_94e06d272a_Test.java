/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1:**

**Test Objective:** To verify that the function `getFirstName` returns the first name of the person.

**Test Description:**

- Create a `Person` object with a valid first name.
- Call the `getFirstName` function on the `Person` object.
- Verify that the returned value is equal to the expected first name.

**Expected Result:**

The function `getFirstName` returns the first name of the person.

**Test Scenario 2:**

**Test Objective:** To verify that the function `getFirstName` returns an empty string when the first name is null.

**Test Description:**

- Create a `Person` object with a null first name.
- Call the `getFirstName` function on the `Person` object.
- Verify that the returned value is an empty string.

**Expected Result:**

The function `getFirstName` returns an empty string when the first name is null.

**Test Scenario 3:**

**Test Objective:** To verify that the function `getFirstName` returns an empty string when the first name is blank.

**Test Description:**

- Create a `Person` object with a blank first name.
- Call the `getFirstName` function on the `Person` object.
- Verify that the returned value is an empty string.

**Expected Result:**

The function `getFirstName` returns an empty string when the first name is blank.

**Test Scenario 4:**

**Test Objective:** To verify that the function `getFirstName` throws a `NullPointerException` when the `Person` object is null.

**Test Description:**

- Call the `getFirstName` function on a null `Person` object.
- Verify that the function throws a `NullPointerException`.

**Expected Result:**

The function `getFirstName` throws a `NullPointerException` when the `Person` object is null.
*/
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.samples.petclinic.model.Person;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class Person_getFirstName_94e06d272a_Test {

    @Autowired
    private Person person;

    @Test
    @DisplayName("Test to verify that getFirstName returns the first name of the person")
    void testGetFirstName_WithValidFirstName() {
        // TODO: Change the first name to a valid value
        String expectedFirstName = "John";
        person.setFirstName(expectedFirstName);

        String actualFirstName = person.getFirstName();

        assertThat(actualFirstName).isEqualTo(expectedFirstName);
    }

    @Test
    @DisplayName("Test to verify that getFirstName returns an empty string when the first name is null")
    void testGetFirstName_WithNullFirstName() {
        person.setFirstName(null);

        String actualFirstName = person.getFirstName();

        assertThat(actualFirstName).isEmpty();
    }

    @Test
    @DisplayName("Test to verify that getFirstName returns an empty string when the first name is blank")
    void testGetFirstName_WithBlankFirstName() {
        person.setFirstName("");

        String actualFirstName = person.getFirstName();

        assertThat(actualFirstName).isEmpty();
    }

    @Test
    @DisplayName("Test to verify that getFirstName throws a NullPointerException when the Person object is null")
    void testGetFirstName_WithNullPerson() {
        Person nullPerson = null;

        assertThatThrownBy(() -> nullPerson.getFirstName()).isInstanceOf(NullPointerException.class);
    }
}
