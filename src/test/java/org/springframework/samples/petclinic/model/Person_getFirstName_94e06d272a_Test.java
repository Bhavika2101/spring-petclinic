/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4

1. **Scenario 1:** Test when the firstName is a valid non-blank string. In this scenario, the getFirstName() function should return the given firstName as it is.

2. **Scenario 2:** Test when the firstName is a blank string. As per the @NotBlank annotation, the getFirstName() function should throw a ConstraintViolationException.

3. **Scenario 3:** Test when the firstName is null. The function getFirstName() should return null as it doesn't seem to have any null checks.

4. **Scenario 4:** Test when the firstName contains special characters or numbers. The getFirstName() function should return the string as it is since there doesn't seem to be any restrictions on the format of the firstName.

5. **Scenario 5:** Test when the firstName is a long string. This scenario is to test if the function can handle and return long strings properly.

6. **Scenario 6:** Test when the firstName is a single character. This scenario is to test if the function can handle and return single character strings properly.

7. **Scenario 7:** Test when the firstName contains whitespace at the start or end. The function should return the firstName as it is, including the whitespace, since there doesn't seem to be any trimming operation in the function.

8. **Scenario 8:** Test with multiple sets of data. This scenario is to test if the function can handle multiple calls and return the expected results in each case.

9. **Scenario 9:** Test when the firstName is an empty string. The function should throw a ConstraintViolationException as per the @NotBlank annotation.

10. **Scenario 10:** Test when the function is called concurrently from multiple threads. This scenario is to test if the function is thread-safe.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import jakarta.validation.ConstraintViolationException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class Person_getFirstName_94e06d272a_Test {

    private Person person;

    @BeforeEach
    public void setUp() {
        person = new Person();
    }

    @Test
    public void testGetFirstName_ValidName() {
        String firstName = "John";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testGetFirstName_BlankName() {
        String firstName = " ";
        person.setFirstName(firstName);
        assertThrows(ConstraintViolationException.class, () -> person.getFirstName());
    }

    @Test
    public void testGetFirstName_NullName() {
        person.setFirstName(null);
        assertNull(person.getFirstName());
    }

    @Test
    public void testGetFirstName_SpecialCharName() {
        String firstName = "J#hn$123";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testGetFirstName_LongName() {
        String firstName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohn";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testGetFirstName_SingleCharName() {
        String firstName = "J";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testGetFirstName_WhiteSpaceName() {
        String firstName = " John ";
        person.setFirstName(firstName);
        assertEquals(firstName, person.getFirstName());
    }

    @Test
    public void testGetFirstName_MultipleDataSets() {
        String firstName1 = "John";
        String firstName2 = "Doe";
        person.setFirstName(firstName1);
        assertEquals(firstName1, person.getFirstName());
        person.setFirstName(firstName2);
        assertEquals(firstName2, person.getFirstName());
    }

    @Test
    public void testGetFirstName_EmptyName() {
        String firstName = "";
        person.setFirstName(firstName);
        assertThrows(ConstraintViolationException.class, () -> person.getFirstName());
    }

    @Test
    public void testGetFirstName_ConcurrentAccess() throws InterruptedException {
        String firstName1 = "John";
        String firstName2 = "Doe";

        Thread t1 = new Thread(() -> person.setFirstName(firstName1));
        Thread t2 = new Thread(() -> person.setFirstName(firstName2));

        t1.start();
        t2.start();

        t1.join();
        t2.join();

        assertTrue(person.getFirstName().equals(firstName1) || person.getFirstName().equals(firstName2));
    }
}
