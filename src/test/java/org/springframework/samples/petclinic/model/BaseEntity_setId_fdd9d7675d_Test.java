/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Vertex AI and AI Model code-bison

 **Test Scenario 1: Check if the ID is set correctly.**

- Given a valid ID, when the setId method is called, the ID should be set correctly.
- Expected Outcome: The ID should be set to the specified value.

**Test Scenario 2: Check if the ID is not set to null.**

- Given a null value for the ID, when the setId method is called, the ID should not be set to null.
- Expected Outcome: The ID should remain null.

**Test Scenario 3: Check if the ID is not set to a negative value.**

- Given a negative value for the ID, when the setId method is called, the ID should not be set to a negative value.
- Expected Outcome: The ID should remain null.

**Test Scenario 4: Check if the ID is not set to a non-integer value.**

- Given a non-integer value for the ID, when the setId method is called, the ID should not be set to a non-integer value.
- Expected Outcome: The ID should remain null.

**Test Scenario 5: Check if the ID is not set to a value that is too large.**

- Given a value that is too large for the ID, when the setId method is called, the ID should not be set to a value that is too large.
- Expected Outcome: The ID should remain null.

**Test Scenario 6: Check if the ID is not set to a value that is too small.**

- Given a value that is too small for the ID, when the setId method is called, the ID should not be set to a value that is too small.
- Expected Outcome: The ID should remain null.
*/
import org.junit.jupiter.api.Test;
import org.springframework.samples.petclinic.model.BaseEntity;

import static org.assertj.core.api.Assertions.assertThat;

class BaseEntity_setId_fdd9d7675d_Test {

    @Test
    void testSetId_ValidId() {
        BaseEntity entity = new BaseEntity();
        entity.setId(1);
        assertThat(entity.getId()).isEqualTo(1);
    }

    @Test
    void testSetId_NullId() {
        BaseEntity entity = new BaseEntity();
        entity.setId(null);
        assertThat(entity.getId()).isNull();
    }

    @Test
    void testSetId_NegativeId() {
        BaseEntity entity = new BaseEntity();
        entity.setId(-1);
        assertThat(entity.getId()).isNull();
    }

    @Test
    void testSetId_NonIntegerId() {
        BaseEntity entity = new BaseEntity();
        entity.setId("1");
        assertThat(entity.getId()).isNull();
    }

    @Test
    void testSetId_TooLargeId() {
        BaseEntity entity = new BaseEntity();
        entity.setId(Integer.MAX_VALUE + 1);
        assertThat(entity.getId()).isNull();
    }

    @Test
    void testSetId_TooSmallId() {
        BaseEntity entity = new BaseEntity();
        entity.setId(Integer.MIN_VALUE - 1);
        assertThat(entity.getId()).isNull();
    }
}
