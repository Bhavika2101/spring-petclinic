/*
Test generated by RoostGPT for test pom-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Set a valid ID**
   Description: Test the setId function with a valid integer ID. The function should take the input ID and set it as the object's ID without throwing any exceptions.

2. **Scenario: Set a null ID**
   Description: Test the setId function with a null value. This scenario is to check how the function handles null values. Depending on the business logic, it may either throw an exception or accept null as a valid value.

3. **Scenario: Set a negative ID**
   Description: Test the setId function with a negative integer. In many cases, IDs are non-negative numbers, so the function should throw an exception or return an error.

4. **Scenario: Set a large ID**
   Description: Test the setId function with a large number. This is to test the function's ability to handle large numbers, and to see if there are any limits on the size of the ID.

5. **Scenario: Set ID after it's already been set**
   Description: Test the setId function by calling it twice in a row. This is to test if the function allows the ID to be changed after it's been set, or if it locks the ID after the first assignment.

6. **Scenario: Set ID with maximum integer value**
   Description: Test the setId function with the maximum integer value. This is to check if the function can handle the maximum value of an integer in Java.

7. **Scenario: Set ID with minimum integer value**
   Description: Test the setId function with the minimum integer value. This is to check if the function can handle the minimum value of an integer in Java.

8. **Scenario: Set ID after object deletion**
   Description: Test the setId function after the object has been deleted. This is to check how the function behaves when the object no longer exists.

9. **Scenario: Set ID concurrently**
   Description: Test the setId function with multiple threads calling it at the same time. This is to check if the function is thread-safe.

10. **Scenario: Set ID with zero**
    Description: Test the setId function with zero as the input. This is to check if the function can handle zero as a valid input, as in many cases, ID starts from 1.
*/
package org.springframework.samples.petclinic.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BaseEntity_setId_fdd9d7675d_Test {
    private BaseEntity baseEntity;

    @BeforeEach
    public void setup() {
        baseEntity = new BaseEntity();
    }

    @Test
    public void testSetId_ValidId() {
        Integer validId = 5;
        baseEntity.setId(validId);
        assertEquals(validId, baseEntity.getId());
    }

    @Test
    public void testSetId_NullId() {
        baseEntity.setId(null);
        assertNull(baseEntity.getId());
    }

    @Test
    public void testSetId_NegativeId() {
        Integer negativeId = -5;
        baseEntity.setId(negativeId);
        assertEquals(negativeId, baseEntity.getId());
    }

    @Test
    public void testSetId_LargeId() {
        Integer largeId = Integer.MAX_VALUE;
        baseEntity.setId(largeId);
        assertEquals(largeId, baseEntity.getId());
    }

    @Test
    public void testSetId_ChangeId() {
        Integer firstId = 5;
        Integer secondId = 10;
        baseEntity.setId(firstId);
        baseEntity.setId(secondId);
        assertEquals(secondId, baseEntity.getId());
    }

    @Test
    public void testSetId_MaxIntegerValue() {
        Integer maxInt = Integer.MAX_VALUE;
        baseEntity.setId(maxInt);
        assertEquals(maxInt, baseEntity.getId());
    }

    @Test
    public void testSetId_MinIntegerValue() {
        Integer minInt = Integer.MIN_VALUE;
        baseEntity.setId(minInt);
        assertEquals(minInt, baseEntity.getId());
    }

    @Test
    public void testSetId_AfterObjectDeletion() {
        baseEntity = null;
        assertThrows(NullPointerException.class, () -> baseEntity.setId(5));
    }

    @Test
    public void testSetId_Concurrently() throws InterruptedException {
        Integer id = 5;
        Thread thread1 = new Thread(() -> baseEntity.setId(id));
        Thread thread2 = new Thread(() -> baseEntity.setId(id));

        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

        assertEquals(id, baseEntity.getId());
    }

    @Test
    public void testSetId_Zero() {
        Integer zeroId = 0;
        baseEntity.setId(zeroId);
        assertEquals(zeroId, baseEntity.getId());
    }
}
