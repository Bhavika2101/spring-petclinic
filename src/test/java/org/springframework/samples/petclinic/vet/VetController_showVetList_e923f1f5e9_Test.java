/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

Here are some test scenarios to validate the business logic of the `showVetList` method:

1. **Pagination Test Scenarios:**
    - Verify that when `page` is 1, the method retrieves the first page of vets.
    - Verify that for a valid `page` number greater than 1, the method retrieves the expected page.
    - Verify that if `page` is less than 1, the method handles it correctly (either by throwing an error or defaulting to the first page).
    - Verify that if `page` is beyond the total number of pages, the method handles it correctly (either by throwing an error or showing the last page).
    - Verify that the `Pageable` instance created within `findPaginated` reflects the correct page number and default size.

2. **Functionality Test Scenarios:**
    - Verify that the method returns a non-null and non-empty `Vets` object when there are vets to display.
    - Verify that the method returns an empty `Vets` object when there are no vets to display.
    - Verify that the `Vets` object contains the correct number of vet entries as per the page size.
    - Verify that the `Vets` object contains the correct vet entries corresponding to the requested page.
    - Verify that the `model` is correctly populated with pagination attributes (current page, total pages, etc.).

3. **Integration Test Scenarios:**
    - Verify the integration with the `findPaginated` method, ensuring that it is called with the correct `Pageable` argument.
    - Verify the integration with the `addPaginationModel` method, ensuring that it is called with the correct arguments and that the return value is as expected.

4. **Exception Handling Test Scenarios:**
    - Verify that the method handles null or invalid inputs gracefully without throwing unexpected exceptions.
    - Verify that the method handles any exceptions thrown by `findPaginated` or `addPaginationModel` appropriately.

5. **User Interface Test Scenarios:**
    - Verify that the correct view/template name is returned by the method for rendering the vet list.
    - Verify that the `model` contains the necessary attributes for the view to display the vet list and pagination controls correctly.

6. **Performance Test Scenarios:**
    - Verify that the method performs well with a large number of vet entries (stress test).
    - Verify that the pagination logic does not introduce significant latency or resource usage.

7. **Security Test Scenarios:**
    - Verify that the method does not expose sensitive data about vets or the system.
    - Verify that the method is protected against SQL injection or other security vulnerabilities through the `page` parameter.

8. **Edge Case Test Scenarios:**
    - Verify the behavior when `page` parameter is a string or special character.
    - Verify the behavior when multiple requests are made simultaneously for different pages.

These test scenarios cover a range of potential test cases that should be considered when validating the `showVetList` function. However, specific details of the `findPaginated` and `addPaginationModel` methods would be necessary to write more detailed test cases.
*/
package org.springframework.samples.petclinic.vet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.ui.Model;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class VetController_showVetList_e923f1f5e9_Test {

    @Mock
    private VetRepository vetRepository;
    
    @Mock
    private Model model;
    
    private VetController vetController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        vetController = new VetController(vetRepository);
    }

    @Test
    void testShowVetList_FirstPage() {
        // Arrange
        int page = 1;
        List<Vet> vetsList = Arrays.asList(mock(Vet.class), mock(Vet.class));
        Page<Vet> paginated = new PageImpl<>(vetsList);
        when(vetRepository.findAll(any())).thenReturn(paginated);
        
        // Act
        String viewName = vetController.showVetList(page, model);
        
        // Assert
        assertEquals("vets/vetList", viewName);
        verify(vetRepository).findAll(any());
        verify(model).addAttribute(eq("currentPage"), eq(page));
        verify(model).addAttribute(eq("totalPages"), eq(paginated.getTotalPages()));
        verify(model).addAttribute(eq("totalItems"), eq(paginated.getTotalElements()));
        verify(model).addAttribute(eq("listVets"), eq(vetsList));
    }

    @Test
    void testShowVetList_EmptyVets() {
        // Arrange
        int page = 1;
        Page<Vet> emptyPaginated = new PageImpl<>(Collections.emptyList());
        when(vetRepository.findAll(any())).thenReturn(emptyPaginated);
        
        // Act
        String viewName = vetController.showVetList(page, model);
        
        // Assert
        assertEquals("vets/vetList", viewName);
        verify(vetRepository).findAll(any());
        verify(model).addAttribute(eq("currentPage"), eq(page));
        verify(model).addAttribute(eq("totalPages"), eq(emptyPaginated.getTotalPages()));
        verify(model).addAttribute(eq("totalItems"), eq(emptyPaginated.getTotalElements()));
        verify(model).addAttribute(eq("listVets"), eq(Collections.emptyList()));
    }
}
