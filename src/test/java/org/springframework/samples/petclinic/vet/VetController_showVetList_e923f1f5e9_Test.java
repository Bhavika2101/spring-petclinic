/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

Here are some test scenarios to validate the business logic of the `showVetList` function:

1. **Pagination Test Scenarios:**
    - Verify that when `page` is 1, the first page of vets is returned.
    - Verify that when `page` is a number within the valid range (e.g., 2, 3, etc.), the corresponding page of vets is returned.
    - Verify that when `page` is greater than the total number of pages available, an appropriate response is returned (possibly an empty list or a last available page).
    - Verify that when `page` is a negative number, an appropriate error message or handling is performed.
    - Verify that when `page` is not provided, the default value (1) is used, and the first page is returned.
    - Verify that the `Pageable` instance created within the `findPaginated` method reflects the correct page number and default page size.

2. **Model Attribute Test Scenarios:**
    - Verify that the `model` object contains the correct attributes after the `addPaginationModel` function is called, including pagination information such as current page, total pages, page size, etc.
    - Verify that the `model` object contains a list of vets (`vetList`) with the expected number of entries as per the page size.
    - Verify that the `vetList` attribute within the `model` contains the correct vet entries corresponding to the requested page number.

3. **Vets List Test Scenarios:**
    - Verify that the `vets.getVetList()` is not null and contains the expected number of vet entries after adding them from the `paginated` result.
    - Verify that the `vets.getVetList()` contains the correct vet entries with valid details (e.g., vet names, specialties, etc.).
    - Verify that when `paginated` contains no vets (empty page), the `vetList` is also empty.

4. **Function Return Value Test Scenarios:**
    - Verify that the `showVetList` function returns the correct view name or template that should be rendered.
    - Verify that in case of any exceptions or errors, the function returns or handles the error according to the defined business logic.

5. **Integration Test Scenarios:**
    - Verify that the `findPaginated` method is called with the correct page number argument.
    - Verify that the method integrates correctly with the `addPaginationModel` method and passes the necessary parameters.
    - Verify that the overall flow of the method works seamlessly from receiving the `page` parameter to returning the view name, including the interaction with the `Vets` class and the `Model`.

6. **Edge Case Test Scenarios:**
    - Verify the behavior when the `Vets` class or `findPaginated` method throws an exception.
    - Verify the behavior when the database or data source is unavailable or returns an error.
    - Verify the behavior when the `Model` object is not properly initialized or is null.

By validating these scenarios, you would be able to ensure that the `showVetList` function operates correctly according to the business logic and handles different cases appropriately.
*/
package org.springframework.samples.petclinic.vet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.ui.Model;
import java.util.ArrayList;
import java.util.List;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class VetController_showVetList_e923f1f5e9_Test {

    private VetController vetController;

    @Mock
    private VetRepository vetRepository;

    @Mock
    private Model model;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        vetController = new VetController(vetRepository);
    }

    @Test
    public void testShowVetList_DefaultPage() {
        // Setup mock environment
        List<Vet> vetsList = new ArrayList<>();
        Page<Vet> page = new PageImpl<>(vetsList);
        when(vetRepository.findAll(anyInt())).thenReturn(page);

        // Execute the method to test
        String viewName = vetController.showVetList(1, model);

        // Assertions
        assertEquals("vets/vetList", viewName);
        verify(model).addAttribute("currentPage", 1);
        verify(model).addAttribute("totalPages", page.getTotalPages());
        verify(model).addAttribute("totalItems", page.getTotalElements());
        verify(model).addAttribute("listVets", vetsList);
    }

    @Test
    public void testShowVetList_SpecificPage() {
        // Setup mock environment
        List<Vet> vetsList = new ArrayList<>();
        Page<Vet> page = new PageImpl<>(vetsList);
        when(vetRepository.findAll(anyInt())).thenReturn(page);

        // Execute the method to test
        String viewName = vetController.showVetList(2, model);

        // Assertions
        assertEquals("vets/vetList", viewName);
        verify(model).addAttribute("currentPage", 2);
        verify(model).addAttribute("totalPages", page.getTotalPages());
        verify(model).addAttribute("totalItems", page.getTotalElements());
        verify(model).addAttribute("listVets", vetsList);
    }

    // TODO: Add more test cases for other scenarios mentioned in the test case scenarios
}
