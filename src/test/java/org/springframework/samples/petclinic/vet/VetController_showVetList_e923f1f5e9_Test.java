/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

Here are some test scenarios to validate the business logic of the `showVetList` method:

1. **Pagination Test Scenarios:**
    - Verify that when `page` is 1, the method retrieves the first page of vets.
    - Verify that for a valid `page` number greater than 1, the method retrieves the expected page.
    - Verify that if `page` is less than 1, the method handles it correctly (either by throwing an error or defaulting to the first page).
    - Verify that if `page` is beyond the total number of pages, the method handles it correctly (either by throwing an error or showing the last page).
    - Verify that the `Pageable` instance created within `findPaginated` reflects the correct page number and default size.

2. **Model Population Test Scenarios:**
    - Verify that the `model` is populated with pagination details (such as current page, total pages, page size, etc.).
    - Verify that the `model` is populated with the list of vets from the `paginated` object.
    - Verify that the `model` does not contain any unexpected attributes.

3. **Function Return Value Test Scenarios:**
    - Verify that the method returns the expected view name after adding the model attributes.
    - Verify that the method returns an error view or message when an exception occurs during fetching or processing the data.

4. **Data Integrity Test Scenarios:**
    - Verify that the list of vets in the `model` matches the vets in the `paginated` object.
    - Verify that all expected properties of the vets (such as id, name, specialty, etc.) are present and correctly populated.

5. **Integration with `findPaginated` Method Test Scenarios:**
    - Verify that the `findPaginated` method is called with the correct page number.
    - Verify that the behavior is correct when `findPaginated` returns an empty page (no vets available).
    - Verify that the behavior is correct when `findPaginated` throws an exception.

6. **User Interface Integration Test Scenarios:**
    - Verify that the pagination controls are displayed correctly on the user interface.
    - Verify that the user can navigate to a different page using the pagination controls.

7. **Boundary Conditions Test Scenarios:**
    - Verify the behavior when there is exactly one page of vets.
    - Verify the behavior when the number of vets is exactly at the page size limit.
    - Verify the behavior when there are no vets to display (empty list scenario).

8. **Security and Permissions Test Scenarios:**
    - Verify that the method can only be accessed by users with the correct permissions (if applicable).
    - Verify that sensitive information is not leaked through the vets list or pagination details.

9. **Performance Test Scenarios:**
    - Verify that the method performs well with a large number of vets (stress test).
    - Verify that the method handles concurrent requests efficiently.

10. **Validation Test Scenarios:**
    - Verify that the method correctly handles non-integer input for the `page` parameter.
    - Verify that the method handles special characters or malicious input in the `page` parameter to prevent injection attacks.

For each of these scenarios, you would typically write unit tests, integration tests, and/or UI tests to ensure that the `showVetList` method behaves as expected under various conditions.
*/
package org.springframework.samples.petclinic.vet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class VetController_showVetList_e923f1f5e9_Test {

	@Mock
	private VetRepository vetRepository;

	private VetController vetController;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
		vetController = new VetController(vetRepository);
	}

	@Test
	void testShowVetList_FirstPage() {
		// Arrange
		Vet vet = new Vet();
		Page<Vet> page = new PageImpl<>(Collections.singletonList(vet));
		when(vetRepository.findAll(any())).thenReturn(page);
		Model model = new ExtendedModelMap();

		// Act
		String viewName = vetController.showVetList(1, model);

		// Assert
		assertEquals("vets/vetList", viewName);
		assertEquals(1, ((List<?>) model.asMap().get("listVets")).size());
		assertEquals(1, model.asMap().get("currentPage"));
		assertEquals(1, model.asMap().get("totalPages"));
	}

	@Test
	void testShowVetList_SecondPage() {
		// Arrange
		Vet vet1 = new Vet();
		Vet vet2 = new Vet();
		Page<Vet> page = new PageImpl<>(List.of(vet1, vet2));
		when(vetRepository.findAll(any())).thenReturn(page);
		Model model = new ExtendedModelMap();

		// Act
		String viewName = vetController.showVetList(2, model);

		// Assert
		assertEquals("vets/vetList", viewName);
		assertEquals(2, ((List<?>) model.asMap().get("listVets")).size());
		assertEquals(2, model.asMap().get("currentPage"));
		assertEquals(1, model.asMap().get("totalPages"));
	}

}
