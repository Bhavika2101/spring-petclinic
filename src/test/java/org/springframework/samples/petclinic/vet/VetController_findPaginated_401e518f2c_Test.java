/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `findPaginated` method, you would need to consider creating test scenarios that cover various aspects of pagination and repository interaction. Below are some test scenarios that you can use to validate the method:

1. **Happy Path Scenarios:**
   - Verify that the method returns a `Page<Vet>` object when called with a valid page number.
   - Verify that the `Page<Vet>` object contains the correct number of items (up to 5 vets, as per the page size) when the total number of vets is more than the page size.
   - Verify that the `Page<Vet>` object contains all remaining items when the total number of vets is less than the page size and the last page is requested.
   - Verify that the `Page<Vet>` object contains the correct items corresponding to the requested page number.

2. **Boundary Conditions:**
   - Verify that the method handles the first page request correctly (i.e., `page = 1`).
   - Verify that the method handles the last page request correctly when the total number of vets is exactly divisible by the page size.
   - Verify that the method handles the last page request correctly when the total number of vets is not exactly divisible by the page size.

3. **Input Validation:**
   - Verify that the method returns an empty `Page<Vet>` object or an appropriate error when called with a page number less than 1.
   - Verify that the method returns an empty `Page<Vet>` object or an appropriate error when called with a page number greater than the total number of pages available.

4. **Repository Interaction:**
   - Verify that the method correctly interacts with the `vetRepository` by passing the correct `Pageable` object.
   - Verify that the method uses the `findAll` method of the repository with the correct page and size parameters.
   - Verify that the method behaves correctly in case the `vetRepository` throws an exception (e.g., database connection issue).

5. **Edge Cases:**
   - Verify the behavior when the `vetRepository` returns null or an empty list.
   - Verify the behavior when the `vetRepository` contains a very large number of vets, testing the method's ability to handle large data sets.
   - Verify the behavior when there are no vets present in the repository.

6. **Concurrency:**
   - Verify that the method handles concurrent requests correctly, ensuring that each request gets the correct page of vets without interference from other requests.

7. **Performance:**
   - Verify that the method performs well under heavy load, particularly when dealing with a large number of page requests in a short period of time.

8. **Security:**
   - If applicable, verify that the method respects security constraints and only returns vets that the requesting user is authorized to view.

Remember, these scenarios are to guide the creation of actual test cases, and depending on the test framework and approach (e.g., unit testing with mocks, integration testing, etc.), the implementation of these scenarios may vary.
*/
package org.springframework.samples.petclinic.vet;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

@ExtendWith(MockitoExtension.class)
public class VetController_findPaginated_401e518f2c_Test {

    private VetController vetController;

    @Mock
    private VetRepository vetRepository;

    @BeforeEach
    public void setup() {
        vetController = new VetController(vetRepository);
    }

    @Test
    public void testFindPaginated_HappyPath() {
        int page = 1;
        List<Vet> vetsList = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            vetsList.add(new Vet());
        }
        Page<Vet> pageVets = new PageImpl<>(vetsList, PageRequest.of(page - 1, 5), 10);

        when(vetRepository.findAll(any(PageRequest.class))).thenReturn(pageVets);

        Page<Vet> result = vetController.findPaginated(page);

        assertEquals(5, result.getContent().size());
        assertEquals(10, result.getTotalElements());
    }

    @Test
    public void testFindPaginated_LastPageWithLessThanPageSize() {
        int page = 2;
        List<Vet> vetsList = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            vetsList.add(new Vet());
        }
        Page<Vet> pageVets = new PageImpl<>(vetsList, PageRequest.of(page - 1, 5), 8);

        when(vetRepository.findAll(any(PageRequest.class))).thenReturn(pageVets);

        Page<Vet> result = vetController.findPaginated(page);

        assertEquals(3, result.getContent().size());
        assertEquals(8, result.getTotalElements());
    }

    @Test
    public void testFindPaginated_EmptyPage() {
        int page = 3;
        Page<Vet> pageVets = new PageImpl<>(new ArrayList<>(), PageRequest.of(page - 1, 5), 0);

        when(vetRepository.findAll(any(PageRequest.class))).thenReturn(pageVets);

        Page<Vet> result = vetController.findPaginated(page);

        assertTrue(result.getContent().isEmpty());
        assertEquals(0, result.getTotalElements());
    }

    // TODO: Add more test cases to cover boundary conditions, input validation, repository interaction, edge cases, concurrency, performance, and security if applicable.
}
