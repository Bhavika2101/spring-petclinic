/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `cacheConfiguration` method, we need to focus on what the method is supposed to do. The method creates a `MutableConfiguration` object for caching purposes and enables statistics. Here are several test scenarios:

1. **Default Configuration Test:**
   - Validate that the method returns a non-null `MutableConfiguration` instance.

2. **Statistics Enabled Test:**
   - Verify that the returned `MutableConfiguration` has statistics enabled (should return `true` when `isStatisticsEnabled()` is called).

3. **Configuration Properties Test:**
   - Ensure no additional unintended properties are set (e.g., check that the default expiration policy, cache loader, etc., are in their default states if not explicitly set in the method).

4. **Immutability Test:**
   - Once the configuration is used to create a cache, ensure that further changes to the `MutableConfiguration` instance do not affect the already created cache.

5. **Singleton Test:**
   - If the business logic dictates that the same configuration should be used across multiple caches, ensure that the method returns a singleton configuration object or that multiple calls to the method return equivalent configuration objects.

6. **Thread Safety Test:**
   - If the configuration is expected to be used in a multi-threaded environment, verify that accessing and using the returned `MutableConfiguration` object in multiple threads does not cause any issues.

7. **Integration with JCacheManagerCustomizer Test:**
   - If the `cacheConfiguration` is expected to be used with a `JCacheManagerCustomizer`, create a mock customizer and ensure that it properly interacts with the configuration returned by the method.

8. **Bean Creation Test:**
   - Since this method could be annotated with `@Bean` in a real-world scenario, ensure that the Spring context successfully creates and manages the bean, and that it can be injected into other components.

9. **Performance Test:**
   - Measure the time it takes to create the `MutableConfiguration` object to ensure it meets any performance criteria, especially if this method is called frequently.

10. **Exception Handling Test:**
    - Verify that the method handles any exceptions gracefully during the creation of the `MutableConfiguration` object, particularly if additional configuration settings are added later that might throw exceptions.

11. **Serialization Test:**
    - If the `MutableConfiguration` object is expected to be serializable, test that the object can be serialized and deserialized without losing any configuration settings.

12. **Compatibility Test:**
    - Ensure that the configuration is compatible with the cache provider that will be used in production, and that it adheres to any required specifications or limitations of that provider.

Remember, these test scenarios are high-level descriptions of what you would want to validate. They would need to be translated into actual test cases with assertions to verify the expected outcomes when writing test code.
*/
package org.springframework.samples.petclinic.system;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.cache.configuration.MutableConfiguration;
import javax.cache.configuration.Configuration;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@Configuration
@EnableCaching
public class CacheConfiguration_cacheConfiguration_2463e86670_Test {

    private CacheConfiguration cacheConfiguration;

    @BeforeEach
    public void setup() {
        cacheConfiguration = new CacheConfiguration();
    }

    @Test
    public void testDefaultConfiguration() {
        Configuration<Object, Object> config = cacheConfiguration.cacheConfiguration();
        assertNotNull(config, "The configuration should not be null");
    }

    @Test
    public void testStatisticsEnabled() {
        MutableConfiguration<Object, Object> config = (MutableConfiguration<Object, Object>) cacheConfiguration.cacheConfiguration();
        assertTrue(config.isStatisticsEnabled(), "Statistics should be enabled");
    }

    // TODO: Add more test cases based on the provided test scenarios

    public static class CacheConfiguration {

        public CacheConfiguration() {
        }

        public JCacheManagerCustomizer petclinicCacheConfigurationCustomizer() {
            return cm -> cm.createCache("vets", cacheConfiguration());
        }

        private javax.cache.configuration.Configuration<Object, Object> cacheConfiguration() {
            return new MutableConfiguration<>().setStatisticsEnabled(true);
        }
    }
}
