/*
Test generated by RoostGPT for test java-springboot-unit-testing using AI Type Open AI and AI Model gpt-4-1106-preview

To validate the business logic of the `petclinicCacheConfigurationCustomizer` function without writing any test code, we need to define a set of test scenarios that consider the expected behavior of the function. The function is expected to customize a JCacheManager by creating a cache named "vets" with a certain configuration. Here are some test scenarios to consider:

1. **Cache Creation Test Scenario**
   - **Scenario**: Verify that the `petclinicCacheConfigurationCustomizer` function creates a cache with the name "vets".
   - **Expected Result**: The cache named "vets" should exist within the cache manager after the customizer has been applied.

2. **Cache Configuration Test Scenario**
   - **Scenario**: Ensure that the cache "vets" is configured with the settings defined in the `cacheConfiguration()` method.
   - **Expected Result**: The cache "vets" should have all the configurations (e.g., expiration policy, statistics enabled) as specified in the `cacheConfiguration()` method.

3. **Cache Manager Customization Invocation Test Scenario**
   - **Scenario**: Confirm that the customization provided by `petclinicCacheConfigurationCustomizer` is correctly invoked by the cache manager.
   - **Expected Result**: The customizer lambda should be executed by the cache manager during the cache manager's initialization or configuration phase.

4. **Exception Handling Test Scenario**
   - **Scenario**: Validate the behavior when the cache creation fails (e.g., due to an existing cache with the same name and incompatible configuration).
   - **Expected Result**: Appropriate exception handling or logging should occur, and the system should either recover gracefully or notify the user of the issue.

5. **Idempotency Test Scenario**
   - **Scenario**: Check if calling `petclinicCacheConfigurationCustomizer` multiple times results in the same cache configuration without side effects.
   - **Expected Result**: Multiple invocations of the customizer should not cause errors or change the configuration of the already created "vets" cache.

6. **Concurrent Cache Creation Test Scenario**
   - **Scenario**: Assess the behavior when multiple threads attempt to create the "vets" cache concurrently using the customizer.
   - **Expected Result**: The cache should be created once, and subsequent attempts should either use the existing cache or handle the situation without causing inconsistency or failure.

7. **Performance Test Scenario**
   - **Scenario**: Evaluate the performance impact of applying the `petclinicCacheConfigurationCustomizer` on the cache manager's initialization time.
   - **Expected Result**: The cache creation and configuration should complete within an acceptable time frame, not causing significant delays in the cache manager's startup.

8. **Integration Test Scenario**
   - **Scenario**: Check if the `petclinicCacheConfigurationCustomizer` integrates well with other beans and components within the Spring context.
   - **Expected Result**: The customizer should not interfere with the initialization and functioning of other beans and should be compatible with the overall Spring application context.

9. **Cache Usage Test Scenario**
   - **Scenario**: Verify that the "vets" cache can be used as expected by other components within the application after being created by the customizer.
   - **Expected Result**: Components that require access to the "vets" cache should be able to interact with it, perform caching operations, and retrieve cached data as intended.

When defining these test scenarios, it's important to remember that they should be translated into actual test cases within a testing framework and executed against the application to ensure that the `petclinicCacheConfigurationCustomizer` meets its expected behavior.
*/
package org.springframework.samples.petclinic.system;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import javax.cache.CacheManager;
import javax.cache.configuration.Configuration;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;

public class CacheConfiguration_petclinicCacheConfigurationCustomizer_adca9b283f_Test {

    private CacheConfiguration cacheConfiguration;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        cacheConfiguration = new CacheConfiguration();
    }

    @Test
    public void testCacheCreation() {
        CacheManager cacheManager = mock(CacheManager.class);
        doNothing().when(cacheManager).createCache(Mockito.anyString(), Mockito.any(Configuration.class));

        JCacheManagerCustomizer customizer = cacheConfiguration.petclinicCacheConfigurationCustomizer();
        customizer.customize(cacheManager);

        verify(cacheManager).createCache("vets", cacheConfiguration.cacheConfiguration());
    }

    @Test
    public void testCacheConfiguration() {
        CacheManager cacheManager = mock(CacheManager.class);
        doNothing().when(cacheManager).createCache(Mockito.anyString(), Mockito.any(Configuration.class));

        JCacheManagerCustomizer customizer = cacheConfiguration.petclinicCacheConfigurationCustomizer();
        customizer.customize(cacheManager);

        Configuration<Object, Object> config = cacheConfiguration.cacheConfiguration();
        assertTrue(config.isStatisticsEnabled());
    }
}
